// Generated by Haxe 4.1.0
#ifndef INCLUDED_feathers_layout_IVirtualLayout
#define INCLUDED_feathers_layout_IVirtualLayout

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_feathers_layout_IScrollLayout
#include <feathers/layout/IScrollLayout.h>
#endif
HX_DECLARE_CLASS2(feathers,layout,ILayout)
HX_DECLARE_CLASS2(feathers,layout,IScrollLayout)
HX_DECLARE_CLASS2(feathers,layout,IVirtualLayout)
HX_DECLARE_CLASS2(feathers,layout,VirtualLayoutRange)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)

namespace feathers{
namespace layout{


class HXCPP_CLASS_ATTRIBUTES IVirtualLayout_obj {
	public:
		typedef  ::feathers::layout::IScrollLayout_obj super;
		HX_DO_INTERFACE_RTTI;

		void (::hx::Object :: *_hx_addEventListener)(::String type, ::Dynamic listener,::hx::Null< bool >  useCapture,::hx::Null< int >  priority,::hx::Null< bool >  useWeakReference); 
		static inline void addEventListener( ::Dynamic _hx_,::String type, ::Dynamic listener,::hx::Null< bool >  useCapture,::hx::Null< int >  priority,::hx::Null< bool >  useWeakReference) {
			(_hx_.mPtr->*( ::hx::interface_cast< ::feathers::layout::IVirtualLayout_obj *>(_hx_.mPtr->_hx_getInterface(0x3aa17e26)))->_hx_addEventListener)(type,listener,useCapture,priority,useWeakReference);
		}
		bool (::hx::Object :: *_hx_dispatchEvent)( ::openfl::events::Event event); 
		static inline bool dispatchEvent( ::Dynamic _hx_, ::openfl::events::Event event) {
			return (_hx_.mPtr->*( ::hx::interface_cast< ::feathers::layout::IVirtualLayout_obj *>(_hx_.mPtr->_hx_getInterface(0x3aa17e26)))->_hx_dispatchEvent)(event);
		}
		bool (::hx::Object :: *_hx_hasEventListener)(::String type); 
		static inline bool hasEventListener( ::Dynamic _hx_,::String type) {
			return (_hx_.mPtr->*( ::hx::interface_cast< ::feathers::layout::IVirtualLayout_obj *>(_hx_.mPtr->_hx_getInterface(0x3aa17e26)))->_hx_hasEventListener)(type);
		}
		void (::hx::Object :: *_hx_removeEventListener)(::String type, ::Dynamic listener,::hx::Null< bool >  useCapture); 
		static inline void removeEventListener( ::Dynamic _hx_,::String type, ::Dynamic listener,::hx::Null< bool >  useCapture) {
			(_hx_.mPtr->*( ::hx::interface_cast< ::feathers::layout::IVirtualLayout_obj *>(_hx_.mPtr->_hx_getInterface(0x3aa17e26)))->_hx_removeEventListener)(type,listener,useCapture);
		}
		bool (::hx::Object :: *_hx_willTrigger)(::String type); 
		static inline bool willTrigger( ::Dynamic _hx_,::String type) {
			return (_hx_.mPtr->*( ::hx::interface_cast< ::feathers::layout::IVirtualLayout_obj *>(_hx_.mPtr->_hx_getInterface(0x3aa17e26)))->_hx_willTrigger)(type);
		}
		 ::feathers::layout::LayoutBoundsResult (::hx::Object :: *_hx_layout)(::Array< ::Dynamic> items, ::feathers::layout::Measurements measurements, ::feathers::layout::LayoutBoundsResult result); 
		static inline  ::feathers::layout::LayoutBoundsResult layout( ::Dynamic _hx_,::Array< ::Dynamic> items, ::feathers::layout::Measurements measurements, ::feathers::layout::LayoutBoundsResult result) {
			return (_hx_.mPtr->*( ::hx::interface_cast< ::feathers::layout::IVirtualLayout_obj *>(_hx_.mPtr->_hx_getInterface(0x3aa17e26)))->_hx_layout)(items,measurements,result);
		}
		Float (::hx::Object :: *_hx_set_scrollX)(Float value); 
		static inline Float set_scrollX( ::Dynamic _hx_,Float value) {
			return (_hx_.mPtr->*( ::hx::interface_cast< ::feathers::layout::IVirtualLayout_obj *>(_hx_.mPtr->_hx_getInterface(0x3aa17e26)))->_hx_set_scrollX)(value);
		}
		Float (::hx::Object :: *_hx_set_scrollY)(Float value); 
		static inline Float set_scrollY( ::Dynamic _hx_,Float value) {
			return (_hx_.mPtr->*( ::hx::interface_cast< ::feathers::layout::IVirtualLayout_obj *>(_hx_.mPtr->_hx_getInterface(0x3aa17e26)))->_hx_set_scrollY)(value);
		}
		 ::feathers::layout::Direction (::hx::Object :: *_hx_get_primaryDirection)(); 
		static inline  ::feathers::layout::Direction get_primaryDirection( ::Dynamic _hx_) {
			return (_hx_.mPtr->*( ::hx::interface_cast< ::feathers::layout::IVirtualLayout_obj *>(_hx_.mPtr->_hx_getInterface(0x3aa17e26)))->_hx_get_primaryDirection)();
		}
		bool (::hx::Object :: *_hx_get_requiresLayoutOnScroll)(); 
		static inline bool get_requiresLayoutOnScroll( ::Dynamic _hx_) {
			return (_hx_.mPtr->*( ::hx::interface_cast< ::feathers::layout::IVirtualLayout_obj *>(_hx_.mPtr->_hx_getInterface(0x3aa17e26)))->_hx_get_requiresLayoutOnScroll)();
		}
		::cpp::VirtualArray (::hx::Object :: *_hx_get_virtualCache)(); 
		static inline ::cpp::VirtualArray get_virtualCache( ::Dynamic _hx_) {
			return (_hx_.mPtr->*( ::hx::interface_cast< ::feathers::layout::IVirtualLayout_obj *>(_hx_.mPtr->_hx_getInterface(0x3aa17e26)))->_hx_get_virtualCache)();
		}
		::cpp::VirtualArray (::hx::Object :: *_hx_set_virtualCache)(::cpp::VirtualArray value); 
		static inline ::cpp::VirtualArray set_virtualCache( ::Dynamic _hx_,::cpp::VirtualArray value) {
			return (_hx_.mPtr->*( ::hx::interface_cast< ::feathers::layout::IVirtualLayout_obj *>(_hx_.mPtr->_hx_getInterface(0x3aa17e26)))->_hx_set_virtualCache)(value);
		}
		 ::feathers::layout::VirtualLayoutRange (::hx::Object :: *_hx_getVisibleIndices)(int itemCount,Float width,Float height, ::feathers::layout::VirtualLayoutRange result); 
		static inline  ::feathers::layout::VirtualLayoutRange getVisibleIndices( ::Dynamic _hx_,int itemCount,Float width,Float height, ::feathers::layout::VirtualLayoutRange result) {
			return (_hx_.mPtr->*( ::hx::interface_cast< ::feathers::layout::IVirtualLayout_obj *>(_hx_.mPtr->_hx_getInterface(0x3aa17e26)))->_hx_getVisibleIndices)(itemCount,width,height,result);
		}
};

} // end namespace feathers
} // end namespace layout

#endif /* INCLUDED_feathers_layout_IVirtualLayout */ 
