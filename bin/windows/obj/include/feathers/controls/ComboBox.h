// Generated by Haxe 4.1.0
#ifndef INCLUDED_feathers_controls_ComboBox
#define INCLUDED_feathers_controls_ComboBox

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_feathers_core_FeathersControl
#include <feathers/core/FeathersControl.h>
#endif
#ifndef INCLUDED_feathers_core_IFocusObject
#include <feathers/core/IFocusObject.h>
#endif
#ifndef INCLUDED_feathers_core_IDataSelector
#include <feathers/core/IDataSelector.h>
#endif
#ifndef INCLUDED_feathers_core_IIndexSelector
#include <feathers/core/IIndexSelector.h>
#endif
HX_DECLARE_CLASS2(feathers,controls,BasicButton)
HX_DECLARE_CLASS2(feathers,controls,Button)
HX_DECLARE_CLASS2(feathers,controls,ComboBox)
HX_DECLARE_CLASS2(feathers,controls,ListView)
HX_DECLARE_CLASS2(feathers,controls,TextInput)
HX_DECLARE_CLASS3(feathers,controls,popups,IPopUpAdapter)
HX_DECLARE_CLASS3(feathers,controls,supportClasses,BaseScrollContainer)
HX_DECLARE_CLASS2(feathers,core,FeathersControl)
HX_DECLARE_CLASS2(feathers,core,IDataSelector)
HX_DECLARE_CLASS2(feathers,core,IDisplayObject)
HX_DECLARE_CLASS2(feathers,core,IFocusObject)
HX_DECLARE_CLASS2(feathers,core,IIndexSelector)
HX_DECLARE_CLASS2(feathers,core,IMeasureObject)
HX_DECLARE_CLASS2(feathers,core,IStateContext)
HX_DECLARE_CLASS2(feathers,core,ITextControl)
HX_DECLARE_CLASS2(feathers,core,IUIControl)
HX_DECLARE_CLASS2(feathers,core,IValidating)
HX_DECLARE_CLASS2(feathers,core,MeasureSprite)
HX_DECLARE_CLASS2(feathers,core,ValidatingSprite)
HX_DECLARE_CLASS2(feathers,data,IFlatCollection)
HX_DECLARE_CLASS2(feathers,events,TriggerEvent)
HX_DECLARE_CLASS2(feathers,layout,ILayoutObject)
HX_DECLARE_CLASS2(feathers,layout,Measurements)
HX_DECLARE_CLASS2(feathers,style,IStyleObject)
HX_DECLARE_CLASS2(feathers,style,IVariantStyleObject)
HX_DECLARE_CLASS2(feathers,utils,DisplayObjectRecycler)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,FocusEvent)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,KeyboardEvent)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)
HX_DECLARE_CLASS2(openfl,events,TouchEvent)

namespace feathers{
namespace controls{


class HXCPP_CLASS_ATTRIBUTES ComboBox_obj : public  ::feathers::core::FeathersControl_obj
{
	public:
		typedef  ::feathers::core::FeathersControl_obj super;
		typedef ComboBox_obj OBJ_;
		ComboBox_obj();

	public:
		enum { _hx_ClassId = 0x1bc3b9a3 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="feathers.controls.ComboBox")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"feathers.controls.ComboBox"); }
		static ::hx::ObjectPtr< ComboBox_obj > __new();
		static ::hx::ObjectPtr< ComboBox_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		static void __alloc_dynamic_functions(::hx::Ctx *_hx_alloc,ComboBox_obj *_hx_obj);
		//~ComboBox_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("ComboBox",7d,ae,be,4b); }

		static void __boot();
		static ::String INVALIDATION_FLAG_BUTTON_FACTORY;
		static ::String INVALIDATION_FLAG_TEXT_INPUT_FACTORY;
		static ::String INVALIDATION_FLAG_LIST_VIEW_FACTORY;
		static ::String CHILD_VARIANT_BUTTON;
		static ::String CHILD_VARIANT_TEXT_INPUT;
		static ::String CHILD_VARIANT_LIST_VIEW;
		static  ::feathers::controls::Button defaultButtonFactory();
		static ::Dynamic defaultButtonFactory_dyn();

		static  ::feathers::controls::TextInput defaultTextInputFactory();
		static ::Dynamic defaultTextInputFactory_dyn();

		static  ::feathers::controls::ListView defaultListViewFactory();
		static ::Dynamic defaultListViewFactory_dyn();

		 ::feathers::controls::Button button;
		 ::feathers::controls::TextInput textInput;
		 ::feathers::controls::ListView listView;
		 ::feathers::layout::Measurements buttonMeasurements;
		 ::feathers::layout::Measurements textInputMeasurements;
		::Dynamic dataProvider;
		::Dynamic set_dataProvider(::Dynamic value);
		::Dynamic set_dataProvider_dyn();

		int pendingSelectedIndex;
		 ::Dynamic pendingSelectedItem;
		int selectedIndex;
		int get_selectedIndex();
		::Dynamic get_selectedIndex_dyn();

		int set_selectedIndex(int value);
		::Dynamic set_selectedIndex_dyn();

		int get_maxSelectedIndex();
		::Dynamic get_maxSelectedIndex_dyn();

		 ::Dynamic selectedItem;
		 ::Dynamic get_selectedItem();
		::Dynamic get_selectedItem_dyn();

		 ::Dynamic set_selectedItem( ::Dynamic value);
		::Dynamic set_selectedItem_dyn();

		 ::feathers::utils::DisplayObjectRecycler itemRendererRecycler;
		 ::feathers::utils::DisplayObjectRecycler set_itemRendererRecycler( ::feathers::utils::DisplayObjectRecycler value);
		::Dynamic set_itemRendererRecycler_dyn();

		::Dynamic itemToText;
		inline ::Dynamic &itemToText_dyn() {return itemToText; }

		bool _ignoreTextInputChange;
		bool _ignoreListViewChange;
		::Dynamic popUpAdapter;
		 ::Dynamic buttonFactory;
		Dynamic buttonFactory_dyn() { return buttonFactory;}
		 ::Dynamic set_buttonFactory( ::Dynamic value);
		::Dynamic set_buttonFactory_dyn();

		 ::Dynamic textInputFactory;
		Dynamic textInputFactory_dyn() { return textInputFactory;}
		 ::Dynamic set_textInputFactory( ::Dynamic value);
		::Dynamic set_textInputFactory_dyn();

		 ::Dynamic listViewFactory;
		Dynamic listViewFactory_dyn() { return listViewFactory;}
		 ::Dynamic set_listViewFactory( ::Dynamic value);
		::Dynamic set_listViewFactory_dyn();

		bool get_open();
		::Dynamic get_open_dyn();

		::String _filterText;
		void openListView();
		::Dynamic openListView_dyn();

		void closeListView();
		::Dynamic closeListView_dyn();

		void initializeComboBoxTheme();
		::Dynamic initializeComboBoxTheme_dyn();

		void update();

		void createButton();
		::Dynamic createButton_dyn();

		void createTextInput();
		::Dynamic createTextInput_dyn();

		void createListView();
		::Dynamic createListView_dyn();

		void refreshData();
		::Dynamic refreshData_dyn();

		void refreshSelection();
		::Dynamic refreshSelection_dyn();

		void refreshEnabled();
		::Dynamic refreshEnabled_dyn();

		bool comboBoxFilterFunction( ::Dynamic item);
		::Dynamic comboBoxFilterFunction_dyn();

		bool measure();
		::Dynamic measure_dyn();

		void layoutChildren();
		::Dynamic layoutChildren_dyn();

		void textInput_changeHandler( ::openfl::events::Event event);
		::Dynamic textInput_changeHandler_dyn();

		void textInput_focusInHandler( ::openfl::events::FocusEvent event);
		::Dynamic textInput_focusInHandler_dyn();

		void button_triggerHandler( ::feathers::events::TriggerEvent event);
		::Dynamic button_triggerHandler_dyn();

		void listView_changeHandler( ::openfl::events::Event event);
		::Dynamic listView_changeHandler_dyn();

		void comboBox_listView_removedFromStageHandler( ::openfl::events::Event event);
		::Dynamic comboBox_listView_removedFromStageHandler_dyn();

		void comboBox_keyUpHandler( ::openfl::events::KeyboardEvent event);
		::Dynamic comboBox_keyUpHandler_dyn();

		void comboBox_stage_mouseDownHandler( ::openfl::events::MouseEvent event);
		::Dynamic comboBox_stage_mouseDownHandler_dyn();

		void comboBox_stage_touchBeginHandler( ::openfl::events::TouchEvent event);
		::Dynamic comboBox_stage_touchBeginHandler_dyn();

		void comboBox_popUpAdapter_openHandler( ::openfl::events::Event event);
		::Dynamic comboBox_popUpAdapter_openHandler_dyn();

		void comboBox_popUpAdapter_closeHandler( ::openfl::events::Event event);
		::Dynamic comboBox_popUpAdapter_closeHandler_dyn();

		::Dynamic set_popUpAdapter(::Dynamic value);
		::Dynamic set_popUpAdapter_dyn();

		::Dynamic clearStyle_popUpAdapter();
		::Dynamic clearStyle_popUpAdapter_dyn();

		::hx::Class get_styleContext();

};

} // end namespace feathers
} // end namespace controls

#endif /* INCLUDED_feathers_controls_ComboBox */ 
