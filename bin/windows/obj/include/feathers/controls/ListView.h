// Generated by Haxe 4.1.0
#ifndef INCLUDED_feathers_controls_ListView
#define INCLUDED_feathers_controls_ListView

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_feathers_controls_supportClasses_BaseScrollContainer
#include <feathers/controls/supportClasses/BaseScrollContainer.h>
#endif
#ifndef INCLUDED_feathers_core_IDataSelector
#include <feathers/core/IDataSelector.h>
#endif
#ifndef INCLUDED_feathers_core_IIndexSelector
#include <feathers/core/IIndexSelector.h>
#endif
HX_DECLARE_CLASS2(feathers,controls,ListView)
HX_DECLARE_CLASS3(feathers,controls,supportClasses,AdvancedLayoutViewPort)
HX_DECLARE_CLASS3(feathers,controls,supportClasses,BaseScrollContainer)
HX_DECLARE_CLASS3(feathers,controls,supportClasses,IViewPort)
HX_DECLARE_CLASS2(feathers,core,FeathersControl)
HX_DECLARE_CLASS2(feathers,core,IDataSelector)
HX_DECLARE_CLASS2(feathers,core,IDisplayObject)
HX_DECLARE_CLASS2(feathers,core,IFocusObject)
HX_DECLARE_CLASS2(feathers,core,IIndexSelector)
HX_DECLARE_CLASS2(feathers,core,IMeasureObject)
HX_DECLARE_CLASS2(feathers,core,IUIControl)
HX_DECLARE_CLASS2(feathers,core,IValidating)
HX_DECLARE_CLASS2(feathers,core,MeasureSprite)
HX_DECLARE_CLASS2(feathers,core,ValidatingSprite)
HX_DECLARE_CLASS2(feathers,data,IFlatCollection)
HX_DECLARE_CLASS2(feathers,data,ListViewItemState)
HX_DECLARE_CLASS2(feathers,events,FlatCollectionEvent)
HX_DECLARE_CLASS2(feathers,layout,Direction)
HX_DECLARE_CLASS2(feathers,layout,ILayout)
HX_DECLARE_CLASS2(feathers,layout,ILayoutObject)
HX_DECLARE_CLASS2(feathers,layout,VirtualLayoutRange)
HX_DECLARE_CLASS2(feathers,style,IStyleObject)
HX_DECLARE_CLASS2(feathers,style,IVariantStyleObject)
HX_DECLARE_CLASS2(feathers,utils,DisplayObjectRecycler)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,ObjectMap)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,KeyboardEvent)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)
HX_DECLARE_CLASS2(openfl,events,TouchEvent)

namespace feathers{
namespace controls{


class HXCPP_CLASS_ATTRIBUTES ListView_obj : public  ::feathers::controls::supportClasses::BaseScrollContainer_obj
{
	public:
		typedef  ::feathers::controls::supportClasses::BaseScrollContainer_obj super;
		typedef ListView_obj OBJ_;
		ListView_obj();

	public:
		enum { _hx_ClassId = 0x2607a7f1 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="feathers.controls.ListView")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"feathers.controls.ListView"); }
		static ::hx::ObjectPtr< ListView_obj > __new();
		static ::hx::ObjectPtr< ListView_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		static void __alloc_dynamic_functions(::hx::Ctx *_hx_alloc,ListView_obj *_hx_obj);
		//~ListView_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("ListView",03,be,f5,07); }

		static void __boot();
		static  ::Dynamic __meta__;
		static ::String VARIANT_BORDERLESS;
		static ::String VARIANT_BORDER;
		static ::String INVALIDATION_FLAG_ITEM_RENDERER_FACTORY;
		static void defaultUpdateItemRenderer( ::openfl::display::DisplayObject itemRenderer, ::feathers::data::ListViewItemState state);
		static ::Dynamic defaultUpdateItemRenderer_dyn();

		static void defaultResetItemRenderer( ::openfl::display::DisplayObject itemRenderer, ::feathers::data::ListViewItemState state);
		static ::Dynamic defaultResetItemRenderer_dyn();

		 ::feathers::controls::supportClasses::AdvancedLayoutViewPort listViewPort;
		 ::feathers::layout::Direction get_primaryDirection();

		::Dynamic dataProvider;
		::Dynamic set_dataProvider(::Dynamic value);
		::Dynamic set_dataProvider_dyn();

		int selectedIndex;
		int get_selectedIndex();
		::Dynamic get_selectedIndex_dyn();

		int set_selectedIndex(int value);
		::Dynamic set_selectedIndex_dyn();

		int get_maxSelectedIndex();
		::Dynamic get_maxSelectedIndex_dyn();

		 ::Dynamic selectedItem;
		 ::Dynamic get_selectedItem();
		::Dynamic get_selectedItem_dyn();

		 ::Dynamic set_selectedItem( ::Dynamic value);
		::Dynamic set_selectedItem_dyn();

		::Dynamic _previousLayout;
		::Dynamic layout;
		 ::feathers::utils::DisplayObjectRecycler itemRendererRecycler;
		 ::feathers::utils::DisplayObjectRecycler set_itemRendererRecycler( ::feathers::utils::DisplayObjectRecycler value);
		::Dynamic set_itemRendererRecycler_dyn();

		::Array< ::Dynamic> inactiveItemRenderers;
		::Array< ::Dynamic> activeItemRenderers;
		 ::haxe::ds::ObjectMap dataToItemRenderer;
		 ::haxe::ds::ObjectMap itemRendererToData;
		::cpp::VirtualArray _unrenderedData;
		::cpp::VirtualArray _virtualCache;
		bool selectable;
		bool set_selectable(bool value);
		::Dynamic set_selectable_dyn();

		bool virtualLayout;
		bool set_virtualLayout(bool value);
		::Dynamic set_virtualLayout_dyn();

		bool pointerSelectionEnabled;
		bool _ignoreSelectionChange;
		::Dynamic itemToText;
		inline ::Dynamic &itemToText_dyn() {return itemToText; }

		void initializeListViewTheme();
		::Dynamic initializeListViewTheme_dyn();

		::Array< ::Dynamic> _layoutItems;
		void update();

		void refreshItemRenderers(::Array< ::Dynamic> items);
		::Dynamic refreshItemRenderers_dyn();

		void refreshInactiveItemRenderers(bool factoryInvalid);
		::Dynamic refreshInactiveItemRenderers_dyn();

		void recoverInactiveItemRenderers();
		::Dynamic recoverInactiveItemRenderers_dyn();

		void freeInactiveItemRenderers();
		::Dynamic freeInactiveItemRenderers_dyn();

		 ::feathers::data::ListViewItemState _currentItemState;
		 ::feathers::layout::VirtualLayoutRange _visibleIndices;
		void findUnrenderedData();
		::Dynamic findUnrenderedData_dyn();

		void renderUnrenderedData();
		::Dynamic renderUnrenderedData_dyn();

		 ::openfl::display::DisplayObject createItemRenderer( ::Dynamic item,int index);
		::Dynamic createItemRenderer_dyn();

		void destroyItemRenderer( ::openfl::display::DisplayObject itemRenderer);
		::Dynamic destroyItemRenderer_dyn();

		void refreshSelectedIndicesAfterFilterOrSort();
		::Dynamic refreshSelectedIndicesAfterFilterOrSort_dyn();

		void listView_itemRenderer_touchTapHandler( ::openfl::events::TouchEvent event);
		::Dynamic listView_itemRenderer_touchTapHandler_dyn();

		void listView_itemRenderer_clickHandler( ::openfl::events::MouseEvent event);
		::Dynamic listView_itemRenderer_clickHandler_dyn();

		void listView_itemRenderer_changeHandler( ::openfl::events::Event event);
		::Dynamic listView_itemRenderer_changeHandler_dyn();

		void listView_dataProvider_changeHandler( ::openfl::events::Event event);
		::Dynamic listView_dataProvider_changeHandler_dyn();

		void listView_dataProvider_addItemHandler( ::feathers::events::FlatCollectionEvent event);
		::Dynamic listView_dataProvider_addItemHandler_dyn();

		void listView_dataProvider_removeItemHandler( ::feathers::events::FlatCollectionEvent event);
		::Dynamic listView_dataProvider_removeItemHandler_dyn();

		void listView_dataProvider_replaceItemHandler( ::feathers::events::FlatCollectionEvent event);
		::Dynamic listView_dataProvider_replaceItemHandler_dyn();

		void listView_dataProvider_removeAllHandler( ::feathers::events::FlatCollectionEvent event);
		::Dynamic listView_dataProvider_removeAllHandler_dyn();

		void listView_dataProvider_resetHandler( ::feathers::events::FlatCollectionEvent event);
		::Dynamic listView_dataProvider_resetHandler_dyn();

		void listView_dataProvider_sortChangeHandler( ::feathers::events::FlatCollectionEvent event);
		::Dynamic listView_dataProvider_sortChangeHandler_dyn();

		void listView_dataProvider_filterChangeHandler( ::feathers::events::FlatCollectionEvent event);
		::Dynamic listView_dataProvider_filterChangeHandler_dyn();

		int navigateWithKeyboard(int startIndex,int keyCode);
		::Dynamic navigateWithKeyboard_dyn();

		void listView_keyDownHandler( ::openfl::events::KeyboardEvent event);
		::Dynamic listView_keyDownHandler_dyn();

		::hx::Class get_styleContext();

		::Dynamic set_layout(::Dynamic value);
		::Dynamic set_layout_dyn();

		::Dynamic clearStyle_layout();
		::Dynamic clearStyle_layout_dyn();

};

} // end namespace feathers
} // end namespace controls

#endif /* INCLUDED_feathers_controls_ListView */ 
