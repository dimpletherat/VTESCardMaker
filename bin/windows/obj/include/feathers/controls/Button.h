// Generated by Haxe 4.1.0
#ifndef INCLUDED_feathers_controls_Button
#define INCLUDED_feathers_controls_Button

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_feathers_controls_BasicButton
#include <feathers/controls/BasicButton.h>
#endif
#ifndef INCLUDED_feathers_core_IFocusObject
#include <feathers/core/IFocusObject.h>
#endif
#ifndef INCLUDED_feathers_core_ITextControl
#include <feathers/core/ITextControl.h>
#endif
HX_DECLARE_CLASS2(feathers,controls,BasicButton)
HX_DECLARE_CLASS2(feathers,controls,Button)
HX_DECLARE_CLASS2(feathers,controls,ButtonState)
HX_DECLARE_CLASS2(feathers,core,FeathersControl)
HX_DECLARE_CLASS2(feathers,core,IDisplayObject)
HX_DECLARE_CLASS2(feathers,core,IFocusObject)
HX_DECLARE_CLASS2(feathers,core,IMeasureObject)
HX_DECLARE_CLASS2(feathers,core,IStateContext)
HX_DECLARE_CLASS2(feathers,core,ITextControl)
HX_DECLARE_CLASS2(feathers,core,IUIControl)
HX_DECLARE_CLASS2(feathers,core,IValidating)
HX_DECLARE_CLASS2(feathers,core,MeasureSprite)
HX_DECLARE_CLASS2(feathers,core,ValidatingSprite)
HX_DECLARE_CLASS2(feathers,layout,HorizontalAlign)
HX_DECLARE_CLASS2(feathers,layout,ILayoutObject)
HX_DECLARE_CLASS2(feathers,layout,Measurements)
HX_DECLARE_CLASS2(feathers,layout,RelativePosition)
HX_DECLARE_CLASS2(feathers,layout,VerticalAlign)
HX_DECLARE_CLASS2(feathers,style,IStyleObject)
HX_DECLARE_CLASS2(feathers,style,IVariantStyleObject)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,BalancedTree)
HX_DECLARE_CLASS2(haxe,ds,EnumValueMap)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,text,TextField)
HX_DECLARE_CLASS2(openfl,text,TextFormat)

namespace feathers{
namespace controls{


class HXCPP_CLASS_ATTRIBUTES Button_obj : public  ::feathers::controls::BasicButton_obj
{
	public:
		typedef  ::feathers::controls::BasicButton_obj super;
		typedef Button_obj OBJ_;
		Button_obj();

	public:
		enum { _hx_ClassId = 0x249cabb8 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="feathers.controls.Button")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"feathers.controls.Button"); }
		static ::hx::ObjectPtr< Button_obj > __new();
		static ::hx::ObjectPtr< Button_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Button_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("Button",12,d6,74,0e); }

		static void __boot();
		static  ::Dynamic __meta__;
		 ::openfl::text::TextField textField;
		::String _previousText;
		 ::openfl::text::TextFormat _previousTextFormat;
		bool _updatedTextStyles;
		::String text;
		::String get_text();
		::Dynamic get_text_dyn();

		::String set_text(::String value);
		::Dynamic set_text_dyn();

		 ::openfl::text::TextFormat textFormat;
		bool embedFonts;
		 ::haxe::ds::EnumValueMap _stateToIcon;
		 ::feathers::layout::Measurements _iconMeasurements;
		 ::openfl::display::DisplayObject _currentIcon;
		bool _ignoreIconResizes;
		 ::openfl::display::DisplayObject icon;
		Float paddingTop;
		Float paddingRight;
		Float paddingBottom;
		Float paddingLeft;
		 ::feathers::layout::HorizontalAlign horizontalAlign;
		 ::feathers::layout::VerticalAlign verticalAlign;
		 ::feathers::layout::RelativePosition iconPosition;
		Float gap;
		Float minGap;
		Float _textMeasuredWidth;
		Float _textMeasuredHeight;
		 ::haxe::ds::EnumValueMap _stateToTextFormat;
		 ::openfl::text::TextFormat getTextFormatForState( ::feathers::controls::ButtonState state);
		::Dynamic getTextFormatForState_dyn();

		void setTextFormatForState( ::feathers::controls::ButtonState state, ::openfl::text::TextFormat textFormat);
		::Dynamic setTextFormatForState_dyn();

		 ::openfl::display::DisplayObject getIconForState( ::feathers::controls::ButtonState state);
		::Dynamic getIconForState_dyn();

		void setIconForState( ::feathers::controls::ButtonState state, ::openfl::display::DisplayObject icon);
		::Dynamic setIconForState_dyn();

		void initializeButtonTheme();
		::Dynamic initializeButtonTheme_dyn();

		void initialize();

		void update();

		bool measure();

		void refreshTextStyles();
		::Dynamic refreshTextStyles_dyn();

		void refreshText();
		::Dynamic refreshText_dyn();

		 ::openfl::text::TextFormat getCurrentTextFormat();
		::Dynamic getCurrentTextFormat_dyn();

		void layoutContent();
		::Dynamic layoutContent_dyn();

		void refreshTextFieldDimensions(bool forMeasurement);
		::Dynamic refreshTextFieldDimensions_dyn();

		void positionSingleChild( ::openfl::display::DisplayObject displayObject);
		::Dynamic positionSingleChild_dyn();

		void positionTextAndIcon();
		::Dynamic positionTextAndIcon_dyn();

		void refreshIcon();
		::Dynamic refreshIcon_dyn();

		 ::openfl::display::DisplayObject getCurrentIcon();
		::Dynamic getCurrentIcon_dyn();

		void removeCurrentIcon( ::openfl::display::DisplayObject icon);
		::Dynamic removeCurrentIcon_dyn();

		::hx::Class get_styleContext();

		 ::openfl::text::TextFormat set_textFormat( ::openfl::text::TextFormat value);
		::Dynamic set_textFormat_dyn();

		 ::openfl::text::TextFormat clearStyle_textFormat();
		::Dynamic clearStyle_textFormat_dyn();

		bool set_embedFonts(bool value);
		::Dynamic set_embedFonts_dyn();

		bool clearStyle_embedFonts();
		::Dynamic clearStyle_embedFonts_dyn();

		 ::openfl::display::DisplayObject set_icon( ::openfl::display::DisplayObject value);
		::Dynamic set_icon_dyn();

		 ::openfl::display::DisplayObject clearStyle_icon();
		::Dynamic clearStyle_icon_dyn();

		Float set_paddingTop(Float value);
		::Dynamic set_paddingTop_dyn();

		Float clearStyle_paddingTop();
		::Dynamic clearStyle_paddingTop_dyn();

		Float set_paddingRight(Float value);
		::Dynamic set_paddingRight_dyn();

		Float clearStyle_paddingRight();
		::Dynamic clearStyle_paddingRight_dyn();

		Float set_paddingBottom(Float value);
		::Dynamic set_paddingBottom_dyn();

		Float clearStyle_paddingBottom();
		::Dynamic clearStyle_paddingBottom_dyn();

		Float set_paddingLeft(Float value);
		::Dynamic set_paddingLeft_dyn();

		Float clearStyle_paddingLeft();
		::Dynamic clearStyle_paddingLeft_dyn();

		 ::feathers::layout::HorizontalAlign set_horizontalAlign( ::feathers::layout::HorizontalAlign value);
		::Dynamic set_horizontalAlign_dyn();

		 ::feathers::layout::HorizontalAlign clearStyle_horizontalAlign();
		::Dynamic clearStyle_horizontalAlign_dyn();

		 ::feathers::layout::VerticalAlign set_verticalAlign( ::feathers::layout::VerticalAlign value);
		::Dynamic set_verticalAlign_dyn();

		 ::feathers::layout::VerticalAlign clearStyle_verticalAlign();
		::Dynamic clearStyle_verticalAlign_dyn();

		 ::feathers::layout::RelativePosition set_iconPosition( ::feathers::layout::RelativePosition value);
		::Dynamic set_iconPosition_dyn();

		 ::feathers::layout::RelativePosition clearStyle_iconPosition();
		::Dynamic clearStyle_iconPosition_dyn();

		Float set_gap(Float value);
		::Dynamic set_gap_dyn();

		Float clearStyle_gap();
		::Dynamic clearStyle_gap_dyn();

		Float set_minGap(Float value);
		::Dynamic set_minGap_dyn();

		Float clearStyle_minGap();
		::Dynamic clearStyle_minGap_dyn();

};

} // end namespace feathers
} // end namespace controls

#endif /* INCLUDED_feathers_controls_Button */ 
