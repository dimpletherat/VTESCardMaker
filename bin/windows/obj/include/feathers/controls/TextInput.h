// Generated by Haxe 4.1.0
#ifndef INCLUDED_feathers_controls_TextInput
#define INCLUDED_feathers_controls_TextInput

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_feathers_core_FeathersControl
#include <feathers/core/FeathersControl.h>
#endif
#ifndef INCLUDED_feathers_core_IFocusObject
#include <feathers/core/IFocusObject.h>
#endif
#ifndef INCLUDED_feathers_core_ITextControl
#include <feathers/core/ITextControl.h>
#endif
#ifndef INCLUDED_feathers_core_IStateContext
#include <feathers/core/IStateContext.h>
#endif
HX_DECLARE_CLASS2(feathers,controls,TextInput)
HX_DECLARE_CLASS2(feathers,controls,TextInputState)
HX_DECLARE_CLASS2(feathers,core,FeathersControl)
HX_DECLARE_CLASS2(feathers,core,IDisplayObject)
HX_DECLARE_CLASS2(feathers,core,IFocusObject)
HX_DECLARE_CLASS2(feathers,core,IMeasureObject)
HX_DECLARE_CLASS2(feathers,core,IStateContext)
HX_DECLARE_CLASS2(feathers,core,ITextControl)
HX_DECLARE_CLASS2(feathers,core,IUIControl)
HX_DECLARE_CLASS2(feathers,core,IValidating)
HX_DECLARE_CLASS2(feathers,core,MeasureSprite)
HX_DECLARE_CLASS2(feathers,core,ValidatingSprite)
HX_DECLARE_CLASS2(feathers,layout,ILayoutObject)
HX_DECLARE_CLASS2(feathers,layout,Measurements)
HX_DECLARE_CLASS2(feathers,layout,VerticalAlign)
HX_DECLARE_CLASS2(feathers,style,IStyleObject)
HX_DECLARE_CLASS2(feathers,style,IVariantStyleObject)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,BalancedTree)
HX_DECLARE_CLASS2(haxe,ds,EnumValueMap)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,FocusEvent)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,text,TextField)
HX_DECLARE_CLASS2(openfl,text,TextFormat)

namespace feathers{
namespace controls{


class HXCPP_CLASS_ATTRIBUTES TextInput_obj : public  ::feathers::core::FeathersControl_obj
{
	public:
		typedef  ::feathers::core::FeathersControl_obj super;
		typedef TextInput_obj OBJ_;
		TextInput_obj();

	public:
		enum { _hx_ClassId = 0x2d42ea17 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="feathers.controls.TextInput")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"feathers.controls.TextInput"); }
		static ::hx::ObjectPtr< TextInput_obj > __new();
		static ::hx::ObjectPtr< TextInput_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~TextInput_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		 ::Dynamic get_currentState_2aa2127b();
		::String __ToString() const { return HX_("TextInput",fd,33,de,f8); }

		static void __boot();
		static  ::Dynamic __meta__;
		 ::feathers::controls::TextInputState currentState;
		 ::feathers::controls::TextInputState get_currentState();
		::Dynamic get_currentState_dyn();

		bool set_enabled(bool value);

		 ::feathers::layout::Measurements _backgroundSkinMeasurements;
		 ::openfl::display::DisplayObject _currentBackgroundSkin;
		 ::openfl::display::DisplayObject backgroundSkin;
		 ::haxe::ds::EnumValueMap _stateToSkin;
		 ::openfl::text::TextField textField;
		::String _previousText;
		 ::openfl::text::TextFormat _previousTextFormat;
		bool _updatedTextStyles;
		::String text;
		::String get_text();
		::Dynamic get_text_dyn();

		::String set_text(::String value);
		::Dynamic set_text_dyn();

		::String restrict;
		::String set_restrict(::String value);
		::Dynamic set_restrict_dyn();

		bool displayAsPassword;
		bool set_displayAsPassword(bool value);
		::Dynamic set_displayAsPassword_dyn();

		 ::openfl::text::TextFormat textFormat;
		bool embedFonts;
		 ::haxe::ds::EnumValueMap _stateToTextFormat;
		Float paddingTop;
		Float paddingRight;
		Float paddingBottom;
		Float paddingLeft;
		 ::feathers::layout::VerticalAlign verticalAlign;
		Float scrollX;
		Float set_scrollX(Float value);
		::Dynamic set_scrollX_dyn();

		Float _textMeasuredWidth;
		Float _textMeasuredHeight;
		 ::openfl::display::DisplayObject getSkinForState( ::feathers::controls::TextInputState state);
		::Dynamic getSkinForState_dyn();

		void setSkinForState( ::feathers::controls::TextInputState state, ::openfl::display::DisplayObject skin);
		::Dynamic setSkinForState_dyn();

		 ::openfl::text::TextFormat getTextFormatForState( ::feathers::controls::TextInputState state);
		::Dynamic getTextFormatForState_dyn();

		void setTextFormatForState( ::feathers::controls::TextInputState state, ::openfl::text::TextFormat textFormat);
		::Dynamic setTextFormatForState_dyn();

		void initializeTextInputTheme();
		::Dynamic initializeTextInputTheme_dyn();

		void initialize();

		void update();

		void refreshBackgroundSkin();
		::Dynamic refreshBackgroundSkin_dyn();

		 ::openfl::display::DisplayObject getCurrentBackgroundSkin();
		::Dynamic getCurrentBackgroundSkin_dyn();

		void removeCurrentBackgroundSkin( ::openfl::display::DisplayObject skin);
		::Dynamic removeCurrentBackgroundSkin_dyn();

		bool measure();
		::Dynamic measure_dyn();

		void refreshTextStyles();
		::Dynamic refreshTextStyles_dyn();

		void refreshText();
		::Dynamic refreshText_dyn();

		void refreshScrollPosition();
		::Dynamic refreshScrollPosition_dyn();

		 ::openfl::text::TextFormat getCurrentTextFormat();
		::Dynamic getCurrentTextFormat_dyn();

		void layoutContent();
		::Dynamic layoutContent_dyn();

		void layoutBackgroundSkin();
		::Dynamic layoutBackgroundSkin_dyn();

		void changeState( ::feathers::controls::TextInputState state);
		::Dynamic changeState_dyn();

		void textField_changeHandler( ::openfl::events::Event event);
		::Dynamic textField_changeHandler_dyn();

		void textField_scrollHandler( ::openfl::events::Event event);
		::Dynamic textField_scrollHandler_dyn();

		void textInput_focusInHandler( ::openfl::events::FocusEvent event);
		::Dynamic textInput_focusInHandler_dyn();

		void textField_focusInHandler( ::openfl::events::FocusEvent event);
		::Dynamic textField_focusInHandler_dyn();

		void textField_focusOutHandler( ::openfl::events::FocusEvent event);
		::Dynamic textField_focusOutHandler_dyn();

		 ::openfl::display::DisplayObject set_backgroundSkin( ::openfl::display::DisplayObject value);
		::Dynamic set_backgroundSkin_dyn();

		 ::openfl::display::DisplayObject clearStyle_backgroundSkin();
		::Dynamic clearStyle_backgroundSkin_dyn();

		 ::openfl::text::TextFormat set_textFormat( ::openfl::text::TextFormat value);
		::Dynamic set_textFormat_dyn();

		 ::openfl::text::TextFormat clearStyle_textFormat();
		::Dynamic clearStyle_textFormat_dyn();

		bool set_embedFonts(bool value);
		::Dynamic set_embedFonts_dyn();

		bool clearStyle_embedFonts();
		::Dynamic clearStyle_embedFonts_dyn();

		Float set_paddingTop(Float value);
		::Dynamic set_paddingTop_dyn();

		Float clearStyle_paddingTop();
		::Dynamic clearStyle_paddingTop_dyn();

		Float set_paddingRight(Float value);
		::Dynamic set_paddingRight_dyn();

		Float clearStyle_paddingRight();
		::Dynamic clearStyle_paddingRight_dyn();

		Float set_paddingBottom(Float value);
		::Dynamic set_paddingBottom_dyn();

		Float clearStyle_paddingBottom();
		::Dynamic clearStyle_paddingBottom_dyn();

		Float set_paddingLeft(Float value);
		::Dynamic set_paddingLeft_dyn();

		Float clearStyle_paddingLeft();
		::Dynamic clearStyle_paddingLeft_dyn();

		 ::feathers::layout::VerticalAlign set_verticalAlign( ::feathers::layout::VerticalAlign value);
		::Dynamic set_verticalAlign_dyn();

		 ::feathers::layout::VerticalAlign clearStyle_verticalAlign();
		::Dynamic clearStyle_verticalAlign_dyn();

		::hx::Class get_styleContext();

};

} // end namespace feathers
} // end namespace controls

#endif /* INCLUDED_feathers_controls_TextInput */ 
