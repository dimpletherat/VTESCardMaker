// Generated by Haxe 4.1.0
#ifndef INCLUDED_feathers_core_InvalidationFlag
#define INCLUDED_feathers_core_InvalidationFlag

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(feathers,core,InvalidationFlag)

namespace feathers{
namespace core{


class HXCPP_CLASS_ATTRIBUTES InvalidationFlag_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef InvalidationFlag_obj OBJ_;
		InvalidationFlag_obj();

	public:
		enum { _hx_ClassId = 0x2b006461 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="feathers.core.InvalidationFlag")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"feathers.core.InvalidationFlag"); }

		inline static ::hx::ObjectPtr< InvalidationFlag_obj > __new() {
			::hx::ObjectPtr< InvalidationFlag_obj > __this = new InvalidationFlag_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< InvalidationFlag_obj > __alloc(::hx::Ctx *_hx_ctx) {
			InvalidationFlag_obj *__this = (InvalidationFlag_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(InvalidationFlag_obj), false, "feathers.core.InvalidationFlag"));
			*(void **)__this = InvalidationFlag_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~InvalidationFlag_obj();

		HX_DO_RTTI_ALL;
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("InvalidationFlag",4a,b3,ab,7c); }

		static void __boot();
		static ::String STATE;
		static ::String SIZE;
		static ::String STYLES;
		static ::String SKIN;
		static ::String LAYOUT;
		static ::String DATA;
		static ::String SCROLL;
		static ::String SELECTION;
		static ::String FOCUS;
};

} // end namespace feathers
} // end namespace core

#endif /* INCLUDED_feathers_core_InvalidationFlag */ 
