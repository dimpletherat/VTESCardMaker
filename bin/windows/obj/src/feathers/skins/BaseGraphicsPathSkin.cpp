// Generated by Haxe 4.1.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_feathers_controls_IToggle
#include <feathers/controls/IToggle.h>
#endif
#ifndef INCLUDED_feathers_core_IDisplayObject
#include <feathers/core/IDisplayObject.h>
#endif
#ifndef INCLUDED_feathers_core_IMeasureObject
#include <feathers/core/IMeasureObject.h>
#endif
#ifndef INCLUDED_feathers_core_IStateContext
#include <feathers/core/IStateContext.h>
#endif
#ifndef INCLUDED_feathers_core_IStateObserver
#include <feathers/core/IStateObserver.h>
#endif
#ifndef INCLUDED_feathers_core_IUIControl
#include <feathers/core/IUIControl.h>
#endif
#ifndef INCLUDED_feathers_core_IValidating
#include <feathers/core/IValidating.h>
#endif
#ifndef INCLUDED_feathers_core_MeasureSprite
#include <feathers/core/MeasureSprite.h>
#endif
#ifndef INCLUDED_feathers_core_ValidatingSprite
#include <feathers/core/ValidatingSprite.h>
#endif
#ifndef INCLUDED_feathers_events_FeathersEvent
#include <feathers/events/FeathersEvent.h>
#endif
#ifndef INCLUDED_feathers_graphics_FillStyle
#include <feathers/graphics/FillStyle.h>
#endif
#ifndef INCLUDED_feathers_graphics_LineStyle
#include <feathers/graphics/LineStyle.h>
#endif
#ifndef INCLUDED_feathers_skins_BaseGraphicsPathSkin
#include <feathers/skins/BaseGraphicsPathSkin.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <haxe/ds/EnumValueMap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fc1a4e1b068e0ca2_32_new,"feathers.skins.BaseGraphicsPathSkin","new",0xdcb096c6,"feathers.skins.BaseGraphicsPathSkin.new","feathers/skins/BaseGraphicsPathSkin.hx",32,0xa15604e8)
HX_LOCAL_STACK_FRAME(_hx_pos_fc1a4e1b068e0ca2_51_set_stateContext,"feathers.skins.BaseGraphicsPathSkin","set_stateContext",0x6ba127b5,"feathers.skins.BaseGraphicsPathSkin.set_stateContext","feathers/skins/BaseGraphicsPathSkin.hx",51,0xa15604e8)
HX_LOCAL_STACK_FRAME(_hx_pos_fc1a4e1b068e0ca2_82_set_fill,"feathers.skins.BaseGraphicsPathSkin","set_fill",0xb9d02b5a,"feathers.skins.BaseGraphicsPathSkin.set_fill","feathers/skins/BaseGraphicsPathSkin.hx",82,0xa15604e8)
HX_LOCAL_STACK_FRAME(_hx_pos_fc1a4e1b068e0ca2_102_set_disabledFill,"feathers.skins.BaseGraphicsPathSkin","set_disabledFill",0x028d35f6,"feathers.skins.BaseGraphicsPathSkin.set_disabledFill","feathers/skins/BaseGraphicsPathSkin.hx",102,0xa15604e8)
HX_LOCAL_STACK_FRAME(_hx_pos_fc1a4e1b068e0ca2_121_set_selectedFill,"feathers.skins.BaseGraphicsPathSkin","set_selectedFill",0x68e57a55,"feathers.skins.BaseGraphicsPathSkin.set_selectedFill","feathers/skins/BaseGraphicsPathSkin.hx",121,0xa15604e8)
HX_LOCAL_STACK_FRAME(_hx_pos_fc1a4e1b068e0ca2_139_set_border,"feathers.skins.BaseGraphicsPathSkin","set_border",0xcda0cd83,"feathers.skins.BaseGraphicsPathSkin.set_border","feathers/skins/BaseGraphicsPathSkin.hx",139,0xa15604e8)
HX_LOCAL_STACK_FRAME(_hx_pos_fc1a4e1b068e0ca2_159_set_disabledBorder,"feathers.skins.BaseGraphicsPathSkin","set_disabledBorder",0x87aab71f,"feathers.skins.BaseGraphicsPathSkin.set_disabledBorder","feathers/skins/BaseGraphicsPathSkin.hx",159,0xa15604e8)
HX_LOCAL_STACK_FRAME(_hx_pos_fc1a4e1b068e0ca2_178_set_selectedBorder,"feathers.skins.BaseGraphicsPathSkin","set_selectedBorder",0x67e4113e,"feathers.skins.BaseGraphicsPathSkin.set_selectedBorder","feathers/skins/BaseGraphicsPathSkin.hx",178,0xa15604e8)
HX_LOCAL_STACK_FRAME(_hx_pos_fc1a4e1b068e0ca2_199_getFillForState,"feathers.skins.BaseGraphicsPathSkin","getFillForState",0x474e6107,"feathers.skins.BaseGraphicsPathSkin.getFillForState","feathers/skins/BaseGraphicsPathSkin.hx",199,0xa15604e8)
HX_LOCAL_STACK_FRAME(_hx_pos_fc1a4e1b068e0ca2_221_setFillForState,"feathers.skins.BaseGraphicsPathSkin","setFillForState",0x4319de13,"feathers.skins.BaseGraphicsPathSkin.setFillForState","feathers/skins/BaseGraphicsPathSkin.hx",221,0xa15604e8)
HX_LOCAL_STACK_FRAME(_hx_pos_fc1a4e1b068e0ca2_244_getBorderForState,"feathers.skins.BaseGraphicsPathSkin","getBorderForState",0x38f56f70,"feathers.skins.BaseGraphicsPathSkin.getBorderForState","feathers/skins/BaseGraphicsPathSkin.hx",244,0xa15604e8)
HX_LOCAL_STACK_FRAME(_hx_pos_fc1a4e1b068e0ca2_266_setBorderForState,"feathers.skins.BaseGraphicsPathSkin","setBorderForState",0x5c63477c,"feathers.skins.BaseGraphicsPathSkin.setBorderForState","feathers/skins/BaseGraphicsPathSkin.hx",266,0xa15604e8)
HX_LOCAL_STACK_FRAME(_hx_pos_fc1a4e1b068e0ca2_277_update,"feathers.skins.BaseGraphicsPathSkin","update",0xefd44363,"feathers.skins.BaseGraphicsPathSkin.update","feathers/skins/BaseGraphicsPathSkin.hx",277,0xa15604e8)
HX_LOCAL_STACK_FRAME(_hx_pos_fc1a4e1b068e0ca2_284_draw,"feathers.skins.BaseGraphicsPathSkin","draw",0x3740fede,"feathers.skins.BaseGraphicsPathSkin.draw","feathers/skins/BaseGraphicsPathSkin.hx",284,0xa15604e8)
HX_LOCAL_STACK_FRAME(_hx_pos_fc1a4e1b068e0ca2_300_drawPath,"feathers.skins.BaseGraphicsPathSkin","drawPath",0xa6b7d7a3,"feathers.skins.BaseGraphicsPathSkin.drawPath","feathers/skins/BaseGraphicsPathSkin.hx",300,0xa15604e8)
HX_LOCAL_STACK_FRAME(_hx_pos_fc1a4e1b068e0ca2_302_applyLineStyle,"feathers.skins.BaseGraphicsPathSkin","applyLineStyle",0x03c98ca9,"feathers.skins.BaseGraphicsPathSkin.applyLineStyle","feathers/skins/BaseGraphicsPathSkin.hx",302,0xa15604e8)
HX_LOCAL_STACK_FRAME(_hx_pos_fc1a4e1b068e0ca2_348_applyFillStyle,"feathers.skins.BaseGraphicsPathSkin","applyFillStyle",0x8b75afba,"feathers.skins.BaseGraphicsPathSkin.applyFillStyle","feathers/skins/BaseGraphicsPathSkin.hx",348,0xa15604e8)
HX_LOCAL_STACK_FRAME(_hx_pos_fc1a4e1b068e0ca2_391_getLineThickness,"feathers.skins.BaseGraphicsPathSkin","getLineThickness",0x41b57644,"feathers.skins.BaseGraphicsPathSkin.getLineThickness","feathers/skins/BaseGraphicsPathSkin.hx",391,0xa15604e8)
HX_LOCAL_STACK_FRAME(_hx_pos_fc1a4e1b068e0ca2_411_getGradientMatrix,"feathers.skins.BaseGraphicsPathSkin","getGradientMatrix",0xc90c946d,"feathers.skins.BaseGraphicsPathSkin.getGradientMatrix","feathers/skins/BaseGraphicsPathSkin.hx",411,0xa15604e8)
HX_LOCAL_STACK_FRAME(_hx_pos_fc1a4e1b068e0ca2_428_getCurrentBorder,"feathers.skins.BaseGraphicsPathSkin","getCurrentBorder",0xeb462969,"feathers.skins.BaseGraphicsPathSkin.getCurrentBorder","feathers/skins/BaseGraphicsPathSkin.hx",428,0xa15604e8)
HX_LOCAL_STACK_FRAME(_hx_pos_fc1a4e1b068e0ca2_435_getCurrentBorderWithoutCache,"feathers.skins.BaseGraphicsPathSkin","getCurrentBorderWithoutCache",0x374301e3,"feathers.skins.BaseGraphicsPathSkin.getCurrentBorderWithoutCache","feathers/skins/BaseGraphicsPathSkin.hx",435,0xa15604e8)
HX_LOCAL_STACK_FRAME(_hx_pos_fc1a4e1b068e0ca2_471_getCurrentFill,"feathers.skins.BaseGraphicsPathSkin","getCurrentFill",0x4e1ea1c0,"feathers.skins.BaseGraphicsPathSkin.getCurrentFill","feathers/skins/BaseGraphicsPathSkin.hx",471,0xa15604e8)
HX_LOCAL_STACK_FRAME(_hx_pos_fc1a4e1b068e0ca2_478_getCurrentFillWithoutCache,"feathers.skins.BaseGraphicsPathSkin","getCurrentFillWithoutCache",0x6d5a20ba,"feathers.skins.BaseGraphicsPathSkin.getCurrentFillWithoutCache","feathers/skins/BaseGraphicsPathSkin.hx",478,0xa15604e8)
HX_LOCAL_STACK_FRAME(_hx_pos_fc1a4e1b068e0ca2_513_needsStateUpdate,"feathers.skins.BaseGraphicsPathSkin","needsStateUpdate",0x13f8f877,"feathers.skins.BaseGraphicsPathSkin.needsStateUpdate","feathers/skins/BaseGraphicsPathSkin.hx",513,0xa15604e8)
HX_LOCAL_STACK_FRAME(_hx_pos_fc1a4e1b068e0ca2_526_checkForStateChange,"feathers.skins.BaseGraphicsPathSkin","checkForStateChange",0x50dc5726,"feathers.skins.BaseGraphicsPathSkin.checkForStateChange","feathers/skins/BaseGraphicsPathSkin.hx",526,0xa15604e8)
HX_LOCAL_STACK_FRAME(_hx_pos_fc1a4e1b068e0ca2_534_stateContext_stateChangeHandler,"feathers.skins.BaseGraphicsPathSkin","stateContext_stateChangeHandler",0x297ff5d0,"feathers.skins.BaseGraphicsPathSkin.stateContext_stateChangeHandler","feathers/skins/BaseGraphicsPathSkin.hx",534,0xa15604e8)
HX_LOCAL_STACK_FRAME(_hx_pos_fc1a4e1b068e0ca2_538_stateContextToggle_changeHandler,"feathers.skins.BaseGraphicsPathSkin","stateContextToggle_changeHandler",0xa1598fe7,"feathers.skins.BaseGraphicsPathSkin.stateContextToggle_changeHandler","feathers/skins/BaseGraphicsPathSkin.hx",538,0xa15604e8)
namespace feathers{
namespace skins{

void BaseGraphicsPathSkin_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_fc1a4e1b068e0ca2_32_new)
HXLINE( 119)		this->selectedFill = null();
HXLINE( 100)		this->disabledFill = null();
HXLINE(  80)		this->fill = ::feathers::graphics::FillStyle_obj::SolidColor(13421772,null());
HXLINE(  41)		this->_previousFill = null();
HXLINE(  40)		this->_previousBorder = null();
HXLINE(  34)		super::__construct();
HXLINE(  35)		this->mouseChildren = false;
HXLINE(  36)		this->set_tabEnabled(false);
HXLINE(  37)		this->set_tabChildren(false);
            	}

Dynamic BaseGraphicsPathSkin_obj::__CreateEmpty() { return new BaseGraphicsPathSkin_obj; }

void *BaseGraphicsPathSkin_obj::_hx_vtable = 0;

Dynamic BaseGraphicsPathSkin_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BaseGraphicsPathSkin_obj > _hx_result = new BaseGraphicsPathSkin_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BaseGraphicsPathSkin_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x093ab78b) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x093ab78b;
			}
		} else {
			return inClassId==(int)0x0c89e854 || inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x58123034) {
			if (inClassId<=(int)0x4af7dd8e) {
				return inClassId==(int)0x33776324 || inClassId==(int)0x4af7dd8e;
			} else {
				return inClassId==(int)0x58123034;
			}
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

static ::feathers::core::IStateObserver_obj _hx_feathers_skins_BaseGraphicsPathSkin__hx_feathers_core_IStateObserver= {
	( ::Dynamic (::hx::Object::*)(::Dynamic))&::feathers::skins::BaseGraphicsPathSkin_obj::set_stateContext,
};

void *BaseGraphicsPathSkin_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xb36ec70d: return &_hx_feathers_skins_BaseGraphicsPathSkin__hx_feathers_core_IStateObserver;
	}
	return super::_hx_getInterface(inHash);
}

::Dynamic BaseGraphicsPathSkin_obj::set_stateContext(::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_fc1a4e1b068e0ca2_51_set_stateContext)
HXLINE(  52)		if (::hx::IsEq( this->stateContext,value )) {
HXLINE(  53)			return this->stateContext;
            		}
HXLINE(  55)		if (::hx::IsNotNull( this->stateContext )) {
HXLINE(  56)			::openfl::events::IEventDispatcher_obj::removeEventListener(this->stateContext,HX_("stateChange",61,de,fb,31),this->stateContext_stateChangeHandler_dyn(),null());
HXLINE(  57)			if (::Std_obj::isOfType(this->stateContext,( ( ::Dynamic)(::hx::ClassOf< ::feathers::controls::IToggle >()) ))) {
HXLINE(  58)				::openfl::events::IEventDispatcher_obj::removeEventListener(this->stateContext,HX_("change",70,91,72,b7),this->stateContextToggle_changeHandler_dyn(),null());
            			}
            		}
HXLINE(  61)		this->stateContext = value;
HXLINE(  62)		if (::hx::IsNotNull( this->stateContext )) {
HXLINE(  63)			::openfl::events::IEventDispatcher_obj::addEventListener(this->stateContext,HX_("stateChange",61,de,fb,31),this->stateContext_stateChangeHandler_dyn(),false,0,true);
HXLINE(  64)			if (::Std_obj::isOfType(this->stateContext,( ( ::Dynamic)(::hx::ClassOf< ::feathers::controls::IToggle >()) ))) {
HXLINE(  65)				::openfl::events::IEventDispatcher_obj::addEventListener(this->stateContext,HX_("change",70,91,72,b7),this->stateContextToggle_changeHandler_dyn(),null(),null(),null());
            			}
            		}
HXLINE(  68)		this->setInvalid(HX_("data",2a,56,63,42));
HXLINE(  69)		return this->stateContext;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseGraphicsPathSkin_obj,set_stateContext,return )

 ::feathers::graphics::FillStyle BaseGraphicsPathSkin_obj::set_fill( ::feathers::graphics::FillStyle value){
            	HX_STACKFRAME(&_hx_pos_fc1a4e1b068e0ca2_82_set_fill)
HXLINE(  83)		if (::hx::IsEq( this->fill,value )) {
HXLINE(  84)			return this->fill;
            		}
HXLINE(  86)		this->fill = value;
HXLINE(  87)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  88)		return this->fill;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseGraphicsPathSkin_obj,set_fill,return )

 ::feathers::graphics::FillStyle BaseGraphicsPathSkin_obj::set_disabledFill( ::feathers::graphics::FillStyle value){
            	HX_STACKFRAME(&_hx_pos_fc1a4e1b068e0ca2_102_set_disabledFill)
HXLINE( 103)		if (::hx::IsEq( this->disabledFill,value )) {
HXLINE( 104)			return this->disabledFill;
            		}
HXLINE( 106)		this->disabledFill = value;
HXLINE( 107)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE( 108)		return this->disabledFill;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseGraphicsPathSkin_obj,set_disabledFill,return )

 ::feathers::graphics::FillStyle BaseGraphicsPathSkin_obj::set_selectedFill( ::feathers::graphics::FillStyle value){
            	HX_STACKFRAME(&_hx_pos_fc1a4e1b068e0ca2_121_set_selectedFill)
HXLINE( 122)		if (::hx::IsEq( this->selectedFill,value )) {
HXLINE( 123)			return this->selectedFill;
            		}
HXLINE( 125)		this->selectedFill = value;
HXLINE( 126)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE( 127)		return this->selectedFill;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseGraphicsPathSkin_obj,set_selectedFill,return )

 ::feathers::graphics::LineStyle BaseGraphicsPathSkin_obj::set_border( ::feathers::graphics::LineStyle value){
            	HX_STACKFRAME(&_hx_pos_fc1a4e1b068e0ca2_139_set_border)
HXLINE( 140)		if (::hx::IsEq( this->border,value )) {
HXLINE( 141)			return this->border;
            		}
HXLINE( 143)		this->border = value;
HXLINE( 144)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE( 145)		return this->border;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseGraphicsPathSkin_obj,set_border,return )

 ::feathers::graphics::LineStyle BaseGraphicsPathSkin_obj::set_disabledBorder( ::feathers::graphics::LineStyle value){
            	HX_STACKFRAME(&_hx_pos_fc1a4e1b068e0ca2_159_set_disabledBorder)
HXLINE( 160)		if (::hx::IsEq( this->disabledBorder,value )) {
HXLINE( 161)			return this->disabledBorder;
            		}
HXLINE( 163)		this->disabledBorder = value;
HXLINE( 164)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE( 165)		return this->disabledBorder;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseGraphicsPathSkin_obj,set_disabledBorder,return )

 ::feathers::graphics::LineStyle BaseGraphicsPathSkin_obj::set_selectedBorder( ::feathers::graphics::LineStyle value){
            	HX_STACKFRAME(&_hx_pos_fc1a4e1b068e0ca2_178_set_selectedBorder)
HXLINE( 179)		if (::hx::IsEq( this->selectedBorder,value )) {
HXLINE( 180)			return this->selectedBorder;
            		}
HXLINE( 182)		this->selectedBorder = value;
HXLINE( 183)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE( 184)		return this->selectedBorder;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseGraphicsPathSkin_obj,set_selectedBorder,return )

 ::feathers::graphics::FillStyle BaseGraphicsPathSkin_obj::getFillForState( ::Dynamic state){
            	HX_STACKFRAME(&_hx_pos_fc1a4e1b068e0ca2_199_getFillForState)
HXLINE( 200)		if (::hx::IsNull( this->_stateToFill )) {
HXLINE( 201)			return null();
            		}
HXLINE( 203)		return this->_stateToFill->get(state).StaticCast<  ::feathers::graphics::FillStyle >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseGraphicsPathSkin_obj,getFillForState,return )

void BaseGraphicsPathSkin_obj::setFillForState( ::Dynamic state, ::feathers::graphics::FillStyle fill){
            	HX_GC_STACKFRAME(&_hx_pos_fc1a4e1b068e0ca2_221_setFillForState)
HXLINE( 222)		if (::hx::IsNull( this->_stateToFill )) {
HXLINE( 223)			this->_stateToFill =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
            		}
HXLINE( 225)		if (::hx::IsEq( this->_stateToFill->get(state).StaticCast<  ::feathers::graphics::FillStyle >(),fill )) {
HXLINE( 226)			return;
            		}
HXLINE( 228)		this->_stateToFill->set(state,fill);
HXLINE( 229)		this->setInvalid(HX_("styles",22,e6,d2,15));
            	}


HX_DEFINE_DYNAMIC_FUNC2(BaseGraphicsPathSkin_obj,setFillForState,(void))

 ::feathers::graphics::LineStyle BaseGraphicsPathSkin_obj::getBorderForState( ::Dynamic state){
            	HX_STACKFRAME(&_hx_pos_fc1a4e1b068e0ca2_244_getBorderForState)
HXLINE( 245)		if (::hx::IsNull( this->_stateToBorder )) {
HXLINE( 246)			return null();
            		}
HXLINE( 248)		return this->_stateToBorder->get(state).StaticCast<  ::feathers::graphics::LineStyle >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseGraphicsPathSkin_obj,getBorderForState,return )

void BaseGraphicsPathSkin_obj::setBorderForState( ::Dynamic state, ::feathers::graphics::LineStyle border){
            	HX_GC_STACKFRAME(&_hx_pos_fc1a4e1b068e0ca2_266_setBorderForState)
HXLINE( 267)		if (::hx::IsNull( this->_stateToBorder )) {
HXLINE( 268)			this->_stateToBorder =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
            		}
HXLINE( 270)		if (::hx::IsEq( this->_stateToBorder->get(state).StaticCast<  ::feathers::graphics::LineStyle >(),border )) {
HXLINE( 271)			return;
            		}
HXLINE( 273)		this->_stateToBorder->set(state,border);
HXLINE( 274)		this->setInvalid(HX_("styles",22,e6,d2,15));
            	}


HX_DEFINE_DYNAMIC_FUNC2(BaseGraphicsPathSkin_obj,setBorderForState,(void))

void BaseGraphicsPathSkin_obj::update(){
            	HX_STACKFRAME(&_hx_pos_fc1a4e1b068e0ca2_277_update)
HXLINE( 278)		this->_previousBorder = this->getCurrentBorder();
HXLINE( 279)		this->_previousFill = this->getCurrentFill();
HXLINE( 280)		this->get_graphics()->clear();
HXLINE( 281)		this->draw();
            	}


void BaseGraphicsPathSkin_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_fc1a4e1b068e0ca2_284_draw)
HXLINE( 285)		this->applyLineStyle(this->getCurrentBorder());
HXLINE( 286)		 ::feathers::graphics::FillStyle currentFill = this->getCurrentFill();
HXLINE( 287)		this->applyFillStyle(currentFill);
HXLINE( 288)		this->drawPath();
HXLINE( 289)		if (::hx::IsNotNull( currentFill )) {
HXLINE( 290)			this->get_graphics()->endFill();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseGraphicsPathSkin_obj,draw,(void))

void BaseGraphicsPathSkin_obj::drawPath(){
            	HX_STACKFRAME(&_hx_pos_fc1a4e1b068e0ca2_300_drawPath)
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseGraphicsPathSkin_obj,drawPath,(void))

void BaseGraphicsPathSkin_obj::applyLineStyle( ::feathers::graphics::LineStyle lineStyle){
            	HX_STACKFRAME(&_hx_pos_fc1a4e1b068e0ca2_302_applyLineStyle)
HXLINE( 303)		if (::hx::IsNull( lineStyle )) {
HXLINE( 304)			return;
            		}
HXLINE( 306)		switch((int)(lineStyle->_hx_getIndex())){
            			case (int)0: {
HXLINE( 307)				 ::Dynamic miterLimit = lineStyle->_hx_getObject(7);
HXDLIN( 307)				 ::Dynamic joints = lineStyle->_hx_getObject(6);
HXDLIN( 307)				 ::Dynamic caps = lineStyle->_hx_getObject(5);
HXDLIN( 307)				 ::Dynamic scaleMode = lineStyle->_hx_getObject(4);
HXDLIN( 307)				 ::Dynamic pixelHinting = lineStyle->_hx_getObject(3);
HXDLIN( 307)				 ::Dynamic alpha = lineStyle->_hx_getObject(2);
HXDLIN( 307)				 ::Dynamic color = lineStyle->_hx_getObject(1);
HXDLIN( 307)				 ::Dynamic thickness = lineStyle->_hx_getObject(0);
HXLINE( 308)				{
HXLINE( 309)					if (::hx::IsNull( color )) {
HXLINE( 310)						color = 0;
            					}
HXLINE( 312)					if (::hx::IsNull( alpha )) {
HXLINE( 313)						alpha = ((Float)1.0);
            					}
HXLINE( 315)					if (::hx::IsNull( pixelHinting )) {
HXLINE( 316)						pixelHinting = false;
            					}
HXLINE( 318)					if (::hx::IsNull( scaleMode )) {
HXLINE( 319)						scaleMode = 2;
            					}
HXLINE( 321)					if (::hx::IsNull( miterLimit )) {
HXLINE( 322)						miterLimit = ((Float)3.0);
            					}
HXLINE( 324)					this->get_graphics()->lineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit);
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 326)				 ::Dynamic focalPointRatio = lineStyle->_hx_getObject(8);
HXDLIN( 326)				 ::Dynamic interpolationMethod = lineStyle->_hx_getObject(7);
HXDLIN( 326)				 ::Dynamic spreadMethod = lineStyle->_hx_getObject(6);
HXDLIN( 326)				 ::Dynamic radians = lineStyle->_hx_getObject(5);
HXDLIN( 326)				::Array< int > ratios = lineStyle->_hx_getObject(4).StaticCast< ::Array< int > >();
HXDLIN( 326)				::Array< Float > alphas = lineStyle->_hx_getObject(3).StaticCast< ::Array< Float > >();
HXDLIN( 326)				::Array< int > colors = lineStyle->_hx_getObject(2).StaticCast< ::Array< int > >();
HXDLIN( 326)				 ::Dynamic type = lineStyle->_hx_getObject(1);
HXDLIN( 326)				Float thickness = lineStyle->_hx_getFloat(0);
HXLINE( 327)				{
HXLINE( 328)					if (::hx::IsNull( radians )) {
HXLINE( 329)						radians = ((Float)0.0);
            					}
HXLINE( 331)					if (::hx::IsNull( spreadMethod )) {
HXLINE( 332)						spreadMethod = 0;
            					}
HXLINE( 334)					if (::hx::IsNull( interpolationMethod )) {
HXLINE( 335)						interpolationMethod = 1;
            					}
HXLINE( 337)					if (::hx::IsNull( focalPointRatio )) {
HXLINE( 338)						focalPointRatio = ((Float)0.0);
            					}
HXLINE( 340)					 ::openfl::geom::Matrix matrix = this->getGradientMatrix(( (Float)(radians) ));
HXLINE( 341)					this->get_graphics()->lineStyle(thickness,null(),null(),null(),null(),null(),null(),null());
HXLINE( 342)					this->get_graphics()->lineGradientStyle(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
            				}
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseGraphicsPathSkin_obj,applyLineStyle,(void))

void BaseGraphicsPathSkin_obj::applyFillStyle( ::feathers::graphics::FillStyle fillStyle){
            	HX_STACKFRAME(&_hx_pos_fc1a4e1b068e0ca2_348_applyFillStyle)
HXLINE( 349)		if (::hx::IsNull( fillStyle )) {
HXLINE( 350)			return;
            		}
HXLINE( 352)		switch((int)(fillStyle->_hx_getIndex())){
            			case (int)0: {
HXLINE( 353)				 ::Dynamic alpha = fillStyle->_hx_getObject(1);
HXDLIN( 353)				int color = fillStyle->_hx_getInt(0);
HXLINE( 354)				{
HXLINE( 355)					if (::hx::IsNull( alpha )) {
HXLINE( 356)						alpha = ((Float)1.0);
            					}
HXLINE( 358)					this->get_graphics()->beginFill(color,alpha);
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 378)				 ::Dynamic smooth = fillStyle->_hx_getObject(3);
HXDLIN( 378)				 ::Dynamic repeat = fillStyle->_hx_getObject(2);
HXDLIN( 378)				 ::openfl::geom::Matrix matrix = fillStyle->_hx_getObject(1).StaticCast<  ::openfl::geom::Matrix >();
HXDLIN( 378)				 ::openfl::display::BitmapData bitmapData = fillStyle->_hx_getObject(0).StaticCast<  ::openfl::display::BitmapData >();
HXLINE( 379)				{
HXLINE( 380)					if (::hx::IsNull( repeat )) {
HXLINE( 381)						repeat = true;
            					}
HXLINE( 383)					if (::hx::IsNull( smooth )) {
HXLINE( 384)						smooth = false;
            					}
HXLINE( 386)					this->get_graphics()->beginBitmapFill(bitmapData,matrix,repeat,smooth);
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 360)				 ::Dynamic focalPointRatio = fillStyle->_hx_getObject(7);
HXDLIN( 360)				 ::Dynamic interpolationMethod = fillStyle->_hx_getObject(6);
HXDLIN( 360)				 ::Dynamic spreadMethod = fillStyle->_hx_getObject(5);
HXDLIN( 360)				 ::Dynamic radians = fillStyle->_hx_getObject(4);
HXDLIN( 360)				::Array< int > ratios = fillStyle->_hx_getObject(3).StaticCast< ::Array< int > >();
HXDLIN( 360)				::Array< Float > alphas = fillStyle->_hx_getObject(2).StaticCast< ::Array< Float > >();
HXDLIN( 360)				::Array< int > colors = fillStyle->_hx_getObject(1).StaticCast< ::Array< int > >();
HXDLIN( 360)				 ::Dynamic type = fillStyle->_hx_getObject(0);
HXLINE( 361)				{
HXLINE( 362)					if (::hx::IsNull( radians )) {
HXLINE( 363)						radians = ((Float)0.0);
            					}
HXLINE( 365)					if (::hx::IsNull( spreadMethod )) {
HXLINE( 366)						spreadMethod = 0;
            					}
HXLINE( 368)					if (::hx::IsNull( interpolationMethod )) {
HXLINE( 369)						interpolationMethod = 1;
            					}
HXLINE( 371)					if (::hx::IsNull( focalPointRatio )) {
HXLINE( 372)						focalPointRatio = ((Float)0.0);
            					}
HXLINE( 374)					 ::openfl::geom::Matrix matrix = this->getGradientMatrix(( (Float)(radians) ));
HXLINE( 375)					this->get_graphics()->beginGradientFill(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
            				}
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseGraphicsPathSkin_obj,applyFillStyle,(void))

Float BaseGraphicsPathSkin_obj::getLineThickness( ::feathers::graphics::LineStyle lineStyle){
            	HX_STACKFRAME(&_hx_pos_fc1a4e1b068e0ca2_391_getLineThickness)
HXLINE( 392)		if (::hx::IsNull( lineStyle )) {
HXLINE( 393)			return ( (Float)(0) );
            		}
HXLINE( 395)		switch((int)(lineStyle->_hx_getIndex())){
            			case (int)0: {
HXLINE( 396)				 ::Dynamic _g = lineStyle->_hx_getObject(7);
HXDLIN( 396)				 ::Dynamic _g1 = lineStyle->_hx_getObject(6);
HXDLIN( 396)				 ::Dynamic _g2 = lineStyle->_hx_getObject(5);
HXDLIN( 396)				 ::Dynamic _g3 = lineStyle->_hx_getObject(4);
HXDLIN( 396)				 ::Dynamic _g4 = lineStyle->_hx_getObject(3);
HXDLIN( 396)				 ::Dynamic _g5 = lineStyle->_hx_getObject(2);
HXDLIN( 396)				 ::Dynamic _g6 = lineStyle->_hx_getObject(1);
HXDLIN( 396)				 ::Dynamic thickness = lineStyle->_hx_getObject(0);
HXLINE( 398)				return ( (Float)(thickness) );
            			}
            			break;
            			case (int)1: {
HXLINE( 400)				 ::Dynamic _g = lineStyle->_hx_getObject(8);
HXDLIN( 400)				 ::Dynamic _g1 = lineStyle->_hx_getObject(7);
HXDLIN( 400)				 ::Dynamic _g2 = lineStyle->_hx_getObject(6);
HXDLIN( 400)				 ::Dynamic _g3 = lineStyle->_hx_getObject(5);
HXDLIN( 400)				::Array< int > radians = lineStyle->_hx_getObject(4).StaticCast< ::Array< int > >();
HXDLIN( 400)				::Array< Float > ratios = lineStyle->_hx_getObject(3).StaticCast< ::Array< Float > >();
HXDLIN( 400)				::Array< int > alphas = lineStyle->_hx_getObject(2).StaticCast< ::Array< int > >();
HXDLIN( 400)				 ::Dynamic colors = lineStyle->_hx_getObject(1);
HXDLIN( 400)				Float thickness = lineStyle->_hx_getFloat(0);
HXLINE( 402)				return thickness;
            			}
            			break;
            		}
HXLINE( 395)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseGraphicsPathSkin_obj,getLineThickness,return )

 ::openfl::geom::Matrix BaseGraphicsPathSkin_obj::getGradientMatrix(Float radians){
            	HX_GC_STACKFRAME(&_hx_pos_fc1a4e1b068e0ca2_411_getGradientMatrix)
HXLINE( 412)		 ::openfl::geom::Matrix matrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 413)		matrix->createGradientBox(this->actualWidth,this->actualHeight,radians,null(),null());
HXLINE( 414)		return matrix;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseGraphicsPathSkin_obj,getGradientMatrix,return )

 ::feathers::graphics::LineStyle BaseGraphicsPathSkin_obj::getCurrentBorder(){
            	HX_STACKFRAME(&_hx_pos_fc1a4e1b068e0ca2_428_getCurrentBorder)
HXLINE( 429)		if (::hx::IsNotNull( this->_previousBorder )) {
HXLINE( 430)			return this->_previousBorder;
            		}
HXLINE( 432)		return this->getCurrentBorderWithoutCache();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseGraphicsPathSkin_obj,getCurrentBorder,return )

 ::feathers::graphics::LineStyle BaseGraphicsPathSkin_obj::getCurrentBorderWithoutCache(){
            	HX_STACKFRAME(&_hx_pos_fc1a4e1b068e0ca2_435_getCurrentBorderWithoutCache)
HXLINE( 436)		if (::hx::IsNull( this->stateContext )) {
HXLINE( 437)			return this->border;
            		}
HXLINE( 439)		if (::hx::IsNotNull( this->_stateToBorder )) {
HXLINE( 440)			::Dynamic this1 = this->_stateToBorder;
HXDLIN( 440)			 ::feathers::graphics::LineStyle result = ( ( ::haxe::ds::EnumValueMap)(this1) )->get(::feathers::core::IStateContext_obj::get_currentState(this->stateContext)).StaticCast<  ::feathers::graphics::LineStyle >();
HXLINE( 441)			if (::hx::IsNotNull( result )) {
HXLINE( 442)				return result;
            			}
            		}
HXLINE( 445)		bool _hx_tmp;
HXDLIN( 445)		if (::hx::IsNotNull( this->disabledBorder )) {
HXLINE( 445)			_hx_tmp = ::Std_obj::isOfType(this->stateContext,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IUIControl >()) ));
            		}
            		else {
HXLINE( 445)			_hx_tmp = false;
            		}
HXDLIN( 445)		if (_hx_tmp) {
HXLINE( 446)			::Dynamic control = this->stateContext;
HXLINE( 447)			if (!(::feathers::core::IUIControl_obj::get_enabled(control))) {
HXLINE( 448)				return this->disabledBorder;
            			}
            		}
HXLINE( 451)		bool _hx_tmp1;
HXDLIN( 451)		if (::hx::IsNotNull( this->selectedBorder )) {
HXLINE( 451)			_hx_tmp1 = ::Std_obj::isOfType(this->stateContext,( ( ::Dynamic)(::hx::ClassOf< ::feathers::controls::IToggle >()) ));
            		}
            		else {
HXLINE( 451)			_hx_tmp1 = false;
            		}
HXDLIN( 451)		if (_hx_tmp1) {
HXLINE( 452)			::Dynamic toggle = this->stateContext;
HXLINE( 453)			if (::feathers::controls::IToggle_obj::get_selected(toggle)) {
HXLINE( 454)				return this->selectedBorder;
            			}
            		}
HXLINE( 457)		return this->border;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseGraphicsPathSkin_obj,getCurrentBorderWithoutCache,return )

 ::feathers::graphics::FillStyle BaseGraphicsPathSkin_obj::getCurrentFill(){
            	HX_STACKFRAME(&_hx_pos_fc1a4e1b068e0ca2_471_getCurrentFill)
HXLINE( 472)		if (::hx::IsNotNull( this->_previousFill )) {
HXLINE( 473)			return this->_previousFill;
            		}
HXLINE( 475)		return this->getCurrentFillWithoutCache();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseGraphicsPathSkin_obj,getCurrentFill,return )

 ::feathers::graphics::FillStyle BaseGraphicsPathSkin_obj::getCurrentFillWithoutCache(){
            	HX_STACKFRAME(&_hx_pos_fc1a4e1b068e0ca2_478_getCurrentFillWithoutCache)
HXLINE( 479)		if (::hx::IsNull( this->stateContext )) {
HXLINE( 480)			return this->fill;
            		}
HXLINE( 482)		if (::hx::IsNotNull( this->_stateToFill )) {
HXLINE( 483)			::Dynamic this1 = this->_stateToFill;
HXDLIN( 483)			 ::feathers::graphics::FillStyle result = ( ( ::haxe::ds::EnumValueMap)(this1) )->get(::feathers::core::IStateContext_obj::get_currentState(this->stateContext)).StaticCast<  ::feathers::graphics::FillStyle >();
HXLINE( 484)			if (::hx::IsNotNull( result )) {
HXLINE( 485)				return result;
            			}
            		}
HXLINE( 488)		bool _hx_tmp;
HXDLIN( 488)		if (::hx::IsNotNull( this->disabledFill )) {
HXLINE( 488)			_hx_tmp = ::Std_obj::isOfType(this->stateContext,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IUIControl >()) ));
            		}
            		else {
HXLINE( 488)			_hx_tmp = false;
            		}
HXDLIN( 488)		if (_hx_tmp) {
HXLINE( 489)			::Dynamic control = this->stateContext;
HXLINE( 490)			if (!(::feathers::core::IUIControl_obj::get_enabled(control))) {
HXLINE( 491)				return this->disabledFill;
            			}
            		}
HXLINE( 494)		bool _hx_tmp1;
HXDLIN( 494)		if (::hx::IsNotNull( this->selectedFill )) {
HXLINE( 494)			_hx_tmp1 = ::Std_obj::isOfType(this->stateContext,( ( ::Dynamic)(::hx::ClassOf< ::feathers::controls::IToggle >()) ));
            		}
            		else {
HXLINE( 494)			_hx_tmp1 = false;
            		}
HXDLIN( 494)		if (_hx_tmp1) {
HXLINE( 495)			::Dynamic toggle = this->stateContext;
HXLINE( 496)			if (::feathers::controls::IToggle_obj::get_selected(toggle)) {
HXLINE( 497)				return this->selectedFill;
            			}
            		}
HXLINE( 500)		return this->fill;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseGraphicsPathSkin_obj,getCurrentFillWithoutCache,return )

bool BaseGraphicsPathSkin_obj::needsStateUpdate(){
            	HX_STACKFRAME(&_hx_pos_fc1a4e1b068e0ca2_513_needsStateUpdate)
HXLINE( 514)		bool updated = false;
HXLINE( 515)		 ::feathers::graphics::LineStyle _hx_tmp = this->_previousBorder;
HXDLIN( 515)		if (::hx::IsNotEq( _hx_tmp,this->getCurrentBorderWithoutCache() )) {
HXLINE( 516)			this->_previousBorder = null();
HXLINE( 517)			updated = true;
            		}
HXLINE( 519)		 ::feathers::graphics::FillStyle _hx_tmp1 = this->_previousFill;
HXDLIN( 519)		if (::hx::IsNotEq( _hx_tmp1,this->getCurrentFillWithoutCache() )) {
HXLINE( 520)			this->_previousFill = null();
HXLINE( 521)			updated = true;
            		}
HXLINE( 523)		return updated;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseGraphicsPathSkin_obj,needsStateUpdate,return )

void BaseGraphicsPathSkin_obj::checkForStateChange(){
            	HX_STACKFRAME(&_hx_pos_fc1a4e1b068e0ca2_526_checkForStateChange)
HXLINE( 527)		if (!(this->needsStateUpdate())) {
HXLINE( 528)			return;
            		}
HXLINE( 530)		this->setInvalid(HX_("state",11,76,0b,84));
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseGraphicsPathSkin_obj,checkForStateChange,(void))

void BaseGraphicsPathSkin_obj::stateContext_stateChangeHandler( ::feathers::events::FeathersEvent event){
            	HX_STACKFRAME(&_hx_pos_fc1a4e1b068e0ca2_534_stateContext_stateChangeHandler)
HXDLIN( 534)		this->checkForStateChange();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseGraphicsPathSkin_obj,stateContext_stateChangeHandler,(void))

void BaseGraphicsPathSkin_obj::stateContextToggle_changeHandler( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_fc1a4e1b068e0ca2_538_stateContextToggle_changeHandler)
HXDLIN( 538)		this->checkForStateChange();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseGraphicsPathSkin_obj,stateContextToggle_changeHandler,(void))


::hx::ObjectPtr< BaseGraphicsPathSkin_obj > BaseGraphicsPathSkin_obj::__new() {
	::hx::ObjectPtr< BaseGraphicsPathSkin_obj > __this = new BaseGraphicsPathSkin_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< BaseGraphicsPathSkin_obj > BaseGraphicsPathSkin_obj::__alloc(::hx::Ctx *_hx_ctx) {
	BaseGraphicsPathSkin_obj *__this = (BaseGraphicsPathSkin_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BaseGraphicsPathSkin_obj), true, "feathers.skins.BaseGraphicsPathSkin"));
	*(void **)__this = BaseGraphicsPathSkin_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

BaseGraphicsPathSkin_obj::BaseGraphicsPathSkin_obj()
{
}

void BaseGraphicsPathSkin_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BaseGraphicsPathSkin);
	HX_MARK_MEMBER_NAME(_previousBorder,"_previousBorder");
	HX_MARK_MEMBER_NAME(_previousFill,"_previousFill");
	HX_MARK_MEMBER_NAME(stateContext,"stateContext");
	HX_MARK_MEMBER_NAME(_stateToFill,"_stateToFill");
	HX_MARK_MEMBER_NAME(fill,"fill");
	HX_MARK_MEMBER_NAME(disabledFill,"disabledFill");
	HX_MARK_MEMBER_NAME(selectedFill,"selectedFill");
	HX_MARK_MEMBER_NAME(_stateToBorder,"_stateToBorder");
	HX_MARK_MEMBER_NAME(border,"border");
	HX_MARK_MEMBER_NAME(disabledBorder,"disabledBorder");
	HX_MARK_MEMBER_NAME(selectedBorder,"selectedBorder");
	 ::feathers::core::MeasureSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void BaseGraphicsPathSkin_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_previousBorder,"_previousBorder");
	HX_VISIT_MEMBER_NAME(_previousFill,"_previousFill");
	HX_VISIT_MEMBER_NAME(stateContext,"stateContext");
	HX_VISIT_MEMBER_NAME(_stateToFill,"_stateToFill");
	HX_VISIT_MEMBER_NAME(fill,"fill");
	HX_VISIT_MEMBER_NAME(disabledFill,"disabledFill");
	HX_VISIT_MEMBER_NAME(selectedFill,"selectedFill");
	HX_VISIT_MEMBER_NAME(_stateToBorder,"_stateToBorder");
	HX_VISIT_MEMBER_NAME(border,"border");
	HX_VISIT_MEMBER_NAME(disabledBorder,"disabledBorder");
	HX_VISIT_MEMBER_NAME(selectedBorder,"selectedBorder");
	 ::feathers::core::MeasureSprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val BaseGraphicsPathSkin_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"fill") ) { return ::hx::Val( fill ); }
		if (HX_FIELD_EQ(inName,"draw") ) { return ::hx::Val( draw_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { return ::hx::Val( border ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"set_fill") ) { return ::hx::Val( set_fill_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawPath") ) { return ::hx::Val( drawPath_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"set_border") ) { return ::hx::Val( set_border_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"stateContext") ) { return ::hx::Val( stateContext ); }
		if (HX_FIELD_EQ(inName,"_stateToFill") ) { return ::hx::Val( _stateToFill ); }
		if (HX_FIELD_EQ(inName,"disabledFill") ) { return ::hx::Val( disabledFill ); }
		if (HX_FIELD_EQ(inName,"selectedFill") ) { return ::hx::Val( selectedFill ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_previousFill") ) { return ::hx::Val( _previousFill ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_stateToBorder") ) { return ::hx::Val( _stateToBorder ); }
		if (HX_FIELD_EQ(inName,"disabledBorder") ) { return ::hx::Val( disabledBorder ); }
		if (HX_FIELD_EQ(inName,"selectedBorder") ) { return ::hx::Val( selectedBorder ); }
		if (HX_FIELD_EQ(inName,"applyLineStyle") ) { return ::hx::Val( applyLineStyle_dyn() ); }
		if (HX_FIELD_EQ(inName,"applyFillStyle") ) { return ::hx::Val( applyFillStyle_dyn() ); }
		if (HX_FIELD_EQ(inName,"getCurrentFill") ) { return ::hx::Val( getCurrentFill_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_previousBorder") ) { return ::hx::Val( _previousBorder ); }
		if (HX_FIELD_EQ(inName,"getFillForState") ) { return ::hx::Val( getFillForState_dyn() ); }
		if (HX_FIELD_EQ(inName,"setFillForState") ) { return ::hx::Val( setFillForState_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"set_stateContext") ) { return ::hx::Val( set_stateContext_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_disabledFill") ) { return ::hx::Val( set_disabledFill_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_selectedFill") ) { return ::hx::Val( set_selectedFill_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLineThickness") ) { return ::hx::Val( getLineThickness_dyn() ); }
		if (HX_FIELD_EQ(inName,"getCurrentBorder") ) { return ::hx::Val( getCurrentBorder_dyn() ); }
		if (HX_FIELD_EQ(inName,"needsStateUpdate") ) { return ::hx::Val( needsStateUpdate_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getBorderForState") ) { return ::hx::Val( getBorderForState_dyn() ); }
		if (HX_FIELD_EQ(inName,"setBorderForState") ) { return ::hx::Val( setBorderForState_dyn() ); }
		if (HX_FIELD_EQ(inName,"getGradientMatrix") ) { return ::hx::Val( getGradientMatrix_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"set_disabledBorder") ) { return ::hx::Val( set_disabledBorder_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_selectedBorder") ) { return ::hx::Val( set_selectedBorder_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"checkForStateChange") ) { return ::hx::Val( checkForStateChange_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"getCurrentFillWithoutCache") ) { return ::hx::Val( getCurrentFillWithoutCache_dyn() ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"getCurrentBorderWithoutCache") ) { return ::hx::Val( getCurrentBorderWithoutCache_dyn() ); }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"stateContext_stateChangeHandler") ) { return ::hx::Val( stateContext_stateChangeHandler_dyn() ); }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"stateContextToggle_changeHandler") ) { return ::hx::Val( stateContextToggle_changeHandler_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val BaseGraphicsPathSkin_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"fill") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_fill(inValue.Cast<  ::feathers::graphics::FillStyle >()) );fill=inValue.Cast<  ::feathers::graphics::FillStyle >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_border(inValue.Cast<  ::feathers::graphics::LineStyle >()) );border=inValue.Cast<  ::feathers::graphics::LineStyle >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"stateContext") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_stateContext(inValue.Cast< ::Dynamic >()) );stateContext=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_stateToFill") ) { _stateToFill=inValue.Cast<  ::haxe::ds::EnumValueMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"disabledFill") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_disabledFill(inValue.Cast<  ::feathers::graphics::FillStyle >()) );disabledFill=inValue.Cast<  ::feathers::graphics::FillStyle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectedFill") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_selectedFill(inValue.Cast<  ::feathers::graphics::FillStyle >()) );selectedFill=inValue.Cast<  ::feathers::graphics::FillStyle >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_previousFill") ) { _previousFill=inValue.Cast<  ::feathers::graphics::FillStyle >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_stateToBorder") ) { _stateToBorder=inValue.Cast<  ::haxe::ds::EnumValueMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"disabledBorder") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_disabledBorder(inValue.Cast<  ::feathers::graphics::LineStyle >()) );disabledBorder=inValue.Cast<  ::feathers::graphics::LineStyle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectedBorder") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_selectedBorder(inValue.Cast<  ::feathers::graphics::LineStyle >()) );selectedBorder=inValue.Cast<  ::feathers::graphics::LineStyle >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_previousBorder") ) { _previousBorder=inValue.Cast<  ::feathers::graphics::LineStyle >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BaseGraphicsPathSkin_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_previousBorder",22,49,11,9c));
	outFields->push(HX_("_previousFill",39,31,cc,cc));
	outFields->push(HX_("stateContext",de,9b,11,d7));
	outFields->push(HX_("_stateToFill",90,34,08,5a));
	outFields->push(HX_("fill",83,ce,bb,43));
	outFields->push(HX_("disabledFill",1f,aa,fd,6d));
	outFields->push(HX_("selectedFill",7e,ee,55,d4));
	outFields->push(HX_("_stateToBorder",39,10,d6,f2));
	outFields->push(HX_("border",ec,4c,1a,64));
	outFields->push(HX_("disabledBorder",88,47,3f,07));
	outFields->push(HX_("selectedBorder",a7,a1,78,e7));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo BaseGraphicsPathSkin_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::feathers::graphics::LineStyle */ ,(int)offsetof(BaseGraphicsPathSkin_obj,_previousBorder),HX_("_previousBorder",22,49,11,9c)},
	{::hx::fsObject /*  ::feathers::graphics::FillStyle */ ,(int)offsetof(BaseGraphicsPathSkin_obj,_previousFill),HX_("_previousFill",39,31,cc,cc)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(BaseGraphicsPathSkin_obj,stateContext),HX_("stateContext",de,9b,11,d7)},
	{::hx::fsObject /*  ::haxe::ds::EnumValueMap */ ,(int)offsetof(BaseGraphicsPathSkin_obj,_stateToFill),HX_("_stateToFill",90,34,08,5a)},
	{::hx::fsObject /*  ::feathers::graphics::FillStyle */ ,(int)offsetof(BaseGraphicsPathSkin_obj,fill),HX_("fill",83,ce,bb,43)},
	{::hx::fsObject /*  ::feathers::graphics::FillStyle */ ,(int)offsetof(BaseGraphicsPathSkin_obj,disabledFill),HX_("disabledFill",1f,aa,fd,6d)},
	{::hx::fsObject /*  ::feathers::graphics::FillStyle */ ,(int)offsetof(BaseGraphicsPathSkin_obj,selectedFill),HX_("selectedFill",7e,ee,55,d4)},
	{::hx::fsObject /*  ::haxe::ds::EnumValueMap */ ,(int)offsetof(BaseGraphicsPathSkin_obj,_stateToBorder),HX_("_stateToBorder",39,10,d6,f2)},
	{::hx::fsObject /*  ::feathers::graphics::LineStyle */ ,(int)offsetof(BaseGraphicsPathSkin_obj,border),HX_("border",ec,4c,1a,64)},
	{::hx::fsObject /*  ::feathers::graphics::LineStyle */ ,(int)offsetof(BaseGraphicsPathSkin_obj,disabledBorder),HX_("disabledBorder",88,47,3f,07)},
	{::hx::fsObject /*  ::feathers::graphics::LineStyle */ ,(int)offsetof(BaseGraphicsPathSkin_obj,selectedBorder),HX_("selectedBorder",a7,a1,78,e7)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *BaseGraphicsPathSkin_obj_sStaticStorageInfo = 0;
#endif

static ::String BaseGraphicsPathSkin_obj_sMemberFields[] = {
	HX_("_previousBorder",22,49,11,9c),
	HX_("_previousFill",39,31,cc,cc),
	HX_("stateContext",de,9b,11,d7),
	HX_("set_stateContext",db,75,f2,31),
	HX_("_stateToFill",90,34,08,5a),
	HX_("fill",83,ce,bb,43),
	HX_("set_fill",80,e3,d3,71),
	HX_("disabledFill",1f,aa,fd,6d),
	HX_("set_disabledFill",1c,84,de,c8),
	HX_("selectedFill",7e,ee,55,d4),
	HX_("set_selectedFill",7b,c8,36,2f),
	HX_("_stateToBorder",39,10,d6,f2),
	HX_("border",ec,4c,1a,64),
	HX_("set_border",29,5b,1f,58),
	HX_("disabledBorder",88,47,3f,07),
	HX_("set_disabledBorder",c5,5a,88,7f),
	HX_("selectedBorder",a7,a1,78,e7),
	HX_("set_selectedBorder",e4,b4,c1,5f),
	HX_("getFillForState",a1,99,2e,a5),
	HX_("setFillForState",ad,16,fa,a0),
	HX_("getBorderForState",8a,82,c8,f9),
	HX_("setBorderForState",96,5a,36,1d),
	HX_("update",09,86,05,87),
	HX_("draw",04,2c,70,42),
	HX_("drawPath",c9,8f,bb,5e),
	HX_("applyLineStyle",4f,e5,96,b9),
	HX_("applyFillStyle",60,08,43,41),
	HX_("getLineThickness",6a,c4,06,08),
	HX_("getGradientMatrix",87,a7,df,89),
	HX_("getCurrentBorder",8f,77,97,b1),
	HX_("getCurrentBorderWithoutCache",09,f1,e3,b3),
	HX_("getCurrentFill",66,fa,eb,03),
	HX_("getCurrentFillWithoutCache",60,da,9c,88),
	HX_("needsStateUpdate",9d,46,4a,da),
	HX_("checkForStateChange",c0,e4,ed,3a),
	HX_("stateContext_stateChangeHandler",6a,82,fc,63),
	HX_("stateContextToggle_changeHandler",0d,0a,d8,93),
	::String(null()) };

::hx::Class BaseGraphicsPathSkin_obj::__mClass;

void BaseGraphicsPathSkin_obj::__register()
{
	BaseGraphicsPathSkin_obj _hx_dummy;
	BaseGraphicsPathSkin_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("feathers.skins.BaseGraphicsPathSkin",d4,7b,a8,6f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BaseGraphicsPathSkin_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BaseGraphicsPathSkin_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BaseGraphicsPathSkin_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BaseGraphicsPathSkin_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace feathers
} // end namespace skins
