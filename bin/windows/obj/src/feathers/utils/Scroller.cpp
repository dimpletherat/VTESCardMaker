// Generated by Haxe 4.1.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_feathers_events_ScrollEvent
#include <feathers/events/ScrollEvent.h>
#endif
#ifndef INCLUDED_feathers_utils_Scroller
#include <feathers/utils/Scroller.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_motion_Actuate
#include <motion/Actuate.h>
#endif
#ifndef INCLUDED_motion_actuators_GenericActuator
#include <motion/actuators/GenericActuator.h>
#endif
#ifndef INCLUDED_motion_actuators_IGenericActuator
#include <motion/actuators/IGenericActuator.h>
#endif
#ifndef INCLUDED_motion_actuators_SimpleActuator
#include <motion/actuators/SimpleActuator.h>
#endif
#ifndef INCLUDED_motion_easing_IEasing
#include <motion/easing/IEasing.h>
#endif
#ifndef INCLUDED_motion_easing_Quart
#include <motion/easing/Quart.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TouchEvent
#include <openfl/events/TouchEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_502d7772405dfa7d_34_new,"feathers.utils.Scroller","new",0xe12a9ce7,"feathers.utils.Scroller.new","feathers/utils/Scroller.hx",34,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_75_set_scrollX,"feathers.utils.Scroller","set_scrollX",0x0510c655,"feathers.utils.Scroller.set_scrollX","feathers/utils/Scroller.hx",75,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_97_set_scrollY,"feathers.utils.Scroller","set_scrollY",0x0510c656,"feathers.utils.Scroller.set_scrollY","feathers/utils/Scroller.hx",97,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_378_set_decelerationRate,"feathers.utils.Scroller","set_decelerationRate",0x7d242235,"feathers.utils.Scroller.set_decelerationRate","feathers/utils/Scroller.hx",378,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_416_set_target,"feathers.utils.Scroller","set_target",0x5d66e3e7,"feathers.utils.Scroller.set_target","feathers/utils/Scroller.hx",416,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_450_setDimensions,"feathers.utils.Scroller","setDimensions",0x393057d6,"feathers.utils.Scroller.setDimensions","feathers/utils/Scroller.hx",450,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_463_stop,"feathers.utils.Scroller","stop",0x2778199b,"feathers.utils.Scroller.stop","feathers/utils/Scroller.hx",463,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_480_throwWithVelocity,"feathers.utils.Scroller","throwWithVelocity",0xeed87f50,"feathers.utils.Scroller.throwWithVelocity","feathers/utils/Scroller.hx",480,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_501_calculateDistanceFromVelocity,"feathers.utils.Scroller","calculateDistanceFromVelocity",0x9cb22a49,"feathers.utils.Scroller.calculateDistanceFromVelocity","feathers/utils/Scroller.hx",501,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_509_throwTo,"feathers.utils.Scroller","throwTo",0xd783d848,"feathers.utils.Scroller.throwTo","feathers/utils/Scroller.hx",509,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_532_throwTo,"feathers.utils.Scroller","throwTo",0xd783d848,"feathers.utils.Scroller.throwTo","feathers/utils/Scroller.hx",532,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_559_throwTo,"feathers.utils.Scroller","throwTo",0xd783d848,"feathers.utils.Scroller.throwTo","feathers/utils/Scroller.hx",559,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_576_refreshAnimateScrollXEndRatio,"feathers.utils.Scroller","refreshAnimateScrollXEndRatio",0x8337c7dc,"feathers.utils.Scroller.refreshAnimateScrollXEndRatio","feathers/utils/Scroller.hx",576,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_602_refreshAnimateScrollYEndRatio,"feathers.utils.Scroller","refreshAnimateScrollYEndRatio",0x562930dd,"feathers.utils.Scroller.refreshAnimateScrollYEndRatio","feathers/utils/Scroller.hx",602,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_628_calculateMinAndMax,"feathers.utils.Scroller","calculateMinAndMax",0x39fbb852,"feathers.utils.Scroller.calculateMinAndMax","feathers/utils/Scroller.hx",628,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_643_startScroll,"feathers.utils.Scroller","startScroll",0x031c6196,"feathers.utils.Scroller.startScroll","feathers/utils/Scroller.hx",643,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_656_completeScroll,"feathers.utils.Scroller","completeScroll",0x08fba07f,"feathers.utils.Scroller.completeScroll","feathers/utils/Scroller.hx",656,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_668_finishScrollX,"feathers.utils.Scroller","finishScrollX",0xb88576df,"feathers.utils.Scroller.finishScrollX","feathers/utils/Scroller.hx",668,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_685_finishScrollY,"feathers.utils.Scroller","finishScrollY",0xb88576e0,"feathers.utils.Scroller.finishScrollY","feathers/utils/Scroller.hx",685,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_702_animateScrollX_endRatio_onUpdate,"feathers.utils.Scroller","animateScrollX_endRatio_onUpdate",0x654e2a1b,"feathers.utils.Scroller.animateScrollX_endRatio_onUpdate","feathers/utils/Scroller.hx",702,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_726_animateScrollX_onComplete,"feathers.utils.Scroller","animateScrollX_onComplete",0x51446d14,"feathers.utils.Scroller.animateScrollX_onComplete","feathers/utils/Scroller.hx",726,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_732_animateScrollY_endRatio_onUpdate,"feathers.utils.Scroller","animateScrollY_endRatio_onUpdate",0x6a5b3e5c,"feathers.utils.Scroller.animateScrollY_endRatio_onUpdate","feathers/utils/Scroller.hx",732,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_756_animateScrollY_onComplete,"feathers.utils.Scroller","animateScrollY_onComplete",0x9303dab3,"feathers.utils.Scroller.animateScrollY_onComplete","feathers/utils/Scroller.hx",756,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_762_cleanupAfterDrag,"feathers.utils.Scroller","cleanupAfterDrag",0x61f7d685,"feathers.utils.Scroller.cleanupAfterDrag","feathers/utils/Scroller.hx",762,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_778_target_removedFromStageHandler,"feathers.utils.Scroller","target_removedFromStageHandler",0xc9bd53a1,"feathers.utils.Scroller.target_removedFromStageHandler","feathers/utils/Scroller.hx",778,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_781_touchBegin,"feathers.utils.Scroller","touchBegin",0x8c5bb043,"feathers.utils.Scroller.touchBegin","feathers/utils/Scroller.hx",781,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_823_touchMove,"feathers.utils.Scroller","touchMove",0x3b96de37,"feathers.utils.Scroller.touchMove","feathers/utils/Scroller.hx",823,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_930_touchEnd,"feathers.utils.Scroller","touchEnd",0x1f3d2f75,"feathers.utils.Scroller.touchEnd","feathers/utils/Scroller.hx",930,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_1002_canDragX,"feathers.utils.Scroller","canDragX",0x6d7cf5cd,"feathers.utils.Scroller.canDragX","feathers/utils/Scroller.hx",1002,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_1006_canDragY,"feathers.utils.Scroller","canDragY",0x6d7cf5ce,"feathers.utils.Scroller.canDragY","feathers/utils/Scroller.hx",1006,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_1009_target_touchBeginCaptureHandler,"feathers.utils.Scroller","target_touchBeginCaptureHandler",0x91cd7263,"feathers.utils.Scroller.target_touchBeginCaptureHandler","feathers/utils/Scroller.hx",1009,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_1018_target_touchBeginHandler,"feathers.utils.Scroller","target_touchBeginHandler",0xfbd5a76b,"feathers.utils.Scroller.target_touchBeginHandler","feathers/utils/Scroller.hx",1018,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_1021_target_mouseDownCaptureHandler,"feathers.utils.Scroller","target_mouseDownCaptureHandler",0xa0cf6e16,"feathers.utils.Scroller.target_mouseDownCaptureHandler","feathers/utils/Scroller.hx",1021,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_1030_target_mouseDownHandler,"feathers.utils.Scroller","target_mouseDownHandler",0x848eb358,"feathers.utils.Scroller.target_mouseDownHandler","feathers/utils/Scroller.hx",1030,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_1034_target_stage_touchMoveHandler,"feathers.utils.Scroller","target_stage_touchMoveHandler",0x7ecb90d0,"feathers.utils.Scroller.target_stage_touchMoveHandler","feathers/utils/Scroller.hx",1034,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_1038_target_stage_mouseMoveHandler,"feathers.utils.Scroller","target_stage_mouseMoveHandler",0xa344002a,"feathers.utils.Scroller.target_stage_mouseMoveHandler","feathers/utils/Scroller.hx",1038,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_1042_target_stage_touchEndHandler,"feathers.utils.Scroller","target_stage_touchEndHandler",0x2380fcf8,"feathers.utils.Scroller.target_stage_touchEndHandler","feathers/utils/Scroller.hx",1042,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_1045_target_clickCaptureHandler,"feathers.utils.Scroller","target_clickCaptureHandler",0xf6da9f77,"feathers.utils.Scroller.target_clickCaptureHandler","feathers/utils/Scroller.hx",1045,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_1053_target_touchTapCaptureHandler,"feathers.utils.Scroller","target_touchTapCaptureHandler",0x6dff6a9d,"feathers.utils.Scroller.target_touchTapCaptureHandler","feathers/utils/Scroller.hx",1053,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_1067_target_stage_mouseUpHandler,"feathers.utils.Scroller","target_stage_mouseUpHandler",0x421e6be0,"feathers.utils.Scroller.target_stage_mouseUpHandler","feathers/utils/Scroller.hx",1067,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_1070_target_mouseWheelHandler,"feathers.utils.Scroller","target_mouseWheelHandler",0x694e6e9f,"feathers.utils.Scroller.target_mouseWheelHandler","feathers/utils/Scroller.hx",1070,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_35_boot,"feathers.utils.Scroller","boot",0x1c37adcb,"feathers.utils.Scroller.boot","feathers/utils/Scroller.hx",35,0x79e218e7)
HX_LOCAL_STACK_FRAME(_hx_pos_502d7772405dfa7d_36_boot,"feathers.utils.Scroller","boot",0x1c37adcb,"feathers.utils.Scroller.boot","feathers/utils/Scroller.hx",36,0x79e218e7)
namespace feathers{
namespace utils{

void Scroller_obj::__construct( ::openfl::display::InteractiveObject target){
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_34_new)
HXLINE( 407)		this->snappingToEdge = false;
HXLINE( 406)		this->targetScrollY = ((Float)0.0);
HXLINE( 405)		this->targetScrollX = ((Float)0.0);
HXLINE( 404)		this->animateScrollYEndRatio = ((Float)1.0);
HXLINE( 403)		this->animateScrollXEndRatio = ((Float)1.0);
HXLINE( 402)		this->_animateScrollYEase = null();
HXLINE( 401)		this->_animateScrollXEase = null();
HXLINE( 400)		this->animateScrollY = null();
HXLINE( 399)		this->animateScrollX = null();
HXLINE( 398)		this->savedScrollMoves = ::Array_obj< Float >::__new(0);
HXLINE( 397)		this->startScrollY = ((Float)0.0);
HXLINE( 396)		this->startScrollX = ((Float)0.0);
HXLINE( 395)		this->startTouchY = ((Float)0.0);
HXLINE( 394)		this->startTouchX = ((Float)0.0);
HXLINE( 393)		this->previousTouchPointID = -1;
HXLINE( 392)		this->touchPointID = -1;
HXLINE( 391)		this->restoreMouseChildren = false;
HXLINE( 390)		this->_fixedThrowDuration = ((Float)2.996998998998728);
HXLINE( 389)		this->_logDecelerationRate = ((Float)-0.0020020026706730793);
HXLINE( 376)		this->decelerationRate = ((Float)0.998);
HXLINE( 365)		this->simulateTouch = false;
HXLINE( 356)		this->mouseWheelDuration = ((Float)0.0);
HXLINE( 346)		this->mouseWheelDelta = ((Float)10.0);
HXLINE( 337)		this->bounceEase = null();
HXLINE( 327)		this->ease = ::motion::easing::Quart_obj::easeOut;
HXLINE( 318)		this->elasticSnapDuration = ((Float)0.5);
HXLINE( 306)		this->throwElasticity = ((Float)0.05);
HXLINE( 287)		this->elasticity = ((Float)0.33);
HXLINE( 269)		this->forceElasticLeft = false;
HXLINE( 255)		this->forceElasticBottom = false;
HXLINE( 241)		this->forceElasticRight = false;
HXLINE( 227)		this->forceElasticTop = false;
HXLINE( 213)		this->elasticEdges = true;
HXLINE( 201)		this->minDragDistance = ((Float)6.0);
HXLINE( 191)		this->draggingY = false;
HXLINE( 184)		this->draggingX = false;
HXLINE( 177)		this->scrolling = false;
HXLINE( 170)		this->contentHeight = ((Float)0.0);
HXLINE( 160)		this->contentWidth = ((Float)0.0);
HXLINE( 150)		this->visibleHeight = ((Float)0.0);
HXLINE( 141)		this->visibleWidth = ((Float)0.0);
HXLINE( 132)		this->maxScrollY = ((Float)0.0);
HXLINE( 125)		this->maxScrollX = ((Float)0.0);
HXLINE( 118)		this->minScrollY = ((Float)0.0);
HXLINE( 111)		this->minScrollX = ((Float)0.0);
HXLINE(  95)		this->scrollY = ((Float)0.0);
HXLINE(  73)		this->scrollX = ((Float)0.0);
HXLINE(  60)		this->enabledY = true;
HXLINE(  53)		this->enabledX = true;
HXLINE(  44)		super::__construct(null());
HXLINE(  45)		this->set_target(target);
            	}

Dynamic Scroller_obj::__CreateEmpty() { return new Scroller_obj; }

void *Scroller_obj::_hx_vtable = 0;

Dynamic Scroller_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Scroller_obj > _hx_result = new Scroller_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Scroller_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c89e854) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0c89e854;
	} else {
		return inClassId==(int)0x26c5e59b;
	}
}

Float Scroller_obj::set_scrollX(Float value){
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_75_set_scrollX)
HXLINE(  76)		if ((this->scrollX == value)) {
HXLINE(  77)			return this->scrollX;
            		}
HXLINE(  79)		this->scrollX = value;
HXLINE(  80)		::feathers::events::ScrollEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("scroll",0d,d8,64,47),null(),null());
HXLINE(  81)		return this->scrollX;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scroller_obj,set_scrollX,return )

Float Scroller_obj::set_scrollY(Float value){
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_97_set_scrollY)
HXLINE(  98)		if ((this->scrollY == value)) {
HXLINE(  99)			return this->scrollY;
            		}
HXLINE( 101)		this->scrollY = value;
HXLINE( 102)		::feathers::events::ScrollEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("scroll",0d,d8,64,47),null(),null());
HXLINE( 103)		return this->scrollY;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scroller_obj,set_scrollY,return )

Float Scroller_obj::set_decelerationRate(Float value){
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_378_set_decelerationRate)
HXLINE( 379)		if ((this->decelerationRate == value)) {
HXLINE( 380)			return this->decelerationRate;
            		}
HXLINE( 382)		this->decelerationRate = value;
HXLINE( 383)		this->_logDecelerationRate = ::Math_obj::log(this->decelerationRate);
HXLINE( 384)		this->_fixedThrowDuration = (((Float)-0.1) / ::Math_obj::log(::Math_obj::pow(this->decelerationRate,((Float)16.666666666666668))));
HXLINE( 385)		return this->decelerationRate;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scroller_obj,set_decelerationRate,return )

 ::openfl::display::InteractiveObject Scroller_obj::set_target( ::openfl::display::InteractiveObject value){
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_416_set_target)
HXLINE( 417)		if (::hx::IsEq( this->target,value )) {
HXLINE( 418)			return this->target;
            		}
HXLINE( 420)		if (::hx::IsNotNull( this->target )) {
HXLINE( 421)			this->target->removeEventListener(HX_("removedFromStage",34,21,76,ba),this->target_removedFromStageHandler_dyn(),null());
HXLINE( 422)			this->target->removeEventListener(HX_("mouseDown",27,b1,c2,ee),this->target_mouseDownHandler_dyn(),null());
HXLINE( 423)			this->target->removeEventListener(HX_("mouseDown",27,b1,c2,ee),this->target_mouseDownCaptureHandler_dyn(),true);
HXLINE( 424)			this->target->removeEventListener(HX_("mouseWheel",36,28,87,e7),this->target_mouseWheelHandler_dyn(),null());
HXLINE( 425)			this->target->removeEventListener(HX_("touchBegin",ea,cd,e6,a9),this->target_touchBeginHandler_dyn(),null());
HXLINE( 426)			this->target->removeEventListener(HX_("touchBegin",ea,cd,e6,a9),this->target_touchBeginCaptureHandler_dyn(),true);
HXLINE( 427)			this->target->removeEventListener(HX_("click",48,7c,5e,48),this->target_clickCaptureHandler_dyn(),true);
HXLINE( 428)			this->target->removeEventListener(HX_("touchTap",e4,1b,15,00),this->target_touchTapCaptureHandler_dyn(),true);
            		}
HXLINE( 430)		this->target = value;
HXLINE( 431)		if (::hx::IsNotNull( this->target )) {
HXLINE( 432)			this->target->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->target_mouseDownHandler_dyn(),false,0,true);
HXLINE( 433)			this->target->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->target_mouseDownCaptureHandler_dyn(),true,0,true);
HXLINE( 434)			this->target->addEventListener(HX_("mouseWheel",36,28,87,e7),this->target_mouseWheelHandler_dyn(),false,0,true);
HXLINE( 435)			this->target->addEventListener(HX_("touchBegin",ea,cd,e6,a9),this->target_touchBeginHandler_dyn(),false,0,true);
HXLINE( 436)			this->target->addEventListener(HX_("touchBegin",ea,cd,e6,a9),this->target_touchBeginCaptureHandler_dyn(),true,0,true);
HXLINE( 437)			this->target->addEventListener(HX_("click",48,7c,5e,48),this->target_clickCaptureHandler_dyn(),true,0,true);
            		}
HXLINE( 442)		return this->target;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scroller_obj,set_target,return )

void Scroller_obj::setDimensions( ::Dynamic visibleWidth, ::Dynamic visibleHeight, ::Dynamic contentWidth, ::Dynamic contentHeight){
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_450_setDimensions)
HXLINE( 451)		Float _hx_tmp;
HXDLIN( 451)		if (::hx::IsNotNull( visibleWidth )) {
HXLINE( 451)			_hx_tmp = ( (Float)(visibleWidth) );
            		}
            		else {
HXLINE( 451)			_hx_tmp = ((Float)0.0);
            		}
HXDLIN( 451)		this->visibleWidth = _hx_tmp;
HXLINE( 452)		Float _hx_tmp1;
HXDLIN( 452)		if (::hx::IsNotNull( visibleHeight )) {
HXLINE( 452)			_hx_tmp1 = ( (Float)(visibleHeight) );
            		}
            		else {
HXLINE( 452)			_hx_tmp1 = ((Float)0.0);
            		}
HXDLIN( 452)		this->visibleHeight = _hx_tmp1;
HXLINE( 453)		Float _hx_tmp2;
HXDLIN( 453)		if (::hx::IsNotNull( contentWidth )) {
HXLINE( 453)			_hx_tmp2 = ( (Float)(contentWidth) );
            		}
            		else {
HXLINE( 453)			_hx_tmp2 = ((Float)0.0);
            		}
HXDLIN( 453)		this->contentWidth = _hx_tmp2;
HXLINE( 454)		Float _hx_tmp3;
HXDLIN( 454)		if (::hx::IsNotNull( contentHeight )) {
HXLINE( 454)			_hx_tmp3 = ( (Float)(contentHeight) );
            		}
            		else {
HXLINE( 454)			_hx_tmp3 = ((Float)0.0);
            		}
HXDLIN( 454)		this->contentHeight = _hx_tmp3;
HXLINE( 455)		this->calculateMinAndMax();
            	}


HX_DEFINE_DYNAMIC_FUNC4(Scroller_obj,setDimensions,(void))

void Scroller_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_463_stop)
HXLINE( 464)		if (::hx::IsNotNull( this->animateScrollX )) {
HXLINE( 465)			::motion::Actuate_obj::stop(this->animateScrollX,null(),false,false);
HXLINE( 466)			this->animateScrollX = null();
HXLINE( 467)			this->_animateScrollXEase = null();
            		}
HXLINE( 469)		if (::hx::IsNotNull( this->animateScrollY )) {
HXLINE( 470)			::motion::Actuate_obj::stop(this->animateScrollY,null(),false,false);
HXLINE( 471)			this->animateScrollY = null();
HXLINE( 472)			this->_animateScrollYEase = null();
            		}
HXLINE( 474)		this->cleanupAfterDrag();
HXLINE( 475)		this->draggingX = false;
HXLINE( 476)		this->draggingY = false;
HXLINE( 477)		this->completeScroll();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Scroller_obj,stop,(void))

void Scroller_obj::throwWithVelocity( ::Dynamic velocityX, ::Dynamic velocityY){
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_480_throwWithVelocity)
HXLINE( 481)		 ::Dynamic targetX = null();
HXLINE( 482)		 ::Dynamic targetY = null();
HXLINE( 483)		if (::hx::IsNotNull( velocityX )) {
HXLINE( 484)			if ((::Math_obj::abs(( (Float)(velocityX) )) <= ::feathers::utils::Scroller_obj::MINIMUM_VELOCITY)) {
HXLINE( 485)				this->finishScrollX();
            			}
            			else {
HXLINE( 487)				Float targetX1 = this->scrollX;
HXDLIN( 487)				targetX = (targetX1 + this->calculateDistanceFromVelocity(( (Float)(velocityX) )));
            			}
            		}
HXLINE( 490)		if (::hx::IsNotNull( velocityY )) {
HXLINE( 491)			if ((::Math_obj::abs(( (Float)(velocityY) )) <= ::feathers::utils::Scroller_obj::MINIMUM_VELOCITY)) {
HXLINE( 492)				this->finishScrollY();
            			}
            			else {
HXLINE( 494)				Float targetY1 = this->scrollY;
HXDLIN( 494)				targetY = (targetY1 + this->calculateDistanceFromVelocity(( (Float)(velocityY) )));
            			}
            		}
HXLINE( 497)		this->throwTo(targetX,targetY,this->_fixedThrowDuration,null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(Scroller_obj,throwWithVelocity,(void))

Float Scroller_obj::calculateDistanceFromVelocity(Float velocity){
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_501_calculateDistanceFromVelocity)
HXDLIN( 501)		return ((velocity - ::feathers::utils::Scroller_obj::MINIMUM_VELOCITY) / this->_logDecelerationRate);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scroller_obj,calculateDistanceFromVelocity,return )

void Scroller_obj::throwTo( ::Dynamic scrollX, ::Dynamic scrollY, ::Dynamic duration,::Dynamic ease){
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_509_throwTo)
HXDLIN( 509)		 ::feathers::utils::Scroller _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 510)		if (::hx::IsNull( duration )) {
HXLINE( 511)			duration = this->_fixedThrowDuration;
            		}
HXLINE( 513)		if (::hx::IsNull( ease )) {
HXLINE( 514)			ease = this->ease;
            		}
HXLINE( 516)		bool scrollChanged = false;
HXLINE( 517)		if (::hx::IsNotNull( scrollX )) {
HXLINE( 518)			if (::hx::IsNotNull( this->animateScrollX )) {
HXLINE( 519)				::motion::Actuate_obj::stop(this->animateScrollX,null(),false,false);
HXLINE( 520)				this->animateScrollX = null();
HXLINE( 521)				this->_animateScrollXEase = null();
            			}
HXLINE( 523)			if (::hx::IsNotEq( this->scrollX,scrollX )) {
HXLINE( 524)				scrollChanged = true;
HXLINE( 525)				this->startScroll();
HXLINE( 526)				if (::hx::IsEq( duration,0 )) {
HXLINE( 527)					this->set_scrollX(( (Float)(scrollX) ));
            				}
            				else {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::feathers::utils::Scroller,_gthis) HXARGC(1)
            					Float _hx_run(Float scrollX){
            						HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_532_throwTo)
HXLINE( 532)						return _gthis->set_scrollX(scrollX);
            					}
            					HX_END_LOCAL_FUNC1(return)

HXLINE( 529)					this->startScrollX = this->scrollX;
HXLINE( 530)					this->targetScrollX = ( (Float)(scrollX) );
HXLINE( 531)					this->_animateScrollXEase = ease;
HXLINE( 532)					 ::motion::actuators::GenericActuator tween = ::motion::Actuate_obj::update( ::Dynamic(new _hx_Closure_0(_gthis)),( (Float)(duration) ),::cpp::VirtualArray_obj::__new(1)->init(0,this->scrollX),::cpp::VirtualArray_obj::__new(1)->init(0,this->targetScrollX),true);
HXLINE( 535)					this->animateScrollX = ::hx::TCast<  ::motion::actuators::SimpleActuator >::cast(tween);
HXLINE( 536)					this->animateScrollX->ease(this->_animateScrollXEase);
HXLINE( 537)					this->animateScrollX->onComplete(this->animateScrollX_onComplete_dyn(),null());
HXLINE( 538)					this->refreshAnimateScrollXEndRatio();
            				}
            			}
            			else {
HXLINE( 541)				this->finishScrollX();
            			}
            		}
HXLINE( 544)		if (::hx::IsNotNull( scrollY )) {
HXLINE( 545)			if (::hx::IsNotNull( this->animateScrollY )) {
HXLINE( 546)				::motion::Actuate_obj::stop(this->animateScrollY,null(),false,false);
HXLINE( 547)				this->animateScrollY = null();
HXLINE( 548)				this->_animateScrollYEase = null();
            			}
HXLINE( 550)			if (::hx::IsNotEq( this->scrollY,scrollY )) {
HXLINE( 551)				scrollChanged = true;
HXLINE( 552)				this->startScroll();
HXLINE( 553)				if (::hx::IsEq( duration,0 )) {
HXLINE( 554)					this->set_scrollY(( (Float)(scrollY) ));
            				}
            				else {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::feathers::utils::Scroller,_gthis) HXARGC(1)
            					Float _hx_run(Float scrollY){
            						HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_559_throwTo)
HXLINE( 559)						return _gthis->set_scrollY(scrollY);
            					}
            					HX_END_LOCAL_FUNC1(return)

HXLINE( 556)					this->startScrollY = this->scrollY;
HXLINE( 557)					this->targetScrollY = ( (Float)(scrollY) );
HXLINE( 558)					this->_animateScrollYEase = ease;
HXLINE( 559)					 ::motion::actuators::GenericActuator tween = ::motion::Actuate_obj::update( ::Dynamic(new _hx_Closure_1(_gthis)),( (Float)(duration) ),::cpp::VirtualArray_obj::__new(1)->init(0,this->scrollY),::cpp::VirtualArray_obj::__new(1)->init(0,this->targetScrollY),true);
HXLINE( 562)					this->animateScrollY = ::hx::TCast<  ::motion::actuators::SimpleActuator >::cast(tween);
HXLINE( 563)					this->animateScrollY->ease(this->_animateScrollYEase);
HXLINE( 564)					this->animateScrollY->onComplete(this->animateScrollY_onComplete_dyn(),null());
HXLINE( 565)					this->refreshAnimateScrollYEndRatio();
            				}
            			}
            			else {
HXLINE( 568)				this->finishScrollY();
            			}
            		}
HXLINE( 571)		bool _hx_tmp;
HXDLIN( 571)		if (scrollChanged) {
HXLINE( 571)			_hx_tmp = ::hx::IsEq( duration,0 );
            		}
            		else {
HXLINE( 571)			_hx_tmp = false;
            		}
HXDLIN( 571)		if (_hx_tmp) {
HXLINE( 572)			this->completeScroll();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Scroller_obj,throwTo,(void))

void Scroller_obj::refreshAnimateScrollXEndRatio(){
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_576_refreshAnimateScrollXEndRatio)
HXLINE( 577)		Float distance = ::Math_obj::abs((this->targetScrollX - this->startScrollX));
HXLINE( 578)		Float ratioOutOfBounds = ((Float)0.0);
HXLINE( 579)		if ((this->targetScrollX > this->maxScrollX)) {
HXLINE( 580)			ratioOutOfBounds = ((this->targetScrollX - this->maxScrollX) / distance);
            		}
            		else {
HXLINE( 581)			if ((this->targetScrollX < this->minScrollX)) {
HXLINE( 582)				ratioOutOfBounds = ((this->minScrollX - this->targetScrollX) / distance);
            			}
            		}
HXLINE( 584)		if ((ratioOutOfBounds > ((Float)0.0))) {
HXLINE( 585)			if (this->elasticEdges) {
HXLINE( 586)				this->animateScrollXEndRatio = ((((Float)1.0) - ratioOutOfBounds) + (ratioOutOfBounds * this->throwElasticity));
            			}
            			else {
HXLINE( 588)				this->animateScrollXEndRatio = (((Float)1.0) - ratioOutOfBounds);
            			}
            		}
            		else {
HXLINE( 591)			this->animateScrollXEndRatio = ((Float)1.0);
            		}
HXLINE( 593)		if (::hx::IsNotNull( this->animateScrollX )) {
HXLINE( 594)			if ((this->animateScrollXEndRatio < ((Float)1.0))) {
HXLINE( 595)				this->animateScrollX->onUpdate(this->animateScrollX_endRatio_onUpdate_dyn(),null());
            			}
            			else {
HXLINE( 597)				this->animateScrollX->onUpdate(null(),null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Scroller_obj,refreshAnimateScrollXEndRatio,(void))

void Scroller_obj::refreshAnimateScrollYEndRatio(){
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_602_refreshAnimateScrollYEndRatio)
HXLINE( 603)		Float distance = ::Math_obj::abs((this->targetScrollY - this->startScrollY));
HXLINE( 604)		Float ratioOutOfBounds = ((Float)0.0);
HXLINE( 605)		if ((this->targetScrollY > this->maxScrollY)) {
HXLINE( 606)			ratioOutOfBounds = ((this->targetScrollY - this->maxScrollY) / distance);
            		}
            		else {
HXLINE( 607)			if ((this->targetScrollY < this->minScrollY)) {
HXLINE( 608)				ratioOutOfBounds = ((this->minScrollY - this->targetScrollY) / distance);
            			}
            		}
HXLINE( 610)		if ((ratioOutOfBounds > ((Float)0.0))) {
HXLINE( 611)			if (this->elasticEdges) {
HXLINE( 612)				this->animateScrollYEndRatio = ((((Float)1.0) - ratioOutOfBounds) + (ratioOutOfBounds * this->throwElasticity));
            			}
            			else {
HXLINE( 614)				this->animateScrollYEndRatio = (((Float)1.0) - ratioOutOfBounds);
            			}
            		}
            		else {
HXLINE( 617)			this->animateScrollYEndRatio = ((Float)1.0);
            		}
HXLINE( 619)		if (::hx::IsNotNull( this->animateScrollY )) {
HXLINE( 620)			if ((this->animateScrollYEndRatio < ((Float)1.0))) {
HXLINE( 621)				this->animateScrollY->onUpdate(this->animateScrollY_endRatio_onUpdate_dyn(),null());
            			}
            			else {
HXLINE( 623)				this->animateScrollY->onUpdate(null(),null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Scroller_obj,refreshAnimateScrollYEndRatio,(void))

void Scroller_obj::calculateMinAndMax(){
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_628_calculateMinAndMax)
HXLINE( 629)		Float oldMaxScrollX = this->maxScrollX;
HXLINE( 630)		Float oldMaxScrollY = this->maxScrollY;
HXLINE( 631)		this->minScrollX = ((Float)0.0);
HXLINE( 632)		this->minScrollY = ((Float)0.0);
HXLINE( 633)		this->maxScrollX = (::Math_obj::max(this->contentWidth,this->visibleWidth) - this->visibleWidth);
HXLINE( 634)		this->maxScrollY = (::Math_obj::max(this->contentHeight,this->visibleHeight) - this->visibleHeight);
HXLINE( 635)		if ((oldMaxScrollX != this->maxScrollX)) {
HXLINE( 636)			this->refreshAnimateScrollXEndRatio();
            		}
HXLINE( 638)		if ((oldMaxScrollY != this->maxScrollY)) {
HXLINE( 639)			this->refreshAnimateScrollYEndRatio();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Scroller_obj,calculateMinAndMax,(void))

void Scroller_obj::startScroll(){
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_643_startScroll)
HXLINE( 644)		if (this->scrolling) {
HXLINE( 645)			return;
            		}
HXLINE( 647)		this->scrolling = true;
HXLINE( 648)		if (::Std_obj::isOfType(this->target,( ( ::Dynamic)(::hx::ClassOf< ::openfl::display::DisplayObjectContainer >()) ))) {
HXLINE( 649)			 ::openfl::display::DisplayObjectContainer container = ::hx::TCast<  ::openfl::display::DisplayObjectContainer >::cast(this->target);
HXLINE( 650)			this->restoreMouseChildren = container->mouseChildren;
HXLINE( 651)			container->mouseChildren = false;
            		}
HXLINE( 653)		::feathers::events::ScrollEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("scrollStart",15,bd,e8,cd),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Scroller_obj,startScroll,(void))

void Scroller_obj::completeScroll(){
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_656_completeScroll)
HXLINE( 657)		bool _hx_tmp;
HXDLIN( 657)		bool _hx_tmp1;
HXDLIN( 657)		bool _hx_tmp2;
HXDLIN( 657)		bool _hx_tmp3;
HXDLIN( 657)		if (this->scrolling) {
HXLINE( 657)			_hx_tmp3 = this->draggingX;
            		}
            		else {
HXLINE( 657)			_hx_tmp3 = true;
            		}
HXDLIN( 657)		if (!(_hx_tmp3)) {
HXLINE( 657)			_hx_tmp2 = this->draggingY;
            		}
            		else {
HXLINE( 657)			_hx_tmp2 = true;
            		}
HXDLIN( 657)		if (!(_hx_tmp2)) {
HXLINE( 657)			_hx_tmp1 = ::hx::IsNotNull( this->animateScrollX );
            		}
            		else {
HXLINE( 657)			_hx_tmp1 = true;
            		}
HXDLIN( 657)		if (!(_hx_tmp1)) {
HXLINE( 657)			_hx_tmp = ::hx::IsNotNull( this->animateScrollY );
            		}
            		else {
HXLINE( 657)			_hx_tmp = true;
            		}
HXDLIN( 657)		if (_hx_tmp) {
HXLINE( 658)			return;
            		}
HXLINE( 660)		this->scrolling = false;
HXLINE( 661)		if (::Std_obj::isOfType(this->target,( ( ::Dynamic)(::hx::ClassOf< ::openfl::display::DisplayObjectContainer >()) ))) {
HXLINE( 662)			 ::openfl::display::DisplayObjectContainer container = ::hx::TCast<  ::openfl::display::DisplayObjectContainer >::cast(this->target);
HXLINE( 663)			container->mouseChildren = this->restoreMouseChildren;
            		}
HXLINE( 665)		::feathers::events::ScrollEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("scrollComplete",e6,e9,b8,0b),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Scroller_obj,completeScroll,(void))

void Scroller_obj::finishScrollX(){
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_668_finishScrollX)
HXLINE( 669)		this->draggingX = false;
HXLINE( 671)		 ::Dynamic targetScrollX = null();
HXLINE( 672)		if ((this->scrollX < this->minScrollX)) {
HXLINE( 673)			targetScrollX = this->minScrollX;
            		}
            		else {
HXLINE( 674)			if ((this->scrollX > this->maxScrollX)) {
HXLINE( 675)				targetScrollX = this->maxScrollX;
            			}
            		}
HXLINE( 678)		if (::hx::IsNull( targetScrollX )) {
HXLINE( 679)			this->completeScroll();
            		}
            		else {
HXLINE( 681)			this->throwTo(targetScrollX,null(),this->elasticSnapDuration,this->bounceEase);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Scroller_obj,finishScrollX,(void))

void Scroller_obj::finishScrollY(){
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_685_finishScrollY)
HXLINE( 686)		this->draggingY = false;
HXLINE( 688)		 ::Dynamic targetScrollY = null();
HXLINE( 689)		if ((this->scrollY < this->minScrollY)) {
HXLINE( 690)			targetScrollY = this->minScrollY;
            		}
            		else {
HXLINE( 691)			if ((this->scrollY > this->maxScrollY)) {
HXLINE( 692)				targetScrollY = this->maxScrollY;
            			}
            		}
HXLINE( 695)		if (::hx::IsNull( targetScrollY )) {
HXLINE( 696)			this->completeScroll();
            		}
            		else {
HXLINE( 698)			this->throwTo(null(),targetScrollY,this->elasticSnapDuration,this->bounceEase);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Scroller_obj,finishScrollY,(void))

void Scroller_obj::animateScrollX_endRatio_onUpdate(){
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_702_animateScrollX_endRatio_onUpdate)
HXLINE( 703)		Float time = (( (Float)(::openfl::Lib_obj::getTimer()) ) / ((Float)1000.0));
HXLINE( 704)		Float currentTime = (time - this->animateScrollX->startTime);
HXLINE( 705)		Float ratio = (currentTime / this->animateScrollX->duration);
HXLINE( 706)		ratio = ::motion::easing::IEasing_obj::calculate(this->_animateScrollXEase,ratio);
HXLINE( 707)		bool _hx_tmp;
HXDLIN( 707)		if ((ratio >= this->animateScrollXEndRatio)) {
HXLINE( 707)			_hx_tmp = (currentTime < this->animateScrollX->duration);
            		}
            		else {
HXLINE( 707)			_hx_tmp = false;
            		}
HXDLIN( 707)		if (_hx_tmp) {
HXLINE( 711)			if (!(this->elasticEdges)) {
HXLINE( 712)				if ((this->scrollX < this->minScrollX)) {
HXLINE( 713)					this->set_scrollX(this->minScrollX);
            				}
            				else {
HXLINE( 714)					if ((this->scrollX > this->maxScrollX)) {
HXLINE( 715)						this->set_scrollX(this->maxScrollX);
            					}
            				}
            			}
HXLINE( 718)			::motion::Actuate_obj::stop(this->animateScrollX,null(),false,false);
HXLINE( 719)			this->animateScrollX = null();
HXLINE( 720)			this->_animateScrollXEase = null();
HXLINE( 721)			this->finishScrollX();
HXLINE( 722)			return;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Scroller_obj,animateScrollX_endRatio_onUpdate,(void))

void Scroller_obj::animateScrollX_onComplete(){
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_726_animateScrollX_onComplete)
HXLINE( 727)		this->animateScrollX = null();
HXLINE( 728)		this->_animateScrollXEase = null();
HXLINE( 729)		this->finishScrollX();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Scroller_obj,animateScrollX_onComplete,(void))

void Scroller_obj::animateScrollY_endRatio_onUpdate(){
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_732_animateScrollY_endRatio_onUpdate)
HXLINE( 733)		Float time = (( (Float)(::openfl::Lib_obj::getTimer()) ) / ((Float)1000.0));
HXLINE( 734)		Float currentTime = (time - this->animateScrollY->startTime);
HXLINE( 735)		Float ratio = (currentTime / this->animateScrollY->duration);
HXLINE( 736)		ratio = ::motion::easing::IEasing_obj::calculate(this->_animateScrollYEase,ratio);
HXLINE( 737)		bool _hx_tmp;
HXDLIN( 737)		if ((ratio >= this->animateScrollYEndRatio)) {
HXLINE( 737)			_hx_tmp = (currentTime < this->animateScrollY->duration);
            		}
            		else {
HXLINE( 737)			_hx_tmp = false;
            		}
HXDLIN( 737)		if (_hx_tmp) {
HXLINE( 741)			if (!(this->elasticEdges)) {
HXLINE( 742)				if ((this->scrollY < this->minScrollY)) {
HXLINE( 743)					this->set_scrollY(this->minScrollY);
            				}
            				else {
HXLINE( 744)					if ((this->scrollY > this->maxScrollY)) {
HXLINE( 745)						this->set_scrollY(this->maxScrollY);
            					}
            				}
            			}
HXLINE( 748)			::motion::Actuate_obj::stop(this->animateScrollY,null(),false,false);
HXLINE( 749)			this->animateScrollY = null();
HXLINE( 750)			this->_animateScrollYEase = null();
HXLINE( 751)			this->finishScrollY();
HXLINE( 752)			return;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Scroller_obj,animateScrollY_endRatio_onUpdate,(void))

void Scroller_obj::animateScrollY_onComplete(){
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_756_animateScrollY_onComplete)
HXLINE( 757)		this->animateScrollY = null();
HXLINE( 758)		this->_animateScrollYEase = null();
HXLINE( 759)		this->finishScrollY();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Scroller_obj,animateScrollY_onComplete,(void))

void Scroller_obj::cleanupAfterDrag(){
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_762_cleanupAfterDrag)
HXLINE( 763)		if ((this->touchPointID == -1)) {
HXLINE( 764)			return;
            		}
HXLINE( 766)		int _hx_tmp;
HXDLIN( 766)		if (this->scrolling) {
HXLINE( 766)			_hx_tmp = this->touchPointID;
            		}
            		else {
HXLINE( 766)			_hx_tmp = -1;
            		}
HXDLIN( 766)		this->previousTouchPointID = _hx_tmp;
HXLINE( 767)		this->touchPointID = -1;
HXLINE( 768)		this->target->removeEventListener(HX_("removedFromStage",34,21,76,ba),this->target_removedFromStageHandler_dyn(),null());
HXLINE( 769)		if (::hx::IsNotNull( this->target->stage )) {
HXLINE( 770)			this->target->stage->removeEventListener(HX_("mouseMove",d6,9b,b5,f4),this->target_stage_mouseMoveHandler_dyn(),null());
HXLINE( 771)			this->target->stage->removeEventListener(HX_("mouseUp",e0,f3,72,c0),this->target_stage_mouseUpHandler_dyn(),null());
HXLINE( 772)			this->target->stage->removeEventListener(HX_("touchMove",70,72,cd,0d),this->target_stage_touchMoveHandler_dyn(),null());
HXLINE( 773)			this->target->stage->removeEventListener(HX_("touchEnd",5c,c5,09,00),this->target_stage_touchEndHandler_dyn(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Scroller_obj,cleanupAfterDrag,(void))

void Scroller_obj::target_removedFromStageHandler( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_778_target_removedFromStageHandler)
HXDLIN( 778)		this->cleanupAfterDrag();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scroller_obj,target_removedFromStageHandler,(void))

void Scroller_obj::touchBegin(int touchPointID,Float stageX,Float stageY, ::Dynamic simulatedTouch){
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_781_touchBegin)
HXLINE( 782)		bool _hx_tmp;
HXDLIN( 782)		if (( (bool)(simulatedTouch) )) {
HXLINE( 782)			_hx_tmp = !(this->simulateTouch);
            		}
            		else {
HXLINE( 782)			_hx_tmp = false;
            		}
HXDLIN( 782)		if (_hx_tmp) {
HXLINE( 783)			return;
            		}
HXLINE( 785)		if ((this->touchPointID != -1)) {
HXLINE( 787)			return;
            		}
HXLINE( 790)		if (::hx::IsNotNull( this->animateScrollX )) {
HXLINE( 791)			::motion::Actuate_obj::stop(this->animateScrollX,null(),false,false);
HXLINE( 792)			this->animateScrollX = null();
HXLINE( 793)			this->_animateScrollXEase = null();
            		}
HXLINE( 795)		if (::hx::IsNotNull( this->animateScrollY )) {
HXLINE( 796)			::motion::Actuate_obj::stop(this->animateScrollY,null(),false,false);
HXLINE( 797)			this->animateScrollY = null();
HXLINE( 798)			this->_animateScrollYEase = null();
            		}
HXLINE( 801)		this->target->addEventListener(HX_("removedFromStage",34,21,76,ba),this->target_removedFromStageHandler_dyn(),false,0,true);
HXLINE( 802)		this->target->stage->addEventListener(HX_("mouseMove",d6,9b,b5,f4),this->target_stage_mouseMoveHandler_dyn(),false,0,true);
HXLINE( 803)		this->target->stage->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->target_stage_mouseUpHandler_dyn(),false,0,true);
HXLINE( 804)		this->target->stage->addEventListener(HX_("touchMove",70,72,cd,0d),this->target_stage_touchMoveHandler_dyn(),false,0,true);
HXLINE( 805)		this->target->stage->addEventListener(HX_("touchEnd",5c,c5,09,00),this->target_stage_touchEndHandler_dyn(),false,0,true);
HXLINE( 806)		if (::Std_obj::isOfType(this->target,( ( ::Dynamic)(::hx::ClassOf< ::openfl::display::DisplayObjectContainer >()) ))) {
HXLINE( 807)			 ::openfl::display::DisplayObjectContainer container = ::hx::TCast<  ::openfl::display::DisplayObjectContainer >::cast(this->target);
HXLINE( 810)			if (this->scrolling) {
HXLINE( 811)				container->mouseChildren = false;
            			}
            		}
HXLINE( 814)		this->previousTouchPointID = -1;
HXLINE( 815)		this->touchPointID = touchPointID;
HXLINE( 816)		this->startTouchX = stageX;
HXLINE( 817)		this->startTouchY = stageY;
HXLINE( 818)		this->startScrollX = this->scrollX;
HXLINE( 819)		this->startScrollY = this->scrollY;
HXLINE( 820)		this->savedScrollMoves = ::Array_obj< Float >::__new(0);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Scroller_obj,touchBegin,(void))

void Scroller_obj::touchMove(int touchPointID,Float stageX,Float stageY){
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_823_touchMove)
HXLINE( 824)		if ((this->touchPointID != touchPointID)) {
HXLINE( 825)			return;
            		}
HXLINE( 828)		Float touchOffsetX = (stageX - this->startTouchX);
HXLINE( 829)		Float touchOffsetY = (stageY - this->startTouchY);
HXLINE( 830)		Float scaleX = ((Float)1.0);
HXLINE( 831)		Float scaleY = ((Float)1.0);
HXLINE( 832)		 ::openfl::display::InteractiveObject current = this->target;
HXLINE( 833)		while(::hx::IsNotEq( current,current->stage )){
HXLINE( 834)			scaleX = (scaleX / current->get_scaleX());
HXLINE( 835)			scaleY = (scaleY / current->get_scaleY());
HXLINE( 836)			current = current->parent;
            		}
HXLINE( 838)		touchOffsetX = (touchOffsetX * scaleX);
HXLINE( 839)		touchOffsetY = (touchOffsetY * scaleY);
HXLINE( 841)		bool canDragX = this->canDragX();
HXLINE( 842)		bool canDragY = this->canDragY();
HXLINE( 843)		bool _hx_tmp;
HXDLIN( 843)		bool _hx_tmp1;
HXDLIN( 843)		if (!(this->draggingX)) {
HXLINE( 843)			_hx_tmp1 = canDragX;
            		}
            		else {
HXLINE( 843)			_hx_tmp1 = false;
            		}
HXDLIN( 843)		if (_hx_tmp1) {
HXLINE( 843)			_hx_tmp = (::Math_obj::abs(touchOffsetX) > this->minDragDistance);
            		}
            		else {
HXLINE( 843)			_hx_tmp = false;
            		}
HXDLIN( 843)		if (_hx_tmp) {
HXLINE( 844)			this->startTouchX = stageX;
HXLINE( 845)			touchOffsetX = ((Float)0.0);
HXLINE( 846)			this->draggingX = true;
HXLINE( 850)			if (!(this->draggingY)) {
HXLINE( 851)				this->startScroll();
            			}
            		}
HXLINE( 854)		bool _hx_tmp2;
HXDLIN( 854)		bool _hx_tmp3;
HXDLIN( 854)		if (!(this->draggingY)) {
HXLINE( 854)			_hx_tmp3 = canDragY;
            		}
            		else {
HXLINE( 854)			_hx_tmp3 = false;
            		}
HXDLIN( 854)		if (_hx_tmp3) {
HXLINE( 854)			_hx_tmp2 = (::Math_obj::abs(touchOffsetY) > this->minDragDistance);
            		}
            		else {
HXLINE( 854)			_hx_tmp2 = false;
            		}
HXDLIN( 854)		if (_hx_tmp2) {
HXLINE( 855)			this->startTouchY = stageY;
HXLINE( 856)			touchOffsetY = ((Float)0.0);
HXLINE( 857)			this->draggingY = true;
HXLINE( 858)			if (!(this->draggingX)) {
HXLINE( 859)				this->startScroll();
            			}
            		}
HXLINE( 863)		bool _hx_tmp4;
HXDLIN( 863)		if (!(this->draggingX)) {
HXLINE( 863)			_hx_tmp4 = !(this->draggingY);
            		}
            		else {
HXLINE( 863)			_hx_tmp4 = false;
            		}
HXDLIN( 863)		if (_hx_tmp4) {
HXLINE( 864)			return;
            		}
HXLINE( 867)		Float scrollX = this->startScrollX;
HXLINE( 868)		if (canDragX) {
HXLINE( 869)			scrollX = (scrollX - touchOffsetX);
HXLINE( 870)			if (this->elasticEdges) {
HXLINE( 871)				if ((scrollX < this->minScrollX)) {
HXLINE( 872)					bool _hx_tmp;
HXDLIN( 872)					if (!((this->maxScrollX > this->minScrollX))) {
HXLINE( 872)						_hx_tmp = this->forceElasticLeft;
            					}
            					else {
HXLINE( 872)						_hx_tmp = true;
            					}
HXDLIN( 872)					if (_hx_tmp) {
HXLINE( 873)						scrollX = (scrollX - ((scrollX - this->minScrollX) * (((Float)1.0) - this->elasticity)));
            					}
            					else {
HXLINE( 875)						scrollX = this->minScrollX;
            					}
            				}
            				else {
HXLINE( 877)					if ((scrollX > this->maxScrollX)) {
HXLINE( 878)						bool _hx_tmp;
HXDLIN( 878)						if (!((this->maxScrollX > this->minScrollX))) {
HXLINE( 878)							_hx_tmp = this->forceElasticRight;
            						}
            						else {
HXLINE( 878)							_hx_tmp = true;
            						}
HXDLIN( 878)						if (_hx_tmp) {
HXLINE( 879)							scrollX = (scrollX - ((scrollX - this->maxScrollX) * (((Float)1.0) - this->elasticity)));
            						}
            						else {
HXLINE( 881)							scrollX = this->maxScrollX;
            						}
            					}
            				}
            			}
            			else {
HXLINE( 885)				if ((scrollX < this->minScrollX)) {
HXLINE( 886)					scrollX = this->minScrollX;
            				}
            				else {
HXLINE( 887)					if ((scrollX > this->maxScrollX)) {
HXLINE( 888)						scrollX = this->maxScrollX;
            					}
            				}
            			}
            		}
HXLINE( 892)		Float scrollY = this->startScrollY;
HXLINE( 893)		if (canDragY) {
HXLINE( 894)			scrollY = (scrollY - touchOffsetY);
HXLINE( 895)			if (this->elasticEdges) {
HXLINE( 896)				if ((scrollY < this->minScrollY)) {
HXLINE( 897)					bool _hx_tmp;
HXDLIN( 897)					if (!((this->maxScrollY > this->minScrollY))) {
HXLINE( 897)						_hx_tmp = this->forceElasticTop;
            					}
            					else {
HXLINE( 897)						_hx_tmp = true;
            					}
HXDLIN( 897)					if (_hx_tmp) {
HXLINE( 898)						scrollY = (scrollY - ((scrollY - this->minScrollY) * (((Float)1.0) - this->elasticity)));
            					}
            					else {
HXLINE( 900)						scrollY = this->minScrollY;
            					}
            				}
            				else {
HXLINE( 902)					if ((scrollY > this->maxScrollY)) {
HXLINE( 903)						bool _hx_tmp;
HXDLIN( 903)						if (!((this->maxScrollY > this->minScrollY))) {
HXLINE( 903)							_hx_tmp = this->forceElasticBottom;
            						}
            						else {
HXLINE( 903)							_hx_tmp = true;
            						}
HXDLIN( 903)						if (_hx_tmp) {
HXLINE( 904)							scrollY = (scrollY - ((scrollY - this->maxScrollY) * (((Float)1.0) - this->elasticity)));
            						}
            						else {
HXLINE( 906)							scrollY = this->maxScrollY;
            						}
            					}
            				}
            			}
            			else {
HXLINE( 910)				if ((scrollY < this->minScrollY)) {
HXLINE( 911)					scrollY = this->minScrollY;
            				}
            				else {
HXLINE( 912)					if ((scrollY > this->maxScrollY)) {
HXLINE( 913)						scrollY = this->maxScrollY;
            					}
            				}
            			}
            		}
HXLINE( 918)		this->set_scrollX(scrollX);
HXLINE( 919)		this->set_scrollY(scrollY);
HXLINE( 921)		if ((this->savedScrollMoves->length > 60)) {
HXLINE( 922)			this->savedScrollMoves->resize(30);
            		}
HXLINE( 925)		this->savedScrollMoves->push(scrollX);
HXLINE( 926)		this->savedScrollMoves->push(scrollY);
HXLINE( 927)		::Array< Float > _hx_tmp5 = this->savedScrollMoves;
HXDLIN( 927)		_hx_tmp5->push(::openfl::Lib_obj::getTimer());
            	}


HX_DEFINE_DYNAMIC_FUNC3(Scroller_obj,touchMove,(void))

void Scroller_obj::touchEnd(int touchPointID){
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_930_touchEnd)
HXLINE( 931)		if ((this->touchPointID != touchPointID)) {
HXLINE( 932)			return;
            		}
HXLINE( 935)		this->cleanupAfterDrag();
HXLINE( 937)		bool finishingX = !(this->canDragX());
HXLINE( 938)		bool finishingY = !(this->canDragY());
HXLINE( 939)		bool _hx_tmp;
HXDLIN( 939)		if (!((this->scrollX < this->minScrollX))) {
HXLINE( 939)			_hx_tmp = (this->scrollX > this->maxScrollX);
            		}
            		else {
HXLINE( 939)			_hx_tmp = true;
            		}
HXDLIN( 939)		if (_hx_tmp) {
HXLINE( 940)			finishingX = true;
HXLINE( 941)			this->finishScrollX();
            		}
HXLINE( 943)		bool _hx_tmp1;
HXDLIN( 943)		if (!((this->scrollY < this->minScrollY))) {
HXLINE( 943)			_hx_tmp1 = (this->scrollY > this->maxScrollY);
            		}
            		else {
HXLINE( 943)			_hx_tmp1 = true;
            		}
HXDLIN( 943)		if (_hx_tmp1) {
HXLINE( 944)			finishingY = true;
HXLINE( 945)			this->finishScrollY();
            		}
HXLINE( 948)		bool _hx_tmp2;
HXDLIN( 948)		if (finishingX) {
HXLINE( 948)			_hx_tmp2 = finishingY;
            		}
            		else {
HXLINE( 948)			_hx_tmp2 = false;
            		}
HXDLIN( 948)		if (_hx_tmp2) {
HXLINE( 949)			return;
            		}
HXLINE( 952)		bool _hx_tmp3;
HXDLIN( 952)		if (!(this->draggingX)) {
HXLINE( 952)			_hx_tmp3 = !(this->draggingY);
            		}
            		else {
HXLINE( 952)			_hx_tmp3 = false;
            		}
HXDLIN( 952)		if (_hx_tmp3) {
HXLINE( 953)			return;
            		}
HXLINE( 957)		int targetTime = (::openfl::Lib_obj::getTimer() - 100);
HXLINE( 958)		int endIndex = (this->savedScrollMoves->length - 1);
HXLINE( 959)		int startIndex = endIndex;
HXLINE( 960)		int i = endIndex;
HXLINE( 961)		while(true){
HXLINE( 961)			bool _hx_tmp;
HXDLIN( 961)			if ((endIndex > 0)) {
HXLINE( 961)				_hx_tmp = (this->savedScrollMoves->__get(i) > targetTime);
            			}
            			else {
HXLINE( 961)				_hx_tmp = false;
            			}
HXDLIN( 961)			if (!(_hx_tmp)) {
HXLINE( 961)				goto _hx_goto_28;
            			}
HXLINE( 962)			startIndex = i;
HXLINE( 963)			i = (i - 3);
            		}
            		_hx_goto_28:;
HXLINE( 967)		if ((startIndex == endIndex)) {
HXLINE( 968)			bool _hx_tmp;
HXDLIN( 968)			if (!(finishingX)) {
HXLINE( 968)				_hx_tmp = this->draggingX;
            			}
            			else {
HXLINE( 968)				_hx_tmp = false;
            			}
HXDLIN( 968)			if (_hx_tmp) {
HXLINE( 969)				this->finishScrollX();
            			}
HXLINE( 971)			bool _hx_tmp1;
HXDLIN( 971)			if (!(finishingY)) {
HXLINE( 971)				_hx_tmp1 = this->draggingY;
            			}
            			else {
HXLINE( 971)				_hx_tmp1 = false;
            			}
HXDLIN( 971)			if (_hx_tmp1) {
HXLINE( 972)				this->finishScrollY();
            			}
HXLINE( 974)			return;
            		}
HXLINE( 977)		Float timeOffset = (this->savedScrollMoves->__get(endIndex) - this->savedScrollMoves->__get(startIndex));
HXLINE( 978)		 ::Dynamic velocityX = null();
HXLINE( 979)		 ::Dynamic velocityY = null();
HXLINE( 980)		bool _hx_tmp4;
HXDLIN( 980)		if (!(finishingX)) {
HXLINE( 980)			_hx_tmp4 = this->draggingX;
            		}
            		else {
HXLINE( 980)			_hx_tmp4 = false;
            		}
HXDLIN( 980)		if (_hx_tmp4) {
HXLINE( 981)			Float movedX = (this->scrollX - this->savedScrollMoves->__get((startIndex - 2)));
HXLINE( 982)			velocityX = (-(movedX) / timeOffset);
            		}
HXLINE( 984)		bool _hx_tmp5;
HXDLIN( 984)		if (!(finishingY)) {
HXLINE( 984)			_hx_tmp5 = this->draggingY;
            		}
            		else {
HXLINE( 984)			_hx_tmp5 = false;
            		}
HXDLIN( 984)		if (_hx_tmp5) {
HXLINE( 985)			Float movedY = (this->scrollY - this->savedScrollMoves->__get((startIndex - 1)));
HXLINE( 986)			velocityY = (-(movedY) / timeOffset);
            		}
HXLINE( 989)		bool _hx_tmp6;
HXDLIN( 989)		if (::hx::IsNull( velocityX )) {
HXLINE( 989)			_hx_tmp6 = ::hx::IsNotNull( velocityY );
            		}
            		else {
HXLINE( 989)			_hx_tmp6 = true;
            		}
HXDLIN( 989)		if (_hx_tmp6) {
HXLINE( 990)			this->throwWithVelocity(velocityX,velocityY);
            		}
HXLINE( 992)		bool _hx_tmp7;
HXDLIN( 992)		if (::hx::IsNull( velocityX )) {
HXLINE( 992)			_hx_tmp7 = this->draggingX;
            		}
            		else {
HXLINE( 992)			_hx_tmp7 = false;
            		}
HXDLIN( 992)		if (_hx_tmp7) {
HXLINE( 993)			this->finishScrollX();
            		}
HXLINE( 995)		bool _hx_tmp8;
HXDLIN( 995)		if (::hx::IsNull( velocityY )) {
HXLINE( 995)			_hx_tmp8 = this->draggingY;
            		}
            		else {
HXLINE( 995)			_hx_tmp8 = false;
            		}
HXDLIN( 995)		if (_hx_tmp8) {
HXLINE( 996)			this->draggingY = false;
HXLINE( 997)			this->finishScrollY();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scroller_obj,touchEnd,(void))

bool Scroller_obj::canDragX(){
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_1002_canDragX)
HXDLIN(1002)		if (this->enabledX) {
HXDLIN(1002)			bool _hx_tmp;
HXDLIN(1002)			if (!((this->maxScrollX > this->minScrollX))) {
HXDLIN(1002)				_hx_tmp = this->forceElasticLeft;
            			}
            			else {
HXDLIN(1002)				_hx_tmp = true;
            			}
HXDLIN(1002)			if (!(_hx_tmp)) {
HXDLIN(1002)				return this->forceElasticRight;
            			}
            			else {
HXDLIN(1002)				return true;
            			}
            		}
            		else {
HXDLIN(1002)			return false;
            		}
HXDLIN(1002)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Scroller_obj,canDragX,return )

bool Scroller_obj::canDragY(){
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_1006_canDragY)
HXDLIN(1006)		if (this->enabledY) {
HXDLIN(1006)			bool _hx_tmp;
HXDLIN(1006)			if (!((this->maxScrollY > this->minScrollY))) {
HXDLIN(1006)				_hx_tmp = this->forceElasticTop;
            			}
            			else {
HXDLIN(1006)				_hx_tmp = true;
            			}
HXDLIN(1006)			if (!(_hx_tmp)) {
HXDLIN(1006)				return this->forceElasticBottom;
            			}
            			else {
HXDLIN(1006)				return true;
            			}
            		}
            		else {
HXDLIN(1006)			return false;
            		}
HXDLIN(1006)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Scroller_obj,canDragY,return )

void Scroller_obj::target_touchBeginCaptureHandler( ::openfl::events::TouchEvent event){
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_1009_target_touchBeginCaptureHandler)
HXLINE(1010)		if (!(this->scrolling)) {
HXLINE(1011)			return;
            		}
HXLINE(1013)		event->stopImmediatePropagation();
HXLINE(1014)		this->target_touchBeginHandler(event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scroller_obj,target_touchBeginCaptureHandler,(void))

void Scroller_obj::target_touchBeginHandler( ::openfl::events::TouchEvent event){
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_1018_target_touchBeginHandler)
HXDLIN(1018)		this->touchBegin(event->touchPointID,event->stageX,event->stageY,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scroller_obj,target_touchBeginHandler,(void))

void Scroller_obj::target_mouseDownCaptureHandler( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_1021_target_mouseDownCaptureHandler)
HXLINE(1022)		if (!(this->scrolling)) {
HXLINE(1023)			return;
            		}
HXLINE(1025)		event->stopImmediatePropagation();
HXLINE(1026)		this->target_mouseDownHandler(event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scroller_obj,target_mouseDownCaptureHandler,(void))

void Scroller_obj::target_mouseDownHandler( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_1030_target_mouseDownHandler)
HXDLIN(1030)		this->touchBegin(::feathers::utils::Scroller_obj::TOUCH_ID_MOUSE,event->stageX,event->stageY,true);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scroller_obj,target_mouseDownHandler,(void))

void Scroller_obj::target_stage_touchMoveHandler( ::openfl::events::TouchEvent event){
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_1034_target_stage_touchMoveHandler)
HXDLIN(1034)		this->touchMove(event->touchPointID,event->stageX,event->stageY);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scroller_obj,target_stage_touchMoveHandler,(void))

void Scroller_obj::target_stage_mouseMoveHandler( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_1038_target_stage_mouseMoveHandler)
HXDLIN(1038)		this->touchMove(::feathers::utils::Scroller_obj::TOUCH_ID_MOUSE,event->stageX,event->stageY);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scroller_obj,target_stage_mouseMoveHandler,(void))

void Scroller_obj::target_stage_touchEndHandler( ::openfl::events::TouchEvent event){
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_1042_target_stage_touchEndHandler)
HXDLIN(1042)		this->touchEnd(event->touchPointID);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scroller_obj,target_stage_touchEndHandler,(void))

void Scroller_obj::target_clickCaptureHandler( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_1045_target_clickCaptureHandler)
HXLINE(1046)		if ((this->previousTouchPointID == -1)) {
HXLINE(1047)			return;
            		}
HXLINE(1049)		this->previousTouchPointID = -1;
HXLINE(1050)		event->stopImmediatePropagation();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scroller_obj,target_clickCaptureHandler,(void))

void Scroller_obj::target_touchTapCaptureHandler( ::openfl::events::TouchEvent event){
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_1053_target_touchTapCaptureHandler)
HXLINE(1054)		if ((this->previousTouchPointID != event->touchPointID)) {
HXLINE(1055)			return;
            		}
HXLINE(1057)		if (event->isPrimaryTouchPoint) {
HXLINE(1059)			this->previousTouchPointID = ::feathers::utils::Scroller_obj::TOUCH_ID_MOUSE;
HXLINE(1060)			return;
            		}
HXLINE(1062)		this->previousTouchPointID = -1;
HXLINE(1063)		event->stopImmediatePropagation();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scroller_obj,target_touchTapCaptureHandler,(void))

void Scroller_obj::target_stage_mouseUpHandler( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_1067_target_stage_mouseUpHandler)
HXDLIN(1067)		this->touchEnd(::feathers::utils::Scroller_obj::TOUCH_ID_MOUSE);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scroller_obj,target_stage_mouseUpHandler,(void))

void Scroller_obj::target_mouseWheelHandler( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_1070_target_mouseWheelHandler)
HXLINE(1072)		Float targetScrollY = this->scrollY;
HXLINE(1073)		if (::hx::IsNotNull( this->animateScrollY )) {
HXLINE(1074)			targetScrollY = this->targetScrollY;
            		}
HXLINE(1076)		event->stopImmediatePropagation();
HXLINE(1077)		this->stop();
HXLINE(1078)		Float newScrollY = (targetScrollY - (( (Float)(event->delta) ) * this->mouseWheelDelta));
HXLINE(1079)		if ((newScrollY < this->minScrollY)) {
HXLINE(1080)			newScrollY = this->minScrollY;
            		}
            		else {
HXLINE(1081)			if ((newScrollY > this->maxScrollY)) {
HXLINE(1082)				newScrollY = this->maxScrollY;
            			}
            		}
HXLINE(1084)		if ((this->scrollY == newScrollY)) {
HXLINE(1085)			return;
            		}
HXLINE(1087)		if ((this->mouseWheelDuration > ((Float)0.0))) {
HXLINE(1088)			this->throwTo(null(),newScrollY,this->mouseWheelDuration,this->ease);
            		}
            		else {
HXLINE(1090)			this->set_scrollY(newScrollY);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scroller_obj,target_mouseWheelHandler,(void))

Float Scroller_obj::MINIMUM_VELOCITY;

int Scroller_obj::TOUCH_ID_MOUSE;


::hx::ObjectPtr< Scroller_obj > Scroller_obj::__new( ::openfl::display::InteractiveObject target) {
	::hx::ObjectPtr< Scroller_obj > __this = new Scroller_obj();
	__this->__construct(target);
	return __this;
}

::hx::ObjectPtr< Scroller_obj > Scroller_obj::__alloc(::hx::Ctx *_hx_ctx, ::openfl::display::InteractiveObject target) {
	Scroller_obj *__this = (Scroller_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Scroller_obj), true, "feathers.utils.Scroller"));
	*(void **)__this = Scroller_obj::_hx_vtable;
	__this->__construct(target);
	return __this;
}

Scroller_obj::Scroller_obj()
{
}

void Scroller_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Scroller);
	HX_MARK_MEMBER_NAME(enabledX,"enabledX");
	HX_MARK_MEMBER_NAME(enabledY,"enabledY");
	HX_MARK_MEMBER_NAME(scrollX,"scrollX");
	HX_MARK_MEMBER_NAME(scrollY,"scrollY");
	HX_MARK_MEMBER_NAME(minScrollX,"minScrollX");
	HX_MARK_MEMBER_NAME(minScrollY,"minScrollY");
	HX_MARK_MEMBER_NAME(maxScrollX,"maxScrollX");
	HX_MARK_MEMBER_NAME(maxScrollY,"maxScrollY");
	HX_MARK_MEMBER_NAME(visibleWidth,"visibleWidth");
	HX_MARK_MEMBER_NAME(visibleHeight,"visibleHeight");
	HX_MARK_MEMBER_NAME(contentWidth,"contentWidth");
	HX_MARK_MEMBER_NAME(contentHeight,"contentHeight");
	HX_MARK_MEMBER_NAME(scrolling,"scrolling");
	HX_MARK_MEMBER_NAME(draggingX,"draggingX");
	HX_MARK_MEMBER_NAME(draggingY,"draggingY");
	HX_MARK_MEMBER_NAME(minDragDistance,"minDragDistance");
	HX_MARK_MEMBER_NAME(elasticEdges,"elasticEdges");
	HX_MARK_MEMBER_NAME(forceElasticTop,"forceElasticTop");
	HX_MARK_MEMBER_NAME(forceElasticRight,"forceElasticRight");
	HX_MARK_MEMBER_NAME(forceElasticBottom,"forceElasticBottom");
	HX_MARK_MEMBER_NAME(forceElasticLeft,"forceElasticLeft");
	HX_MARK_MEMBER_NAME(elasticity,"elasticity");
	HX_MARK_MEMBER_NAME(throwElasticity,"throwElasticity");
	HX_MARK_MEMBER_NAME(elasticSnapDuration,"elasticSnapDuration");
	HX_MARK_MEMBER_NAME(ease,"ease");
	HX_MARK_MEMBER_NAME(bounceEase,"bounceEase");
	HX_MARK_MEMBER_NAME(mouseWheelDelta,"mouseWheelDelta");
	HX_MARK_MEMBER_NAME(mouseWheelDuration,"mouseWheelDuration");
	HX_MARK_MEMBER_NAME(simulateTouch,"simulateTouch");
	HX_MARK_MEMBER_NAME(decelerationRate,"decelerationRate");
	HX_MARK_MEMBER_NAME(_logDecelerationRate,"_logDecelerationRate");
	HX_MARK_MEMBER_NAME(_fixedThrowDuration,"_fixedThrowDuration");
	HX_MARK_MEMBER_NAME(restoreMouseChildren,"restoreMouseChildren");
	HX_MARK_MEMBER_NAME(touchPointID,"touchPointID");
	HX_MARK_MEMBER_NAME(previousTouchPointID,"previousTouchPointID");
	HX_MARK_MEMBER_NAME(startTouchX,"startTouchX");
	HX_MARK_MEMBER_NAME(startTouchY,"startTouchY");
	HX_MARK_MEMBER_NAME(startScrollX,"startScrollX");
	HX_MARK_MEMBER_NAME(startScrollY,"startScrollY");
	HX_MARK_MEMBER_NAME(savedScrollMoves,"savedScrollMoves");
	HX_MARK_MEMBER_NAME(animateScrollX,"animateScrollX");
	HX_MARK_MEMBER_NAME(animateScrollY,"animateScrollY");
	HX_MARK_MEMBER_NAME(_animateScrollXEase,"_animateScrollXEase");
	HX_MARK_MEMBER_NAME(_animateScrollYEase,"_animateScrollYEase");
	HX_MARK_MEMBER_NAME(animateScrollXEndRatio,"animateScrollXEndRatio");
	HX_MARK_MEMBER_NAME(animateScrollYEndRatio,"animateScrollYEndRatio");
	HX_MARK_MEMBER_NAME(targetScrollX,"targetScrollX");
	HX_MARK_MEMBER_NAME(targetScrollY,"targetScrollY");
	HX_MARK_MEMBER_NAME(snappingToEdge,"snappingToEdge");
	HX_MARK_MEMBER_NAME(target,"target");
	 ::openfl::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Scroller_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(enabledX,"enabledX");
	HX_VISIT_MEMBER_NAME(enabledY,"enabledY");
	HX_VISIT_MEMBER_NAME(scrollX,"scrollX");
	HX_VISIT_MEMBER_NAME(scrollY,"scrollY");
	HX_VISIT_MEMBER_NAME(minScrollX,"minScrollX");
	HX_VISIT_MEMBER_NAME(minScrollY,"minScrollY");
	HX_VISIT_MEMBER_NAME(maxScrollX,"maxScrollX");
	HX_VISIT_MEMBER_NAME(maxScrollY,"maxScrollY");
	HX_VISIT_MEMBER_NAME(visibleWidth,"visibleWidth");
	HX_VISIT_MEMBER_NAME(visibleHeight,"visibleHeight");
	HX_VISIT_MEMBER_NAME(contentWidth,"contentWidth");
	HX_VISIT_MEMBER_NAME(contentHeight,"contentHeight");
	HX_VISIT_MEMBER_NAME(scrolling,"scrolling");
	HX_VISIT_MEMBER_NAME(draggingX,"draggingX");
	HX_VISIT_MEMBER_NAME(draggingY,"draggingY");
	HX_VISIT_MEMBER_NAME(minDragDistance,"minDragDistance");
	HX_VISIT_MEMBER_NAME(elasticEdges,"elasticEdges");
	HX_VISIT_MEMBER_NAME(forceElasticTop,"forceElasticTop");
	HX_VISIT_MEMBER_NAME(forceElasticRight,"forceElasticRight");
	HX_VISIT_MEMBER_NAME(forceElasticBottom,"forceElasticBottom");
	HX_VISIT_MEMBER_NAME(forceElasticLeft,"forceElasticLeft");
	HX_VISIT_MEMBER_NAME(elasticity,"elasticity");
	HX_VISIT_MEMBER_NAME(throwElasticity,"throwElasticity");
	HX_VISIT_MEMBER_NAME(elasticSnapDuration,"elasticSnapDuration");
	HX_VISIT_MEMBER_NAME(ease,"ease");
	HX_VISIT_MEMBER_NAME(bounceEase,"bounceEase");
	HX_VISIT_MEMBER_NAME(mouseWheelDelta,"mouseWheelDelta");
	HX_VISIT_MEMBER_NAME(mouseWheelDuration,"mouseWheelDuration");
	HX_VISIT_MEMBER_NAME(simulateTouch,"simulateTouch");
	HX_VISIT_MEMBER_NAME(decelerationRate,"decelerationRate");
	HX_VISIT_MEMBER_NAME(_logDecelerationRate,"_logDecelerationRate");
	HX_VISIT_MEMBER_NAME(_fixedThrowDuration,"_fixedThrowDuration");
	HX_VISIT_MEMBER_NAME(restoreMouseChildren,"restoreMouseChildren");
	HX_VISIT_MEMBER_NAME(touchPointID,"touchPointID");
	HX_VISIT_MEMBER_NAME(previousTouchPointID,"previousTouchPointID");
	HX_VISIT_MEMBER_NAME(startTouchX,"startTouchX");
	HX_VISIT_MEMBER_NAME(startTouchY,"startTouchY");
	HX_VISIT_MEMBER_NAME(startScrollX,"startScrollX");
	HX_VISIT_MEMBER_NAME(startScrollY,"startScrollY");
	HX_VISIT_MEMBER_NAME(savedScrollMoves,"savedScrollMoves");
	HX_VISIT_MEMBER_NAME(animateScrollX,"animateScrollX");
	HX_VISIT_MEMBER_NAME(animateScrollY,"animateScrollY");
	HX_VISIT_MEMBER_NAME(_animateScrollXEase,"_animateScrollXEase");
	HX_VISIT_MEMBER_NAME(_animateScrollYEase,"_animateScrollYEase");
	HX_VISIT_MEMBER_NAME(animateScrollXEndRatio,"animateScrollXEndRatio");
	HX_VISIT_MEMBER_NAME(animateScrollYEndRatio,"animateScrollYEndRatio");
	HX_VISIT_MEMBER_NAME(targetScrollX,"targetScrollX");
	HX_VISIT_MEMBER_NAME(targetScrollY,"targetScrollY");
	HX_VISIT_MEMBER_NAME(snappingToEdge,"snappingToEdge");
	HX_VISIT_MEMBER_NAME(target,"target");
	 ::openfl::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Scroller_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"ease") ) { return ::hx::Val( ease ); }
		if (HX_FIELD_EQ(inName,"stop") ) { return ::hx::Val( stop_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { return ::hx::Val( target ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollX") ) { return ::hx::Val( scrollX ); }
		if (HX_FIELD_EQ(inName,"scrollY") ) { return ::hx::Val( scrollY ); }
		if (HX_FIELD_EQ(inName,"throwTo") ) { return ::hx::Val( throwTo_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"enabledX") ) { return ::hx::Val( enabledX ); }
		if (HX_FIELD_EQ(inName,"enabledY") ) { return ::hx::Val( enabledY ); }
		if (HX_FIELD_EQ(inName,"touchEnd") ) { return ::hx::Val( touchEnd_dyn() ); }
		if (HX_FIELD_EQ(inName,"canDragX") ) { return ::hx::Val( canDragX_dyn() ); }
		if (HX_FIELD_EQ(inName,"canDragY") ) { return ::hx::Val( canDragY_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scrolling") ) { return ::hx::Val( scrolling ); }
		if (HX_FIELD_EQ(inName,"draggingX") ) { return ::hx::Val( draggingX ); }
		if (HX_FIELD_EQ(inName,"draggingY") ) { return ::hx::Val( draggingY ); }
		if (HX_FIELD_EQ(inName,"touchMove") ) { return ::hx::Val( touchMove_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"minScrollX") ) { return ::hx::Val( minScrollX ); }
		if (HX_FIELD_EQ(inName,"minScrollY") ) { return ::hx::Val( minScrollY ); }
		if (HX_FIELD_EQ(inName,"maxScrollX") ) { return ::hx::Val( maxScrollX ); }
		if (HX_FIELD_EQ(inName,"maxScrollY") ) { return ::hx::Val( maxScrollY ); }
		if (HX_FIELD_EQ(inName,"elasticity") ) { return ::hx::Val( elasticity ); }
		if (HX_FIELD_EQ(inName,"bounceEase") ) { return ::hx::Val( bounceEase ); }
		if (HX_FIELD_EQ(inName,"set_target") ) { return ::hx::Val( set_target_dyn() ); }
		if (HX_FIELD_EQ(inName,"touchBegin") ) { return ::hx::Val( touchBegin_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"set_scrollX") ) { return ::hx::Val( set_scrollX_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollY") ) { return ::hx::Val( set_scrollY_dyn() ); }
		if (HX_FIELD_EQ(inName,"startTouchX") ) { return ::hx::Val( startTouchX ); }
		if (HX_FIELD_EQ(inName,"startTouchY") ) { return ::hx::Val( startTouchY ); }
		if (HX_FIELD_EQ(inName,"startScroll") ) { return ::hx::Val( startScroll_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"visibleWidth") ) { return ::hx::Val( visibleWidth ); }
		if (HX_FIELD_EQ(inName,"contentWidth") ) { return ::hx::Val( contentWidth ); }
		if (HX_FIELD_EQ(inName,"elasticEdges") ) { return ::hx::Val( elasticEdges ); }
		if (HX_FIELD_EQ(inName,"touchPointID") ) { return ::hx::Val( touchPointID ); }
		if (HX_FIELD_EQ(inName,"startScrollX") ) { return ::hx::Val( startScrollX ); }
		if (HX_FIELD_EQ(inName,"startScrollY") ) { return ::hx::Val( startScrollY ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"visibleHeight") ) { return ::hx::Val( visibleHeight ); }
		if (HX_FIELD_EQ(inName,"contentHeight") ) { return ::hx::Val( contentHeight ); }
		if (HX_FIELD_EQ(inName,"simulateTouch") ) { return ::hx::Val( simulateTouch ); }
		if (HX_FIELD_EQ(inName,"targetScrollX") ) { return ::hx::Val( targetScrollX ); }
		if (HX_FIELD_EQ(inName,"targetScrollY") ) { return ::hx::Val( targetScrollY ); }
		if (HX_FIELD_EQ(inName,"setDimensions") ) { return ::hx::Val( setDimensions_dyn() ); }
		if (HX_FIELD_EQ(inName,"finishScrollX") ) { return ::hx::Val( finishScrollX_dyn() ); }
		if (HX_FIELD_EQ(inName,"finishScrollY") ) { return ::hx::Val( finishScrollY_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"animateScrollX") ) { return ::hx::Val( animateScrollX ); }
		if (HX_FIELD_EQ(inName,"animateScrollY") ) { return ::hx::Val( animateScrollY ); }
		if (HX_FIELD_EQ(inName,"snappingToEdge") ) { return ::hx::Val( snappingToEdge ); }
		if (HX_FIELD_EQ(inName,"completeScroll") ) { return ::hx::Val( completeScroll_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"minDragDistance") ) { return ::hx::Val( minDragDistance ); }
		if (HX_FIELD_EQ(inName,"forceElasticTop") ) { return ::hx::Val( forceElasticTop ); }
		if (HX_FIELD_EQ(inName,"throwElasticity") ) { return ::hx::Val( throwElasticity ); }
		if (HX_FIELD_EQ(inName,"mouseWheelDelta") ) { return ::hx::Val( mouseWheelDelta ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"forceElasticLeft") ) { return ::hx::Val( forceElasticLeft ); }
		if (HX_FIELD_EQ(inName,"decelerationRate") ) { return ::hx::Val( decelerationRate ); }
		if (HX_FIELD_EQ(inName,"savedScrollMoves") ) { return ::hx::Val( savedScrollMoves ); }
		if (HX_FIELD_EQ(inName,"cleanupAfterDrag") ) { return ::hx::Val( cleanupAfterDrag_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"forceElasticRight") ) { return ::hx::Val( forceElasticRight ); }
		if (HX_FIELD_EQ(inName,"throwWithVelocity") ) { return ::hx::Val( throwWithVelocity_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"forceElasticBottom") ) { return ::hx::Val( forceElasticBottom ); }
		if (HX_FIELD_EQ(inName,"mouseWheelDuration") ) { return ::hx::Val( mouseWheelDuration ); }
		if (HX_FIELD_EQ(inName,"calculateMinAndMax") ) { return ::hx::Val( calculateMinAndMax_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"elasticSnapDuration") ) { return ::hx::Val( elasticSnapDuration ); }
		if (HX_FIELD_EQ(inName,"_fixedThrowDuration") ) { return ::hx::Val( _fixedThrowDuration ); }
		if (HX_FIELD_EQ(inName,"_animateScrollXEase") ) { return ::hx::Val( _animateScrollXEase ); }
		if (HX_FIELD_EQ(inName,"_animateScrollYEase") ) { return ::hx::Val( _animateScrollYEase ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"set_decelerationRate") ) { return ::hx::Val( set_decelerationRate_dyn() ); }
		if (HX_FIELD_EQ(inName,"_logDecelerationRate") ) { return ::hx::Val( _logDecelerationRate ); }
		if (HX_FIELD_EQ(inName,"restoreMouseChildren") ) { return ::hx::Val( restoreMouseChildren ); }
		if (HX_FIELD_EQ(inName,"previousTouchPointID") ) { return ::hx::Val( previousTouchPointID ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"animateScrollXEndRatio") ) { return ::hx::Val( animateScrollXEndRatio ); }
		if (HX_FIELD_EQ(inName,"animateScrollYEndRatio") ) { return ::hx::Val( animateScrollYEndRatio ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"target_mouseDownHandler") ) { return ::hx::Val( target_mouseDownHandler_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"target_touchBeginHandler") ) { return ::hx::Val( target_touchBeginHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"target_mouseWheelHandler") ) { return ::hx::Val( target_mouseWheelHandler_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"animateScrollX_onComplete") ) { return ::hx::Val( animateScrollX_onComplete_dyn() ); }
		if (HX_FIELD_EQ(inName,"animateScrollY_onComplete") ) { return ::hx::Val( animateScrollY_onComplete_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"target_clickCaptureHandler") ) { return ::hx::Val( target_clickCaptureHandler_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"target_stage_mouseUpHandler") ) { return ::hx::Val( target_stage_mouseUpHandler_dyn() ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"target_stage_touchEndHandler") ) { return ::hx::Val( target_stage_touchEndHandler_dyn() ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"calculateDistanceFromVelocity") ) { return ::hx::Val( calculateDistanceFromVelocity_dyn() ); }
		if (HX_FIELD_EQ(inName,"refreshAnimateScrollXEndRatio") ) { return ::hx::Val( refreshAnimateScrollXEndRatio_dyn() ); }
		if (HX_FIELD_EQ(inName,"refreshAnimateScrollYEndRatio") ) { return ::hx::Val( refreshAnimateScrollYEndRatio_dyn() ); }
		if (HX_FIELD_EQ(inName,"target_stage_touchMoveHandler") ) { return ::hx::Val( target_stage_touchMoveHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"target_stage_mouseMoveHandler") ) { return ::hx::Val( target_stage_mouseMoveHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"target_touchTapCaptureHandler") ) { return ::hx::Val( target_touchTapCaptureHandler_dyn() ); }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"target_removedFromStageHandler") ) { return ::hx::Val( target_removedFromStageHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"target_mouseDownCaptureHandler") ) { return ::hx::Val( target_mouseDownCaptureHandler_dyn() ); }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"target_touchBeginCaptureHandler") ) { return ::hx::Val( target_touchBeginCaptureHandler_dyn() ); }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"animateScrollX_endRatio_onUpdate") ) { return ::hx::Val( animateScrollX_endRatio_onUpdate_dyn() ); }
		if (HX_FIELD_EQ(inName,"animateScrollY_endRatio_onUpdate") ) { return ::hx::Val( animateScrollY_endRatio_onUpdate_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Scroller_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"TOUCH_ID_MOUSE") ) { outValue = ( TOUCH_ID_MOUSE ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"MINIMUM_VELOCITY") ) { outValue = ( MINIMUM_VELOCITY ); return true; }
	}
	return false;
}

::hx::Val Scroller_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"ease") ) { ease=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_target(inValue.Cast<  ::openfl::display::InteractiveObject >()) );target=inValue.Cast<  ::openfl::display::InteractiveObject >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollX") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scrollX(inValue.Cast< Float >()) );scrollX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollY") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scrollY(inValue.Cast< Float >()) );scrollY=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"enabledX") ) { enabledX=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"enabledY") ) { enabledY=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scrolling") ) { scrolling=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"draggingX") ) { draggingX=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"draggingY") ) { draggingY=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"minScrollX") ) { minScrollX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"minScrollY") ) { minScrollY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxScrollX") ) { maxScrollX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxScrollY") ) { maxScrollY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"elasticity") ) { elasticity=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bounceEase") ) { bounceEase=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"startTouchX") ) { startTouchX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startTouchY") ) { startTouchY=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"visibleWidth") ) { visibleWidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"contentWidth") ) { contentWidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"elasticEdges") ) { elasticEdges=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"touchPointID") ) { touchPointID=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startScrollX") ) { startScrollX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startScrollY") ) { startScrollY=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"visibleHeight") ) { visibleHeight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"contentHeight") ) { contentHeight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"simulateTouch") ) { simulateTouch=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"targetScrollX") ) { targetScrollX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"targetScrollY") ) { targetScrollY=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"animateScrollX") ) { animateScrollX=inValue.Cast<  ::motion::actuators::SimpleActuator >(); return inValue; }
		if (HX_FIELD_EQ(inName,"animateScrollY") ) { animateScrollY=inValue.Cast<  ::motion::actuators::SimpleActuator >(); return inValue; }
		if (HX_FIELD_EQ(inName,"snappingToEdge") ) { snappingToEdge=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"minDragDistance") ) { minDragDistance=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"forceElasticTop") ) { forceElasticTop=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"throwElasticity") ) { throwElasticity=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mouseWheelDelta") ) { mouseWheelDelta=inValue.Cast< Float >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"forceElasticLeft") ) { forceElasticLeft=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"decelerationRate") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_decelerationRate(inValue.Cast< Float >()) );decelerationRate=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"savedScrollMoves") ) { savedScrollMoves=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"forceElasticRight") ) { forceElasticRight=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"forceElasticBottom") ) { forceElasticBottom=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mouseWheelDuration") ) { mouseWheelDuration=inValue.Cast< Float >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"elasticSnapDuration") ) { elasticSnapDuration=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fixedThrowDuration") ) { _fixedThrowDuration=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_animateScrollXEase") ) { _animateScrollXEase=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_animateScrollYEase") ) { _animateScrollYEase=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_logDecelerationRate") ) { _logDecelerationRate=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"restoreMouseChildren") ) { restoreMouseChildren=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"previousTouchPointID") ) { previousTouchPointID=inValue.Cast< int >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"animateScrollXEndRatio") ) { animateScrollXEndRatio=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"animateScrollYEndRatio") ) { animateScrollYEndRatio=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Scroller_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"TOUCH_ID_MOUSE") ) { TOUCH_ID_MOUSE=ioValue.Cast< int >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"MINIMUM_VELOCITY") ) { MINIMUM_VELOCITY=ioValue.Cast< Float >(); return true; }
	}
	return false;
}

void Scroller_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("enabledX",b7,ec,b2,ec));
	outFields->push(HX_("enabledY",b8,ec,b2,ec));
	outFields->push(HX_("scrollX",ab,33,d8,30));
	outFields->push(HX_("scrollY",ac,33,d8,30));
	outFields->push(HX_("minScrollX",39,80,8f,f6));
	outFields->push(HX_("minScrollY",3a,80,8f,f6));
	outFields->push(HX_("maxScrollX",67,ad,fc,9a));
	outFields->push(HX_("maxScrollY",68,ad,fc,9a));
	outFields->push(HX_("visibleWidth",34,d0,e7,3f));
	outFields->push(HX_("visibleHeight",f9,d5,3d,61));
	outFields->push(HX_("contentWidth",0d,0a,f1,b0));
	outFields->push(HX_("contentHeight",00,3a,47,d8));
	outFields->push(HX_("scrolling",f5,fa,19,3e));
	outFields->push(HX_("draggingX",a9,f8,28,63));
	outFields->push(HX_("draggingY",aa,f8,28,63));
	outFields->push(HX_("minDragDistance",fb,ff,d8,1b));
	outFields->push(HX_("elasticEdges",81,17,91,78));
	outFields->push(HX_("forceElasticTop",8b,99,3d,5e));
	outFields->push(HX_("forceElasticRight",52,68,34,71));
	outFields->push(HX_("forceElasticBottom",b5,71,f9,b3));
	outFields->push(HX_("forceElasticLeft",51,6c,57,12));
	outFields->push(HX_("elasticity",79,23,b4,4d));
	outFields->push(HX_("throwElasticity",3f,b0,ef,55));
	outFields->push(HX_("elasticSnapDuration",33,b5,9a,f2));
	outFields->push(HX_("ease",ee,8b,0c,43));
	outFields->push(HX_("bounceEase",96,a1,28,00));
	outFields->push(HX_("mouseWheelDelta",e2,ab,21,b7));
	outFields->push(HX_("mouseWheelDuration",aa,19,1b,6c));
	outFields->push(HX_("simulateTouch",7b,1d,d4,98));
	outFields->push(HX_("decelerationRate",1f,5a,8b,6e));
	outFields->push(HX_("_logDecelerationRate",c4,e9,d1,52));
	outFields->push(HX_("_fixedThrowDuration",a5,c0,f5,73));
	outFields->push(HX_("restoreMouseChildren",56,08,06,fc));
	outFields->push(HX_("touchPointID",2c,be,83,7b));
	outFields->push(HX_("previousTouchPointID",03,bd,cb,87));
	outFields->push(HX_("startTouchX",bb,0d,68,10));
	outFields->push(HX_("startTouchY",bc,0d,68,10));
	outFields->push(HX_("startScrollX",69,17,84,a2));
	outFields->push(HX_("startScrollY",6a,17,84,a2));
	outFields->push(HX_("savedScrollMoves",ae,71,0c,18));
	outFields->push(HX_("animateScrollX",0a,87,45,93));
	outFields->push(HX_("animateScrollY",0b,87,45,93));
	outFields->push(HX_("_animateScrollXEase",37,10,d7,01));
	outFields->push(HX_("_animateScrollYEase",b8,a4,3d,95));
	outFields->push(HX_("animateScrollXEndRatio",5a,24,e6,27));
	outFields->push(HX_("animateScrollYEndRatio",5b,8d,d7,fa));
	outFields->push(HX_("targetScrollX",5a,e4,06,68));
	outFields->push(HX_("targetScrollY",5b,e4,06,68));
	outFields->push(HX_("snappingToEdge",34,d2,2e,59));
	outFields->push(HX_("target",51,f3,ec,86));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Scroller_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(Scroller_obj,enabledX),HX_("enabledX",b7,ec,b2,ec)},
	{::hx::fsBool,(int)offsetof(Scroller_obj,enabledY),HX_("enabledY",b8,ec,b2,ec)},
	{::hx::fsFloat,(int)offsetof(Scroller_obj,scrollX),HX_("scrollX",ab,33,d8,30)},
	{::hx::fsFloat,(int)offsetof(Scroller_obj,scrollY),HX_("scrollY",ac,33,d8,30)},
	{::hx::fsFloat,(int)offsetof(Scroller_obj,minScrollX),HX_("minScrollX",39,80,8f,f6)},
	{::hx::fsFloat,(int)offsetof(Scroller_obj,minScrollY),HX_("minScrollY",3a,80,8f,f6)},
	{::hx::fsFloat,(int)offsetof(Scroller_obj,maxScrollX),HX_("maxScrollX",67,ad,fc,9a)},
	{::hx::fsFloat,(int)offsetof(Scroller_obj,maxScrollY),HX_("maxScrollY",68,ad,fc,9a)},
	{::hx::fsFloat,(int)offsetof(Scroller_obj,visibleWidth),HX_("visibleWidth",34,d0,e7,3f)},
	{::hx::fsFloat,(int)offsetof(Scroller_obj,visibleHeight),HX_("visibleHeight",f9,d5,3d,61)},
	{::hx::fsFloat,(int)offsetof(Scroller_obj,contentWidth),HX_("contentWidth",0d,0a,f1,b0)},
	{::hx::fsFloat,(int)offsetof(Scroller_obj,contentHeight),HX_("contentHeight",00,3a,47,d8)},
	{::hx::fsBool,(int)offsetof(Scroller_obj,scrolling),HX_("scrolling",f5,fa,19,3e)},
	{::hx::fsBool,(int)offsetof(Scroller_obj,draggingX),HX_("draggingX",a9,f8,28,63)},
	{::hx::fsBool,(int)offsetof(Scroller_obj,draggingY),HX_("draggingY",aa,f8,28,63)},
	{::hx::fsFloat,(int)offsetof(Scroller_obj,minDragDistance),HX_("minDragDistance",fb,ff,d8,1b)},
	{::hx::fsBool,(int)offsetof(Scroller_obj,elasticEdges),HX_("elasticEdges",81,17,91,78)},
	{::hx::fsBool,(int)offsetof(Scroller_obj,forceElasticTop),HX_("forceElasticTop",8b,99,3d,5e)},
	{::hx::fsBool,(int)offsetof(Scroller_obj,forceElasticRight),HX_("forceElasticRight",52,68,34,71)},
	{::hx::fsBool,(int)offsetof(Scroller_obj,forceElasticBottom),HX_("forceElasticBottom",b5,71,f9,b3)},
	{::hx::fsBool,(int)offsetof(Scroller_obj,forceElasticLeft),HX_("forceElasticLeft",51,6c,57,12)},
	{::hx::fsFloat,(int)offsetof(Scroller_obj,elasticity),HX_("elasticity",79,23,b4,4d)},
	{::hx::fsFloat,(int)offsetof(Scroller_obj,throwElasticity),HX_("throwElasticity",3f,b0,ef,55)},
	{::hx::fsFloat,(int)offsetof(Scroller_obj,elasticSnapDuration),HX_("elasticSnapDuration",33,b5,9a,f2)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(Scroller_obj,ease),HX_("ease",ee,8b,0c,43)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(Scroller_obj,bounceEase),HX_("bounceEase",96,a1,28,00)},
	{::hx::fsFloat,(int)offsetof(Scroller_obj,mouseWheelDelta),HX_("mouseWheelDelta",e2,ab,21,b7)},
	{::hx::fsFloat,(int)offsetof(Scroller_obj,mouseWheelDuration),HX_("mouseWheelDuration",aa,19,1b,6c)},
	{::hx::fsBool,(int)offsetof(Scroller_obj,simulateTouch),HX_("simulateTouch",7b,1d,d4,98)},
	{::hx::fsFloat,(int)offsetof(Scroller_obj,decelerationRate),HX_("decelerationRate",1f,5a,8b,6e)},
	{::hx::fsFloat,(int)offsetof(Scroller_obj,_logDecelerationRate),HX_("_logDecelerationRate",c4,e9,d1,52)},
	{::hx::fsFloat,(int)offsetof(Scroller_obj,_fixedThrowDuration),HX_("_fixedThrowDuration",a5,c0,f5,73)},
	{::hx::fsBool,(int)offsetof(Scroller_obj,restoreMouseChildren),HX_("restoreMouseChildren",56,08,06,fc)},
	{::hx::fsInt,(int)offsetof(Scroller_obj,touchPointID),HX_("touchPointID",2c,be,83,7b)},
	{::hx::fsInt,(int)offsetof(Scroller_obj,previousTouchPointID),HX_("previousTouchPointID",03,bd,cb,87)},
	{::hx::fsFloat,(int)offsetof(Scroller_obj,startTouchX),HX_("startTouchX",bb,0d,68,10)},
	{::hx::fsFloat,(int)offsetof(Scroller_obj,startTouchY),HX_("startTouchY",bc,0d,68,10)},
	{::hx::fsFloat,(int)offsetof(Scroller_obj,startScrollX),HX_("startScrollX",69,17,84,a2)},
	{::hx::fsFloat,(int)offsetof(Scroller_obj,startScrollY),HX_("startScrollY",6a,17,84,a2)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(Scroller_obj,savedScrollMoves),HX_("savedScrollMoves",ae,71,0c,18)},
	{::hx::fsObject /*  ::motion::actuators::SimpleActuator */ ,(int)offsetof(Scroller_obj,animateScrollX),HX_("animateScrollX",0a,87,45,93)},
	{::hx::fsObject /*  ::motion::actuators::SimpleActuator */ ,(int)offsetof(Scroller_obj,animateScrollY),HX_("animateScrollY",0b,87,45,93)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(Scroller_obj,_animateScrollXEase),HX_("_animateScrollXEase",37,10,d7,01)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(Scroller_obj,_animateScrollYEase),HX_("_animateScrollYEase",b8,a4,3d,95)},
	{::hx::fsFloat,(int)offsetof(Scroller_obj,animateScrollXEndRatio),HX_("animateScrollXEndRatio",5a,24,e6,27)},
	{::hx::fsFloat,(int)offsetof(Scroller_obj,animateScrollYEndRatio),HX_("animateScrollYEndRatio",5b,8d,d7,fa)},
	{::hx::fsFloat,(int)offsetof(Scroller_obj,targetScrollX),HX_("targetScrollX",5a,e4,06,68)},
	{::hx::fsFloat,(int)offsetof(Scroller_obj,targetScrollY),HX_("targetScrollY",5b,e4,06,68)},
	{::hx::fsBool,(int)offsetof(Scroller_obj,snappingToEdge),HX_("snappingToEdge",34,d2,2e,59)},
	{::hx::fsObject /*  ::openfl::display::InteractiveObject */ ,(int)offsetof(Scroller_obj,target),HX_("target",51,f3,ec,86)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Scroller_obj_sStaticStorageInfo[] = {
	{::hx::fsFloat,(void *) &Scroller_obj::MINIMUM_VELOCITY,HX_("MINIMUM_VELOCITY",0e,4a,dd,c0)},
	{::hx::fsInt,(void *) &Scroller_obj::TOUCH_ID_MOUSE,HX_("TOUCH_ID_MOUSE",41,e7,e3,33)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Scroller_obj_sMemberFields[] = {
	HX_("enabledX",b7,ec,b2,ec),
	HX_("enabledY",b8,ec,b2,ec),
	HX_("scrollX",ab,33,d8,30),
	HX_("set_scrollX",ce,9a,3f,c1),
	HX_("scrollY",ac,33,d8,30),
	HX_("set_scrollY",cf,9a,3f,c1),
	HX_("minScrollX",39,80,8f,f6),
	HX_("minScrollY",3a,80,8f,f6),
	HX_("maxScrollX",67,ad,fc,9a),
	HX_("maxScrollY",68,ad,fc,9a),
	HX_("visibleWidth",34,d0,e7,3f),
	HX_("visibleHeight",f9,d5,3d,61),
	HX_("contentWidth",0d,0a,f1,b0),
	HX_("contentHeight",00,3a,47,d8),
	HX_("scrolling",f5,fa,19,3e),
	HX_("draggingX",a9,f8,28,63),
	HX_("draggingY",aa,f8,28,63),
	HX_("minDragDistance",fb,ff,d8,1b),
	HX_("elasticEdges",81,17,91,78),
	HX_("forceElasticTop",8b,99,3d,5e),
	HX_("forceElasticRight",52,68,34,71),
	HX_("forceElasticBottom",b5,71,f9,b3),
	HX_("forceElasticLeft",51,6c,57,12),
	HX_("elasticity",79,23,b4,4d),
	HX_("throwElasticity",3f,b0,ef,55),
	HX_("elasticSnapDuration",33,b5,9a,f2),
	HX_("ease",ee,8b,0c,43),
	HX_("bounceEase",96,a1,28,00),
	HX_("mouseWheelDelta",e2,ab,21,b7),
	HX_("mouseWheelDuration",aa,19,1b,6c),
	HX_("simulateTouch",7b,1d,d4,98),
	HX_("decelerationRate",1f,5a,8b,6e),
	HX_("set_decelerationRate",9c,76,ad,59),
	HX_("_logDecelerationRate",c4,e9,d1,52),
	HX_("_fixedThrowDuration",a5,c0,f5,73),
	HX_("restoreMouseChildren",56,08,06,fc),
	HX_("touchPointID",2c,be,83,7b),
	HX_("previousTouchPointID",03,bd,cb,87),
	HX_("startTouchX",bb,0d,68,10),
	HX_("startTouchY",bc,0d,68,10),
	HX_("startScrollX",69,17,84,a2),
	HX_("startScrollY",6a,17,84,a2),
	HX_("savedScrollMoves",ae,71,0c,18),
	HX_("animateScrollX",0a,87,45,93),
	HX_("animateScrollY",0b,87,45,93),
	HX_("_animateScrollXEase",37,10,d7,01),
	HX_("_animateScrollYEase",b8,a4,3d,95),
	HX_("animateScrollXEndRatio",5a,24,e6,27),
	HX_("animateScrollYEndRatio",5b,8d,d7,fa),
	HX_("targetScrollX",5a,e4,06,68),
	HX_("targetScrollY",5b,e4,06,68),
	HX_("snappingToEdge",34,d2,2e,59),
	HX_("target",51,f3,ec,86),
	HX_("set_target",8e,01,f2,7a),
	HX_("setDimensions",8f,fc,17,7e),
	HX_("stop",02,f0,5b,4c),
	HX_("throwWithVelocity",89,74,83,6f),
	HX_("calculateDistanceFromVelocity",02,91,54,34),
	HX_("throwTo",41,bc,3e,5a),
	HX_("refreshAnimateScrollXEndRatio",95,2e,da,1a),
	HX_("refreshAnimateScrollYEndRatio",96,97,cb,ed),
	HX_("calculateMinAndMax",f9,54,e7,4e),
	HX_("startScroll",0f,36,4b,bf),
	HX_("completeScroll",a6,1d,c4,0e),
	HX_("finishScrollX",98,1b,6d,fd),
	HX_("finishScrollY",99,1b,6d,fd),
	HX_("animateScrollX_endRatio_onUpdate",02,fd,f7,a4),
	HX_("animateScrollX_onComplete",4d,c3,2c,8d),
	HX_("animateScrollY_endRatio_onUpdate",43,11,05,aa),
	HX_("animateScrollY_onComplete",ec,30,ec,ce),
	HX_("cleanupAfterDrag",6c,2b,b7,c8),
	HX_("target_removedFromStageHandler",c8,ce,34,e0),
	HX_("touchBegin",ea,cd,e6,a9),
	HX_("touchMove",70,72,cd,0d),
	HX_("touchEnd",5c,c5,09,00),
	HX_("canDragX",b4,8b,49,4e),
	HX_("canDragY",b5,8b,49,4e),
	HX_("target_touchBeginCaptureHandler",5c,b9,e1,23),
	HX_("target_touchBeginHandler",52,bb,de,47),
	HX_("target_mouseDownCaptureHandler",3d,e9,46,b7),
	HX_("target_mouseDownHandler",51,d9,a6,2d),
	HX_("target_stage_touchMoveHandler",89,f7,6d,16),
	HX_("target_stage_mouseMoveHandler",e3,66,e6,3a),
	HX_("target_stage_touchEndHandler",5f,90,9f,46),
	HX_("target_clickCaptureHandler",1e,bb,3d,26),
	HX_("target_touchTapCaptureHandler",56,d1,a1,05),
	HX_("target_stage_mouseUpHandler",59,82,73,89),
	HX_("target_mouseWheelHandler",86,82,57,b5),
	::String(null()) };

static void Scroller_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Scroller_obj::MINIMUM_VELOCITY,"MINIMUM_VELOCITY");
	HX_MARK_MEMBER_NAME(Scroller_obj::TOUCH_ID_MOUSE,"TOUCH_ID_MOUSE");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Scroller_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Scroller_obj::MINIMUM_VELOCITY,"MINIMUM_VELOCITY");
	HX_VISIT_MEMBER_NAME(Scroller_obj::TOUCH_ID_MOUSE,"TOUCH_ID_MOUSE");
};

#endif

::hx::Class Scroller_obj::__mClass;

static ::String Scroller_obj_sStaticFields[] = {
	HX_("MINIMUM_VELOCITY",0e,4a,dd,c0),
	HX_("TOUCH_ID_MOUSE",41,e7,e3,33),
	::String(null())
};

void Scroller_obj::__register()
{
	Scroller_obj _hx_dummy;
	Scroller_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("feathers.utils.Scroller",75,9d,7a,b6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Scroller_obj::__GetStatic;
	__mClass->mSetStaticField = &Scroller_obj::__SetStatic;
	__mClass->mMarkFunc = Scroller_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Scroller_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Scroller_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Scroller_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Scroller_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Scroller_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Scroller_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Scroller_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_35_boot)
HXDLIN(  35)		MINIMUM_VELOCITY = ((Float)0.02);
            	}
{
            	HX_STACKFRAME(&_hx_pos_502d7772405dfa7d_36_boot)
HXDLIN(  36)		TOUCH_ID_MOUSE = -1000;
            	}
}

} // end namespace feathers
} // end namespace utils
