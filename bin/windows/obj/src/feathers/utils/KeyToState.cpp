// Generated by Haxe 4.1.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_feathers_core_IStateContext
#include <feathers/core/IStateContext.h>
#endif
#ifndef INCLUDED_feathers_utils_KeyToState
#include <feathers/utils/KeyToState.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_FocusEvent
#include <openfl/events/FocusEvent.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4c6bd9ca37733139_26_new,"feathers.utils.KeyToState","new",0x09e8b924,"feathers.utils.KeyToState.new","feathers/utils/KeyToState.hx",26,0xaf6daeca)
HX_LOCAL_STACK_FRAME(_hx_pos_4c6bd9ca37733139_52_set_target,"feathers.utils.KeyToState","set_target",0x0de9794a,"feathers.utils.KeyToState.set_target","feathers/utils/KeyToState.hx",52,0xaf6daeca)
HX_LOCAL_STACK_FRAME(_hx_pos_4c6bd9ca37733139_86_set_callback,"feathers.utils.KeyToState","set_callback",0x22ab4ffe,"feathers.utils.KeyToState.set_callback","feathers/utils/KeyToState.hx",86,0xaf6daeca)
HX_LOCAL_STACK_FRAME(_hx_pos_4c6bd9ca37733139_131_changeState,"feathers.utils.KeyToState","changeState",0xaf626b45,"feathers.utils.KeyToState.changeState","feathers/utils/KeyToState.hx",131,0xaf6daeca)
HX_LOCAL_STACK_FRAME(_hx_pos_4c6bd9ca37733139_145_resetKeyState,"feathers.utils.KeyToState","resetKeyState",0x7f250ea5,"feathers.utils.KeyToState.resetKeyState","feathers/utils/KeyToState.hx",145,0xaf6daeca)
HX_LOCAL_STACK_FRAME(_hx_pos_4c6bd9ca37733139_151_target_removedFromStageHandler,"feathers.utils.KeyToState","target_removedFromStageHandler",0x7f310c84,"feathers.utils.KeyToState.target_removedFromStageHandler","feathers/utils/KeyToState.hx",151,0xaf6daeca)
HX_LOCAL_STACK_FRAME(_hx_pos_4c6bd9ca37733139_155_target_focusOutHandler,"feathers.utils.KeyToState","target_focusOutHandler",0xb304f062,"feathers.utils.KeyToState.target_focusOutHandler","feathers/utils/KeyToState.hx",155,0xaf6daeca)
HX_LOCAL_STACK_FRAME(_hx_pos_4c6bd9ca37733139_158_target_keyDownHandler,"feathers.utils.KeyToState","target_keyDownHandler",0x2774765b,"feathers.utils.KeyToState.target_keyDownHandler","feathers/utils/KeyToState.hx",158,0xaf6daeca)
HX_LOCAL_STACK_FRAME(_hx_pos_4c6bd9ca37733139_166_target_keyUpHandler,"feathers.utils.KeyToState","target_keyUpHandler",0x9ae53ec2,"feathers.utils.KeyToState.target_keyUpHandler","feathers/utils/KeyToState.hx",166,0xaf6daeca)
namespace feathers{
namespace utils{

void KeyToState_obj::__construct( ::openfl::display::InteractiveObject target, ::Dynamic callback, ::Dynamic upState, ::Dynamic downState){
            	HX_STACKFRAME(&_hx_pos_4c6bd9ca37733139_26_new)
HXLINE( 129)		this->_downKeyCode = null();
HXLINE( 127)		this->enabled = true;
HXLINE( 117)		this->downState = null();
HXLINE( 110)		this->upState = null();
HXLINE(  84)		this->callback = null();
HXLINE(  50)		this->target = null();
HXLINE(  33)		this->set_target(target);
HXLINE(  34)		if (::hx::IsNotNull( upState )) {
HXLINE(  35)			this->upState = upState;
            		}
HXLINE(  37)		if (::hx::IsNotNull( downState )) {
HXLINE(  38)			this->downState = downState;
            		}
HXLINE(  40)		this->currentState = this->upState;
HXLINE(  41)		this->set_callback(callback);
            	}

Dynamic KeyToState_obj::__CreateEmpty() { return new KeyToState_obj; }

void *KeyToState_obj::_hx_vtable = 0;

Dynamic KeyToState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< KeyToState_obj > _hx_result = new KeyToState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool KeyToState_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7956b4d8;
}

 ::openfl::display::InteractiveObject KeyToState_obj::set_target( ::openfl::display::InteractiveObject value){
            	HX_STACKFRAME(&_hx_pos_4c6bd9ca37733139_52_set_target)
HXLINE(  53)		if (::hx::IsEq( this->target,value )) {
HXLINE(  54)			return this->target;
            		}
HXLINE(  56)		if (::hx::IsNotNull( this->target )) {
HXLINE(  57)			this->target->removeEventListener(HX_("removedFromStage",34,21,76,ba),this->target_removedFromStageHandler_dyn(),null());
HXLINE(  58)			this->target->removeEventListener(HX_("focusOut",96,6f,5e,11),this->target_focusOutHandler_dyn(),null());
HXLINE(  59)			this->target->removeEventListener(HX_("keyDown",a1,69,47,9c),this->target_keyDownHandler_dyn(),null());
HXLINE(  60)			this->target->removeEventListener(HX_("keyUp",da,b9,fe,de),this->target_keyUpHandler_dyn(),null());
            		}
HXLINE(  62)		this->target = value;
HXLINE(  63)		if (::hx::IsNotNull( this->target )) {
HXLINE(  64)			this->currentState = this->upState;
HXLINE(  65)			this->target->addEventListener(HX_("removedFromStage",34,21,76,ba),this->target_removedFromStageHandler_dyn(),null(),null(),null());
HXLINE(  66)			this->target->addEventListener(HX_("focusOut",96,6f,5e,11),this->target_focusOutHandler_dyn(),null(),null(),null());
HXLINE(  67)			this->target->addEventListener(HX_("keyDown",a1,69,47,9c),this->target_keyDownHandler_dyn(),null(),null(),null());
HXLINE(  68)			this->target->addEventListener(HX_("keyUp",da,b9,fe,de),this->target_keyUpHandler_dyn(),null(),null(),null());
            		}
HXLINE(  70)		return this->target;
            	}


HX_DEFINE_DYNAMIC_FUNC1(KeyToState_obj,set_target,return )

 ::Dynamic KeyToState_obj::set_callback( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_4c6bd9ca37733139_86_set_callback)
HXLINE(  87)		if (::hx::IsEq( this->callback,value )) {
HXLINE(  88)			return this->callback;
            		}
HXLINE(  90)		this->callback = value;
HXLINE(  91)		if (::hx::IsNotNull( this->callback )) {
HXLINE(  92)			this->callback(this->currentState);
            		}
HXLINE(  94)		return this->callback;
            	}


HX_DEFINE_DYNAMIC_FUNC1(KeyToState_obj,set_callback,return )

void KeyToState_obj::changeState( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_4c6bd9ca37733139_131_changeState)
HXLINE( 132)		 ::Dynamic oldState = this->currentState;
HXLINE( 133)		if (::Std_obj::isOfType(this->target,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IStateContext >()) ))) {
HXLINE( 134)			oldState = ::feathers::core::IStateContext_obj::get_currentState( ::hx::interface_check(this->target,0xa18fd6d8));
            		}
HXLINE( 136)		this->currentState = value;
HXLINE( 137)		if (::hx::IsEq( oldState,value )) {
HXLINE( 138)			return;
            		}
HXLINE( 140)		if (::hx::IsNotNull( this->callback )) {
HXLINE( 141)			this->callback(value);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(KeyToState_obj,changeState,(void))

void KeyToState_obj::resetKeyState(){
            	HX_STACKFRAME(&_hx_pos_4c6bd9ca37733139_145_resetKeyState)
HXLINE( 146)		this->_downKeyCode = null();
HXLINE( 147)		this->changeState(this->upState);
            	}


HX_DEFINE_DYNAMIC_FUNC0(KeyToState_obj,resetKeyState,(void))

void KeyToState_obj::target_removedFromStageHandler( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_4c6bd9ca37733139_151_target_removedFromStageHandler)
HXDLIN( 151)		this->resetKeyState();
            	}


HX_DEFINE_DYNAMIC_FUNC1(KeyToState_obj,target_removedFromStageHandler,(void))

void KeyToState_obj::target_focusOutHandler( ::openfl::events::FocusEvent event){
            	HX_STACKFRAME(&_hx_pos_4c6bd9ca37733139_155_target_focusOutHandler)
HXDLIN( 155)		this->resetKeyState();
            	}


HX_DEFINE_DYNAMIC_FUNC1(KeyToState_obj,target_focusOutHandler,(void))

void KeyToState_obj::target_keyDownHandler( ::openfl::events::KeyboardEvent event){
            	HX_STACKFRAME(&_hx_pos_4c6bd9ca37733139_158_target_keyDownHandler)
HXLINE( 159)		bool _hx_tmp;
HXDLIN( 159)		bool _hx_tmp1;
HXDLIN( 159)		if (this->enabled) {
HXLINE( 159)			 ::Dynamic b = null();
HXDLIN( 159)			_hx_tmp1 = ::hx::IsNotEq( ( (int)(this->_downKeyCode) ),b );
            		}
            		else {
HXLINE( 159)			_hx_tmp1 = true;
            		}
HXDLIN( 159)		if (!(_hx_tmp1)) {
HXLINE( 159)			if ((event->keyCode != 32)) {
HXLINE( 159)				_hx_tmp = (event->keyCode != 13);
            			}
            			else {
HXLINE( 159)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 159)			_hx_tmp = true;
            		}
HXDLIN( 159)		if (_hx_tmp) {
HXLINE( 160)			return;
            		}
HXLINE( 162)		this->_downKeyCode = event->keyCode;
HXLINE( 163)		this->changeState(this->downState);
            	}


HX_DEFINE_DYNAMIC_FUNC1(KeyToState_obj,target_keyDownHandler,(void))

void KeyToState_obj::target_keyUpHandler( ::openfl::events::KeyboardEvent event){
            	HX_STACKFRAME(&_hx_pos_4c6bd9ca37733139_166_target_keyUpHandler)
HXLINE( 167)		bool _hx_tmp;
HXDLIN( 167)		 ::Dynamic b = null();
HXDLIN( 167)		if (::hx::IsNotEq( ( (int)(this->_downKeyCode) ),b )) {
HXLINE( 167)			_hx_tmp = ::hx::IsNotEq( event->keyCode,this->_downKeyCode );
            		}
            		else {
HXLINE( 167)			_hx_tmp = true;
            		}
HXDLIN( 167)		if (_hx_tmp) {
HXLINE( 168)			return;
            		}
HXLINE( 170)		this->resetKeyState();
            	}


HX_DEFINE_DYNAMIC_FUNC1(KeyToState_obj,target_keyUpHandler,(void))


::hx::ObjectPtr< KeyToState_obj > KeyToState_obj::__new( ::openfl::display::InteractiveObject target, ::Dynamic callback, ::Dynamic upState, ::Dynamic downState) {
	::hx::ObjectPtr< KeyToState_obj > __this = new KeyToState_obj();
	__this->__construct(target,callback,upState,downState);
	return __this;
}

::hx::ObjectPtr< KeyToState_obj > KeyToState_obj::__alloc(::hx::Ctx *_hx_ctx, ::openfl::display::InteractiveObject target, ::Dynamic callback, ::Dynamic upState, ::Dynamic downState) {
	KeyToState_obj *__this = (KeyToState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(KeyToState_obj), true, "feathers.utils.KeyToState"));
	*(void **)__this = KeyToState_obj::_hx_vtable;
	__this->__construct(target,callback,upState,downState);
	return __this;
}

KeyToState_obj::KeyToState_obj()
{
}

void KeyToState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(KeyToState);
	HX_MARK_MEMBER_NAME(target,"target");
	HX_MARK_MEMBER_NAME(callback,"callback");
	HX_MARK_MEMBER_NAME(currentState,"currentState");
	HX_MARK_MEMBER_NAME(upState,"upState");
	HX_MARK_MEMBER_NAME(downState,"downState");
	HX_MARK_MEMBER_NAME(enabled,"enabled");
	HX_MARK_MEMBER_NAME(_downKeyCode,"_downKeyCode");
	HX_MARK_END_CLASS();
}

void KeyToState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(target,"target");
	HX_VISIT_MEMBER_NAME(callback,"callback");
	HX_VISIT_MEMBER_NAME(currentState,"currentState");
	HX_VISIT_MEMBER_NAME(upState,"upState");
	HX_VISIT_MEMBER_NAME(downState,"downState");
	HX_VISIT_MEMBER_NAME(enabled,"enabled");
	HX_VISIT_MEMBER_NAME(_downKeyCode,"_downKeyCode");
}

::hx::Val KeyToState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { return ::hx::Val( target ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"upState") ) { return ::hx::Val( upState ); }
		if (HX_FIELD_EQ(inName,"enabled") ) { return ::hx::Val( enabled ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"callback") ) { return ::hx::Val( callback ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"downState") ) { return ::hx::Val( downState ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"set_target") ) { return ::hx::Val( set_target_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"changeState") ) { return ::hx::Val( changeState_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"set_callback") ) { return ::hx::Val( set_callback_dyn() ); }
		if (HX_FIELD_EQ(inName,"currentState") ) { return ::hx::Val( currentState ); }
		if (HX_FIELD_EQ(inName,"_downKeyCode") ) { return ::hx::Val( _downKeyCode ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"resetKeyState") ) { return ::hx::Val( resetKeyState_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"target_keyUpHandler") ) { return ::hx::Val( target_keyUpHandler_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"target_keyDownHandler") ) { return ::hx::Val( target_keyDownHandler_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"target_focusOutHandler") ) { return ::hx::Val( target_focusOutHandler_dyn() ); }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"target_removedFromStageHandler") ) { return ::hx::Val( target_removedFromStageHandler_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val KeyToState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_target(inValue.Cast<  ::openfl::display::InteractiveObject >()) );target=inValue.Cast<  ::openfl::display::InteractiveObject >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"upState") ) { upState=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"enabled") ) { enabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"callback") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_callback(inValue.Cast<  ::Dynamic >()) );callback=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"downState") ) { downState=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"currentState") ) { currentState=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_downKeyCode") ) { _downKeyCode=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void KeyToState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("target",51,f3,ec,86));
	outFields->push(HX_("currentState",18,5b,17,cb));
	outFields->push(HX_("upState",b6,95,80,e0));
	outFields->push(HX_("downState",4f,4a,21,9a));
	outFields->push(HX_("enabled",81,04,31,7e));
	outFields->push(HX_("_downKeyCode",2b,b0,09,28));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo KeyToState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::display::InteractiveObject */ ,(int)offsetof(KeyToState_obj,target),HX_("target",51,f3,ec,86)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(KeyToState_obj,callback),HX_("callback",c5,99,06,7f)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(KeyToState_obj,currentState),HX_("currentState",18,5b,17,cb)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(KeyToState_obj,upState),HX_("upState",b6,95,80,e0)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(KeyToState_obj,downState),HX_("downState",4f,4a,21,9a)},
	{::hx::fsBool,(int)offsetof(KeyToState_obj,enabled),HX_("enabled",81,04,31,7e)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(KeyToState_obj,_downKeyCode),HX_("_downKeyCode",2b,b0,09,28)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *KeyToState_obj_sStaticStorageInfo = 0;
#endif

static ::String KeyToState_obj_sMemberFields[] = {
	HX_("target",51,f3,ec,86),
	HX_("set_target",8e,01,f2,7a),
	HX_("callback",c5,99,06,7f),
	HX_("set_callback",42,71,19,49),
	HX_("currentState",18,5b,17,cb),
	HX_("upState",b6,95,80,e0),
	HX_("downState",4f,4a,21,9a),
	HX_("enabled",81,04,31,7e),
	HX_("_downKeyCode",2b,b0,09,28),
	HX_("changeState",81,1e,d1,a9),
	HX_("resetKeyState",e1,08,14,f9),
	HX_("target_removedFromStageHandler",c8,ce,34,e0),
	HX_("target_focusOutHandler",a6,ce,da,55),
	HX_("target_keyDownHandler",97,0c,82,70),
	HX_("target_keyUpHandler",fe,8d,53,f0),
	::String(null()) };

::hx::Class KeyToState_obj::__mClass;

void KeyToState_obj::__register()
{
	KeyToState_obj _hx_dummy;
	KeyToState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("feathers.utils.KeyToState",32,97,8c,e9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(KeyToState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< KeyToState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = KeyToState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = KeyToState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace feathers
} // end namespace utils
