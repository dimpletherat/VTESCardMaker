// Generated by Haxe 4.1.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_feathers_core_IStateContext
#include <feathers/core/IStateContext.h>
#endif
#ifndef INCLUDED_feathers_utils_PointerToState
#include <feathers/utils/PointerToState.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_327df24975973c0d_25_new,"feathers.utils.PointerToState","new",0x7972d446,"feathers.utils.PointerToState.new","feathers/utils/PointerToState.hx",25,0xd86da4e8)
HX_LOCAL_STACK_FRAME(_hx_pos_327df24975973c0d_54_set_target,"feathers.utils.PointerToState","set_target",0xee5be668,"feathers.utils.PointerToState.set_target","feathers/utils/PointerToState.hx",54,0xd86da4e8)
HX_LOCAL_STACK_FRAME(_hx_pos_327df24975973c0d_88_set_callback,"feathers.utils.PointerToState","set_callback",0xd669c09c,"feathers.utils.PointerToState.set_callback","feathers/utils/PointerToState.hx",88,0xd86da4e8)
HX_LOCAL_STACK_FRAME(_hx_pos_327df24975973c0d_153_changeState,"feathers.utils.PointerToState","changeState",0x330f7867,"feathers.utils.PointerToState.changeState","feathers/utils/PointerToState.hx",153,0xd86da4e8)
HX_LOCAL_STACK_FRAME(_hx_pos_327df24975973c0d_167_resetTouchState,"feathers.utils.PointerToState","resetTouchState",0x5d8be567,"feathers.utils.PointerToState.resetTouchState","feathers/utils/PointerToState.hx",167,0xd86da4e8)
HX_LOCAL_STACK_FRAME(_hx_pos_327df24975973c0d_172_target_removedFromStageHandler,"feathers.utils.PointerToState","target_removedFromStageHandler",0xd15dfca2,"feathers.utils.PointerToState.target_removedFromStageHandler","feathers/utils/PointerToState.hx",172,0xd86da4e8)
HX_LOCAL_STACK_FRAME(_hx_pos_327df24975973c0d_177_target_rollOverHandler,"feathers.utils.PointerToState","target_rollOverHandler",0x42e05805,"feathers.utils.PointerToState.target_rollOverHandler","feathers/utils/PointerToState.hx",177,0xd86da4e8)
HX_LOCAL_STACK_FRAME(_hx_pos_327df24975973c0d_189_target_rollOutHandler,"feathers.utils.PointerToState","target_rollOutHandler",0xcea5408d,"feathers.utils.PointerToState.target_rollOutHandler","feathers/utils/PointerToState.hx",189,0xd86da4e8)
HX_LOCAL_STACK_FRAME(_hx_pos_327df24975973c0d_201_target_mouseDownHandler,"feathers.utils.PointerToState","target_mouseDownHandler",0x32777437,"feathers.utils.PointerToState.target_mouseDownHandler","feathers/utils/PointerToState.hx",201,0xd86da4e8)
HX_LOCAL_STACK_FRAME(_hx_pos_327df24975973c0d_210_stage_mouseUpHandler,"feathers.utils.PointerToState","stage_mouseUpHandler",0xe97cfcc5,"feathers.utils.PointerToState.stage_mouseUpHandler","feathers/utils/PointerToState.hx",210,0xd86da4e8)
namespace feathers{
namespace utils{

void PointerToState_obj::__construct( ::openfl::display::InteractiveObject target, ::Dynamic callback, ::Dynamic upState, ::Dynamic downState, ::Dynamic hoverState){
            	HX_STACKFRAME(&_hx_pos_327df24975973c0d_25_new)
HXLINE( 151)		this->_down = false;
HXLINE( 150)		this->_hoverBeforeDown = false;
HXLINE( 148)		this->keepDownStateOnRollOut = false;
HXLINE( 136)		this->enabled = true;
HXLINE( 126)		this->hoverState = null();
HXLINE( 119)		this->downState = null();
HXLINE( 112)		this->upState = null();
HXLINE(  86)		this->callback = null();
HXLINE(  52)		this->target = null();
HXLINE(  32)		this->set_target(target);
HXLINE(  33)		if (::hx::IsNotNull( upState )) {
HXLINE(  34)			this->upState = upState;
            		}
HXLINE(  36)		if (::hx::IsNotNull( downState )) {
HXLINE(  37)			this->downState = downState;
            		}
HXLINE(  39)		if (::hx::IsNotNull( hoverState )) {
HXLINE(  40)			this->hoverState = hoverState;
            		}
HXLINE(  42)		this->currentState = this->upState;
HXLINE(  43)		this->set_callback(callback);
            	}

Dynamic PointerToState_obj::__CreateEmpty() { return new PointerToState_obj; }

void *PointerToState_obj::_hx_vtable = 0;

Dynamic PointerToState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PointerToState_obj > _hx_result = new PointerToState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool PointerToState_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x17437032;
}

 ::openfl::display::InteractiveObject PointerToState_obj::set_target( ::openfl::display::InteractiveObject value){
            	HX_STACKFRAME(&_hx_pos_327df24975973c0d_54_set_target)
HXLINE(  55)		if (::hx::IsEq( this->target,value )) {
HXLINE(  56)			return this->target;
            		}
HXLINE(  58)		if (::hx::IsNotNull( this->target )) {
HXLINE(  59)			this->target->removeEventListener(HX_("removedFromStage",34,21,76,ba),this->target_removedFromStageHandler_dyn(),null());
HXLINE(  60)			this->target->removeEventListener(HX_("rollOver",71,ab,a8,12),this->target_rollOverHandler_dyn(),null());
HXLINE(  61)			this->target->removeEventListener(HX_("rollOut",11,f9,11,5d),this->target_rollOutHandler_dyn(),null());
HXLINE(  62)			this->target->removeEventListener(HX_("mouseDown",27,b1,c2,ee),this->target_mouseDownHandler_dyn(),null());
            		}
HXLINE(  64)		this->target = value;
HXLINE(  65)		if (::hx::IsNotNull( this->target )) {
HXLINE(  66)			this->currentState = this->upState;
HXLINE(  67)			this->target->addEventListener(HX_("removedFromStage",34,21,76,ba),this->target_removedFromStageHandler_dyn(),null(),null(),null());
HXLINE(  68)			this->target->addEventListener(HX_("rollOver",71,ab,a8,12),this->target_rollOverHandler_dyn(),null(),null(),null());
HXLINE(  69)			this->target->addEventListener(HX_("rollOut",11,f9,11,5d),this->target_rollOutHandler_dyn(),null(),null(),null());
HXLINE(  70)			this->target->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->target_mouseDownHandler_dyn(),null(),null(),null());
            		}
HXLINE(  72)		return this->target;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PointerToState_obj,set_target,return )

 ::Dynamic PointerToState_obj::set_callback( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_327df24975973c0d_88_set_callback)
HXLINE(  89)		if (::hx::IsEq( this->callback,value )) {
HXLINE(  90)			return this->callback;
            		}
HXLINE(  92)		this->callback = value;
HXLINE(  93)		if (::hx::IsNotNull( this->callback )) {
HXLINE(  94)			this->callback(this->currentState);
            		}
HXLINE(  96)		return this->callback;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PointerToState_obj,set_callback,return )

void PointerToState_obj::changeState( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_327df24975973c0d_153_changeState)
HXLINE( 154)		 ::Dynamic oldState = this->currentState;
HXLINE( 155)		if (::Std_obj::isOfType(this->target,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IStateContext >()) ))) {
HXLINE( 156)			oldState = ::feathers::core::IStateContext_obj::get_currentState( ::hx::interface_check(this->target,0xa18fd6d8));
            		}
HXLINE( 158)		this->currentState = value;
HXLINE( 159)		if (::hx::IsEq( oldState,value )) {
HXLINE( 160)			return;
            		}
HXLINE( 162)		if (::hx::IsNotNull( this->callback )) {
HXLINE( 163)			this->callback(value);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PointerToState_obj,changeState,(void))

void PointerToState_obj::resetTouchState(){
            	HX_STACKFRAME(&_hx_pos_327df24975973c0d_167_resetTouchState)
HXLINE( 168)		this->_hoverBeforeDown = false;
HXLINE( 169)		this->changeState(this->upState);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PointerToState_obj,resetTouchState,(void))

void PointerToState_obj::target_removedFromStageHandler( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_327df24975973c0d_172_target_removedFromStageHandler)
HXLINE( 173)		this->target->stage->removeEventListener(HX_("mouseUp",e0,f3,72,c0),this->stage_mouseUpHandler_dyn(),null());
HXLINE( 174)		this->resetTouchState();
            	}


HX_DEFINE_DYNAMIC_FUNC1(PointerToState_obj,target_removedFromStageHandler,(void))

void PointerToState_obj::target_rollOverHandler( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_327df24975973c0d_177_target_rollOverHandler)
HXLINE( 178)		if (!(this->enabled)) {
HXLINE( 179)			return;
            		}
HXLINE( 181)		this->_hoverBeforeDown = true;
HXLINE( 182)		if (this->_down) {
HXLINE( 183)			this->changeState(this->downState);
            		}
            		else {
HXLINE( 185)			this->changeState(this->hoverState);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PointerToState_obj,target_rollOverHandler,(void))

void PointerToState_obj::target_rollOutHandler( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_327df24975973c0d_189_target_rollOutHandler)
HXLINE( 190)		if (!(this->enabled)) {
HXLINE( 191)			return;
            		}
HXLINE( 193)		this->_hoverBeforeDown = false;
HXLINE( 194)		bool _hx_tmp;
HXDLIN( 194)		if (this->keepDownStateOnRollOut) {
HXLINE( 194)			_hx_tmp = this->_down;
            		}
            		else {
HXLINE( 194)			_hx_tmp = false;
            		}
HXDLIN( 194)		if (_hx_tmp) {
HXLINE( 195)			this->changeState(this->downState);
HXLINE( 196)			return;
            		}
HXLINE( 198)		this->changeState(this->upState);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PointerToState_obj,target_rollOutHandler,(void))

void PointerToState_obj::target_mouseDownHandler( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_327df24975973c0d_201_target_mouseDownHandler)
HXLINE( 202)		if (!(this->enabled)) {
HXLINE( 203)			return;
            		}
HXLINE( 205)		this->_down = true;
HXLINE( 206)		this->target->stage->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->stage_mouseUpHandler_dyn(),false,0,true);
HXLINE( 207)		this->changeState(this->downState);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PointerToState_obj,target_mouseDownHandler,(void))

void PointerToState_obj::stage_mouseUpHandler( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_327df24975973c0d_210_stage_mouseUpHandler)
HXLINE( 211)		this->_down = false;
HXLINE( 212)		this->target->stage->removeEventListener(HX_("mouseUp",e0,f3,72,c0),this->stage_mouseUpHandler_dyn(),null());
HXLINE( 213)		bool _hx_tmp;
HXDLIN( 213)		if (this->_hoverBeforeDown) {
HXLINE( 213)			_hx_tmp = this->target->hitTestPoint(event->stageX,event->stageY,null());
            		}
            		else {
HXLINE( 213)			_hx_tmp = false;
            		}
HXDLIN( 213)		if (_hx_tmp) {
HXLINE( 214)			this->changeState(this->hoverState);
            		}
            		else {
HXLINE( 216)			this->resetTouchState();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PointerToState_obj,stage_mouseUpHandler,(void))


::hx::ObjectPtr< PointerToState_obj > PointerToState_obj::__new( ::openfl::display::InteractiveObject target, ::Dynamic callback, ::Dynamic upState, ::Dynamic downState, ::Dynamic hoverState) {
	::hx::ObjectPtr< PointerToState_obj > __this = new PointerToState_obj();
	__this->__construct(target,callback,upState,downState,hoverState);
	return __this;
}

::hx::ObjectPtr< PointerToState_obj > PointerToState_obj::__alloc(::hx::Ctx *_hx_ctx, ::openfl::display::InteractiveObject target, ::Dynamic callback, ::Dynamic upState, ::Dynamic downState, ::Dynamic hoverState) {
	PointerToState_obj *__this = (PointerToState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PointerToState_obj), true, "feathers.utils.PointerToState"));
	*(void **)__this = PointerToState_obj::_hx_vtable;
	__this->__construct(target,callback,upState,downState,hoverState);
	return __this;
}

PointerToState_obj::PointerToState_obj()
{
}

void PointerToState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PointerToState);
	HX_MARK_MEMBER_NAME(target,"target");
	HX_MARK_MEMBER_NAME(callback,"callback");
	HX_MARK_MEMBER_NAME(currentState,"currentState");
	HX_MARK_MEMBER_NAME(upState,"upState");
	HX_MARK_MEMBER_NAME(downState,"downState");
	HX_MARK_MEMBER_NAME(hoverState,"hoverState");
	HX_MARK_MEMBER_NAME(enabled,"enabled");
	HX_MARK_MEMBER_NAME(keepDownStateOnRollOut,"keepDownStateOnRollOut");
	HX_MARK_MEMBER_NAME(_hoverBeforeDown,"_hoverBeforeDown");
	HX_MARK_MEMBER_NAME(_down,"_down");
	HX_MARK_END_CLASS();
}

void PointerToState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(target,"target");
	HX_VISIT_MEMBER_NAME(callback,"callback");
	HX_VISIT_MEMBER_NAME(currentState,"currentState");
	HX_VISIT_MEMBER_NAME(upState,"upState");
	HX_VISIT_MEMBER_NAME(downState,"downState");
	HX_VISIT_MEMBER_NAME(hoverState,"hoverState");
	HX_VISIT_MEMBER_NAME(enabled,"enabled");
	HX_VISIT_MEMBER_NAME(keepDownStateOnRollOut,"keepDownStateOnRollOut");
	HX_VISIT_MEMBER_NAME(_hoverBeforeDown,"_hoverBeforeDown");
	HX_VISIT_MEMBER_NAME(_down,"_down");
}

::hx::Val PointerToState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_down") ) { return ::hx::Val( _down ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { return ::hx::Val( target ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"upState") ) { return ::hx::Val( upState ); }
		if (HX_FIELD_EQ(inName,"enabled") ) { return ::hx::Val( enabled ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"callback") ) { return ::hx::Val( callback ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"downState") ) { return ::hx::Val( downState ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"set_target") ) { return ::hx::Val( set_target_dyn() ); }
		if (HX_FIELD_EQ(inName,"hoverState") ) { return ::hx::Val( hoverState ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"changeState") ) { return ::hx::Val( changeState_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"set_callback") ) { return ::hx::Val( set_callback_dyn() ); }
		if (HX_FIELD_EQ(inName,"currentState") ) { return ::hx::Val( currentState ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"resetTouchState") ) { return ::hx::Val( resetTouchState_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_hoverBeforeDown") ) { return ::hx::Val( _hoverBeforeDown ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"stage_mouseUpHandler") ) { return ::hx::Val( stage_mouseUpHandler_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"target_rollOutHandler") ) { return ::hx::Val( target_rollOutHandler_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"keepDownStateOnRollOut") ) { return ::hx::Val( keepDownStateOnRollOut ); }
		if (HX_FIELD_EQ(inName,"target_rollOverHandler") ) { return ::hx::Val( target_rollOverHandler_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"target_mouseDownHandler") ) { return ::hx::Val( target_mouseDownHandler_dyn() ); }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"target_removedFromStageHandler") ) { return ::hx::Val( target_removedFromStageHandler_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val PointerToState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_down") ) { _down=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_target(inValue.Cast<  ::openfl::display::InteractiveObject >()) );target=inValue.Cast<  ::openfl::display::InteractiveObject >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"upState") ) { upState=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"enabled") ) { enabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"callback") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_callback(inValue.Cast<  ::Dynamic >()) );callback=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"downState") ) { downState=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"hoverState") ) { hoverState=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"currentState") ) { currentState=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_hoverBeforeDown") ) { _hoverBeforeDown=inValue.Cast< bool >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"keepDownStateOnRollOut") ) { keepDownStateOnRollOut=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PointerToState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("target",51,f3,ec,86));
	outFields->push(HX_("currentState",18,5b,17,cb));
	outFields->push(HX_("upState",b6,95,80,e0));
	outFields->push(HX_("downState",4f,4a,21,9a));
	outFields->push(HX_("hoverState",b5,b6,0d,06));
	outFields->push(HX_("enabled",81,04,31,7e));
	outFields->push(HX_("keepDownStateOnRollOut",48,7f,38,c2));
	outFields->push(HX_("_hoverBeforeDown",de,53,53,dc));
	outFields->push(HX_("_down",41,14,7f,f5));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PointerToState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::display::InteractiveObject */ ,(int)offsetof(PointerToState_obj,target),HX_("target",51,f3,ec,86)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PointerToState_obj,callback),HX_("callback",c5,99,06,7f)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PointerToState_obj,currentState),HX_("currentState",18,5b,17,cb)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PointerToState_obj,upState),HX_("upState",b6,95,80,e0)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PointerToState_obj,downState),HX_("downState",4f,4a,21,9a)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PointerToState_obj,hoverState),HX_("hoverState",b5,b6,0d,06)},
	{::hx::fsBool,(int)offsetof(PointerToState_obj,enabled),HX_("enabled",81,04,31,7e)},
	{::hx::fsBool,(int)offsetof(PointerToState_obj,keepDownStateOnRollOut),HX_("keepDownStateOnRollOut",48,7f,38,c2)},
	{::hx::fsBool,(int)offsetof(PointerToState_obj,_hoverBeforeDown),HX_("_hoverBeforeDown",de,53,53,dc)},
	{::hx::fsBool,(int)offsetof(PointerToState_obj,_down),HX_("_down",41,14,7f,f5)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *PointerToState_obj_sStaticStorageInfo = 0;
#endif

static ::String PointerToState_obj_sMemberFields[] = {
	HX_("target",51,f3,ec,86),
	HX_("set_target",8e,01,f2,7a),
	HX_("callback",c5,99,06,7f),
	HX_("set_callback",42,71,19,49),
	HX_("currentState",18,5b,17,cb),
	HX_("upState",b6,95,80,e0),
	HX_("downState",4f,4a,21,9a),
	HX_("hoverState",b5,b6,0d,06),
	HX_("enabled",81,04,31,7e),
	HX_("keepDownStateOnRollOut",48,7f,38,c2),
	HX_("_hoverBeforeDown",de,53,53,dc),
	HX_("_down",41,14,7f,f5),
	HX_("changeState",81,1e,d1,a9),
	HX_("resetTouchState",81,a0,83,45),
	HX_("target_removedFromStageHandler",c8,ce,34,e0),
	HX_("target_rollOverHandler",2b,94,45,00),
	HX_("target_rollOutHandler",27,4b,c9,f0),
	HX_("target_mouseDownHandler",51,d9,a6,2d),
	HX_("stage_mouseUpHandler",6b,c3,e6,e3),
	::String(null()) };

::hx::Class PointerToState_obj::__mClass;

void PointerToState_obj::__register()
{
	PointerToState_obj _hx_dummy;
	PointerToState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("feathers.utils.PointerToState",54,f9,1d,64);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PointerToState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PointerToState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PointerToState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PointerToState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace feathers
} // end namespace utils
