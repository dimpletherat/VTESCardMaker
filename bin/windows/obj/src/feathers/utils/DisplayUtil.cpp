// Generated by Haxe 4.1.0
#include <hxcpp.h>

#ifndef INCLUDED_feathers_utils_DisplayUtil
#include <feathers/utils/DisplayUtil.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_d22865404809d213_29_getDisplayObjectDepthFromStage,"feathers.utils.DisplayUtil","getDisplayObjectDepthFromStage",0xe1183b41,"feathers.utils.DisplayUtil.getDisplayObjectDepthFromStage","feathers/utils/DisplayUtil.hx",29,0x0c5f9617)
namespace feathers{
namespace utils{

void DisplayUtil_obj::__construct() { }

Dynamic DisplayUtil_obj::__CreateEmpty() { return new DisplayUtil_obj; }

void *DisplayUtil_obj::_hx_vtable = 0;

Dynamic DisplayUtil_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< DisplayUtil_obj > _hx_result = new DisplayUtil_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool DisplayUtil_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x72c98223;
}

int DisplayUtil_obj::getDisplayObjectDepthFromStage( ::openfl::display::DisplayObject target){
            	HX_STACKFRAME(&_hx_pos_d22865404809d213_29_getDisplayObjectDepthFromStage)
HXLINE(  30)		if (::hx::IsNull( target->stage )) {
HXLINE(  31)			return -1;
            		}
HXLINE(  33)		int count = 0;
HXLINE(  34)		while(::hx::IsNotNull( target->parent )){
HXLINE(  35)			target = target->parent;
HXLINE(  36)			count = (count + 1);
            		}
HXLINE(  38)		return count;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DisplayUtil_obj,getDisplayObjectDepthFromStage,return )


DisplayUtil_obj::DisplayUtil_obj()
{
}

bool DisplayUtil_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 30:
		if (HX_FIELD_EQ(inName,"getDisplayObjectDepthFromStage") ) { outValue = getDisplayObjectDepthFromStage_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *DisplayUtil_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *DisplayUtil_obj_sStaticStorageInfo = 0;
#endif

::hx::Class DisplayUtil_obj::__mClass;

static ::String DisplayUtil_obj_sStaticFields[] = {
	HX_("getDisplayObjectDepthFromStage",fc,d8,f9,cc),
	::String(null())
};

void DisplayUtil_obj::__register()
{
	DisplayUtil_obj _hx_dummy;
	DisplayUtil_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("feathers.utils.DisplayUtil",89,ae,b9,31);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &DisplayUtil_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(DisplayUtil_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< DisplayUtil_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DisplayUtil_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DisplayUtil_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace feathers
} // end namespace utils
