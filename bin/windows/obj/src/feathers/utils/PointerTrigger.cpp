// Generated by Haxe 4.1.0
#include <hxcpp.h>

#ifndef INCLUDED_feathers_events_TriggerEvent
#include <feathers/events/TriggerEvent.h>
#endif
#ifndef INCLUDED_feathers_utils_PointerTrigger
#include <feathers/utils/PointerTrigger.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TouchEvent
#include <openfl/events/TouchEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e9b467162ec4266f_29_new,"feathers.utils.PointerTrigger","new",0x69dd5fe8,"feathers.utils.PointerTrigger.new","feathers/utils/PointerTrigger.hx",29,0xeab9e386)
HX_LOCAL_STACK_FRAME(_hx_pos_e9b467162ec4266f_47_set_target,"feathers.utils.PointerTrigger","set_target",0xd514f306,"feathers.utils.PointerTrigger.set_target","feathers/utils/PointerTrigger.hx",47,0xeab9e386)
HX_LOCAL_STACK_FRAME(_hx_pos_e9b467162ec4266f_72_set_eventFactory,"feathers.utils.PointerTrigger","set_eventFactory",0x658b4945,"feathers.utils.PointerTrigger.set_eventFactory","feathers/utils/PointerTrigger.hx",72,0xeab9e386)
HX_LOCAL_STACK_FRAME(_hx_pos_e9b467162ec4266f_90_target_clickHandler,"feathers.utils.PointerTrigger","target_clickHandler",0x5e5c34d8,"feathers.utils.PointerTrigger.target_clickHandler","feathers/utils/PointerTrigger.hx",90,0xeab9e386)
HX_LOCAL_STACK_FRAME(_hx_pos_e9b467162ec4266f_101_target_touchTapHandler,"feathers.utils.PointerTrigger","target_touchTapHandler",0x8973ad90,"feathers.utils.PointerTrigger.target_touchTapHandler","feathers/utils/PointerTrigger.hx",101,0xeab9e386)
namespace feathers{
namespace utils{

void PointerTrigger_obj::__construct( ::openfl::display::InteractiveObject target, ::Dynamic eventFactory){
            	HX_STACKFRAME(&_hx_pos_e9b467162ec4266f_29_new)
HXLINE(  88)		this->enabled = true;
HXLINE(  70)		this->eventFactory = null();
HXLINE(  45)		this->target = null();
HXLINE(  36)		this->set_target(target);
HXLINE(  37)		this->set_eventFactory(eventFactory);
            	}

Dynamic PointerTrigger_obj::__CreateEmpty() { return new PointerTrigger_obj; }

void *PointerTrigger_obj::_hx_vtable = 0;

Dynamic PointerTrigger_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PointerTrigger_obj > _hx_result = new PointerTrigger_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool PointerTrigger_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0e1549f0;
}

 ::openfl::display::InteractiveObject PointerTrigger_obj::set_target( ::openfl::display::InteractiveObject value){
            	HX_STACKFRAME(&_hx_pos_e9b467162ec4266f_47_set_target)
HXLINE(  48)		if (::hx::IsEq( this->target,value )) {
HXLINE(  49)			return this->target;
            		}
HXLINE(  51)		if (::hx::IsNotNull( this->target )) {
HXLINE(  52)			this->target->removeEventListener(HX_("click",48,7c,5e,48),this->target_clickHandler_dyn(),null());
HXLINE(  53)			this->target->removeEventListener(HX_("touchTap",e4,1b,15,00),this->target_touchTapHandler_dyn(),null());
            		}
HXLINE(  55)		this->target = value;
HXLINE(  56)		if (::hx::IsNotNull( this->target )) {
HXLINE(  57)			this->target->addEventListener(HX_("click",48,7c,5e,48),this->target_clickHandler_dyn(),null(),null(),null());
            		}
HXLINE(  62)		return this->target;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PointerTrigger_obj,set_target,return )

 ::Dynamic PointerTrigger_obj::set_eventFactory( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_e9b467162ec4266f_72_set_eventFactory)
HXLINE(  73)		if (::hx::IsEq( this->eventFactory,value )) {
HXLINE(  74)			return this->eventFactory;
            		}
HXLINE(  76)		this->eventFactory = value;
HXLINE(  77)		return this->eventFactory;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PointerTrigger_obj,set_eventFactory,return )

void PointerTrigger_obj::target_clickHandler( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_e9b467162ec4266f_90_target_clickHandler)
HXLINE(  91)		if (!(this->enabled)) {
HXLINE(  92)			return;
            		}
HXLINE(  94)		if (::hx::IsNotNull( this->eventFactory )) {
HXLINE(  95)			 ::openfl::display::InteractiveObject _hx_tmp = this->target;
HXDLIN(  95)			_hx_tmp->dispatchEvent(( ( ::openfl::events::Event)(this->eventFactory()) ));
HXLINE(  96)			return;
            		}
HXLINE(  98)		::feathers::events::TriggerEvent_obj::dispatchFromMouseEvent(this->target,event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PointerTrigger_obj,target_clickHandler,(void))

void PointerTrigger_obj::target_touchTapHandler( ::openfl::events::TouchEvent event){
            	HX_STACKFRAME(&_hx_pos_e9b467162ec4266f_101_target_touchTapHandler)
HXLINE( 102)		if (!(this->enabled)) {
HXLINE( 103)			return;
            		}
HXLINE( 105)		if (event->isPrimaryTouchPoint) {
HXLINE( 107)			return;
            		}
HXLINE( 109)		if (::hx::IsNotNull( this->eventFactory )) {
HXLINE( 110)			 ::openfl::display::InteractiveObject _hx_tmp = this->target;
HXDLIN( 110)			_hx_tmp->dispatchEvent(( ( ::openfl::events::Event)(this->eventFactory()) ));
HXLINE( 111)			return;
            		}
HXLINE( 113)		::feathers::events::TriggerEvent_obj::dispatchFromTouchEvent(this->target,event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PointerTrigger_obj,target_touchTapHandler,(void))


::hx::ObjectPtr< PointerTrigger_obj > PointerTrigger_obj::__new( ::openfl::display::InteractiveObject target, ::Dynamic eventFactory) {
	::hx::ObjectPtr< PointerTrigger_obj > __this = new PointerTrigger_obj();
	__this->__construct(target,eventFactory);
	return __this;
}

::hx::ObjectPtr< PointerTrigger_obj > PointerTrigger_obj::__alloc(::hx::Ctx *_hx_ctx, ::openfl::display::InteractiveObject target, ::Dynamic eventFactory) {
	PointerTrigger_obj *__this = (PointerTrigger_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PointerTrigger_obj), true, "feathers.utils.PointerTrigger"));
	*(void **)__this = PointerTrigger_obj::_hx_vtable;
	__this->__construct(target,eventFactory);
	return __this;
}

PointerTrigger_obj::PointerTrigger_obj()
{
}

void PointerTrigger_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PointerTrigger);
	HX_MARK_MEMBER_NAME(target,"target");
	HX_MARK_MEMBER_NAME(eventFactory,"eventFactory");
	HX_MARK_MEMBER_NAME(enabled,"enabled");
	HX_MARK_END_CLASS();
}

void PointerTrigger_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(target,"target");
	HX_VISIT_MEMBER_NAME(eventFactory,"eventFactory");
	HX_VISIT_MEMBER_NAME(enabled,"enabled");
}

::hx::Val PointerTrigger_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { return ::hx::Val( target ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { return ::hx::Val( enabled ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"set_target") ) { return ::hx::Val( set_target_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"eventFactory") ) { return ::hx::Val( eventFactory ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"set_eventFactory") ) { return ::hx::Val( set_eventFactory_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"target_clickHandler") ) { return ::hx::Val( target_clickHandler_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"target_touchTapHandler") ) { return ::hx::Val( target_touchTapHandler_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val PointerTrigger_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_target(inValue.Cast<  ::openfl::display::InteractiveObject >()) );target=inValue.Cast<  ::openfl::display::InteractiveObject >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { enabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"eventFactory") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_eventFactory(inValue.Cast<  ::Dynamic >()) );eventFactory=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PointerTrigger_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("target",51,f3,ec,86));
	outFields->push(HX_("enabled",81,04,31,7e));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PointerTrigger_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::display::InteractiveObject */ ,(int)offsetof(PointerTrigger_obj,target),HX_("target",51,f3,ec,86)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PointerTrigger_obj,eventFactory),HX_("eventFactory",d0,13,2d,38)},
	{::hx::fsBool,(int)offsetof(PointerTrigger_obj,enabled),HX_("enabled",81,04,31,7e)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *PointerTrigger_obj_sStaticStorageInfo = 0;
#endif

static ::String PointerTrigger_obj_sMemberFields[] = {
	HX_("target",51,f3,ec,86),
	HX_("set_target",8e,01,f2,7a),
	HX_("eventFactory",d0,13,2d,38),
	HX_("set_eventFactory",cd,ed,0d,93),
	HX_("enabled",81,04,31,7e),
	HX_("target_clickHandler",50,15,fd,ce),
	HX_("target_touchTapHandler",18,68,f0,9b),
	::String(null()) };

::hx::Class PointerTrigger_obj::__mClass;

void PointerTrigger_obj::__register()
{
	PointerTrigger_obj _hx_dummy;
	PointerTrigger_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("feathers.utils.PointerTrigger",f6,8b,6d,39);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PointerTrigger_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PointerTrigger_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PointerTrigger_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PointerTrigger_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace feathers
} // end namespace utils
