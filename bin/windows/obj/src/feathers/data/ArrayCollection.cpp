// Generated by Haxe 4.1.0
#include <hxcpp.h>

#ifndef INCLUDED_feathers_data_ArrayCollection
#include <feathers/data/ArrayCollection.h>
#endif
#ifndef INCLUDED_feathers_data_IFlatCollection
#include <feathers/data/IFlatCollection.h>
#endif
#ifndef INCLUDED_feathers_events_FeathersEvent
#include <feathers/events/FeathersEvent.h>
#endif
#ifndef INCLUDED_feathers_events_FlatCollectionEvent
#include <feathers/events/FlatCollectionEvent.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_iterators_ArrayIterator
#include <haxe/iterators/ArrayIterator.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_RangeError
#include <openfl/errors/RangeError.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5e7eb2ae850ff3f5_24_new,"feathers.data.ArrayCollection","new",0x694c2ca3,"feathers.data.ArrayCollection.new","feathers/data/ArrayCollection.hx",24,0x494b6c8d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e7eb2ae850ff3f5_53_set_array,"feathers.data.ArrayCollection","set_array",0x584d267f,"feathers.data.ArrayCollection.set_array","feathers/data/ArrayCollection.hx",53,0x494b6c8d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e7eb2ae850ff3f5_71_get_length,"feathers.data.ArrayCollection","get_length",0xcece06cc,"feathers.data.ArrayCollection.get_length","feathers/data/ArrayCollection.hx",71,0x494b6c8d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e7eb2ae850ff3f5_90_get_filterFunction,"feathers.data.ArrayCollection","get_filterFunction",0x8377c6d6,"feathers.data.ArrayCollection.get_filterFunction","feathers/data/ArrayCollection.hx",90,0x494b6c8d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e7eb2ae850ff3f5_93_set_filterFunction,"feathers.data.ArrayCollection","set_filterFunction",0x6026f94a,"feathers.data.ArrayCollection.set_filterFunction","feathers/data/ArrayCollection.hx",93,0x494b6c8d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e7eb2ae850ff3f5_111_get_sortCompareFunction,"feathers.data.ArrayCollection","get_sortCompareFunction",0xa104dd79,"feathers.data.ArrayCollection.get_sortCompareFunction","feathers/data/ArrayCollection.hx",111,0x494b6c8d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e7eb2ae850ff3f5_114_set_sortCompareFunction,"feathers.data.ArrayCollection","set_sortCompareFunction",0xa3664685,"feathers.data.ArrayCollection.set_sortCompareFunction","feathers/data/ArrayCollection.hx",114,0x494b6c8d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e7eb2ae850ff3f5_128_get,"feathers.data.ArrayCollection","get",0x6946dcd9,"feathers.data.ArrayCollection.get","feathers/data/ArrayCollection.hx",128,0x494b6c8d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e7eb2ae850ff3f5_144_set,"feathers.data.ArrayCollection","set",0x694ff7e5,"feathers.data.ArrayCollection.set","feathers/data/ArrayCollection.hx",144,0x494b6c8d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e7eb2ae850ff3f5_192_add,"feathers.data.ArrayCollection","add",0x69424e64,"feathers.data.ArrayCollection.add","feathers/data/ArrayCollection.hx",192,0x494b6c8d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e7eb2ae850ff3f5_199_addAt,"feathers.data.ArrayCollection","addAt",0xf93de877,"feathers.data.ArrayCollection.addAt","feathers/data/ArrayCollection.hx",199,0x494b6c8d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e7eb2ae850ff3f5_206_addAll,"feathers.data.ArrayCollection","addAll",0x1ced791d,"feathers.data.ArrayCollection.addAll","feathers/data/ArrayCollection.hx",206,0x494b6c8d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e7eb2ae850ff3f5_214_addAllAt,"feathers.data.ArrayCollection","addAllAt",0x4e13f370,"feathers.data.ArrayCollection.addAllAt","feathers/data/ArrayCollection.hx",214,0x494b6c8d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e7eb2ae850ff3f5_227_reset,"feathers.data.ArrayCollection","reset",0xc3c27cd2,"feathers.data.ArrayCollection.reset","feathers/data/ArrayCollection.hx",227,0x494b6c8d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e7eb2ae850ff3f5_247_remove,"feathers.data.ArrayCollection","remove",0x827b0be1,"feathers.data.ArrayCollection.remove","feathers/data/ArrayCollection.hx",247,0x494b6c8d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e7eb2ae850ff3f5_267_removeAt,"feathers.data.ArrayCollection","removeAt",0x603ebf34,"feathers.data.ArrayCollection.removeAt","feathers/data/ArrayCollection.hx",267,0x494b6c8d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e7eb2ae850ff3f5_291_removeAll,"feathers.data.ArrayCollection","removeAll",0xd6a887c0,"feathers.data.ArrayCollection.removeAll","feathers/data/ArrayCollection.hx",291,0x494b6c8d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e7eb2ae850ff3f5_310_indexOf,"feathers.data.ArrayCollection","indexOf",0x96ee828c,"feathers.data.ArrayCollection.indexOf","feathers/data/ArrayCollection.hx",310,0x494b6c8d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e7eb2ae850ff3f5_324_contains,"feathers.data.ArrayCollection","contains",0xdf9eaafc,"feathers.data.ArrayCollection.contains","feathers/data/ArrayCollection.hx",324,0x494b6c8d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e7eb2ae850ff3f5_330_iterator,"feathers.data.ArrayCollection","iterator",0x46bd9acb,"feathers.data.ArrayCollection.iterator","feathers/data/ArrayCollection.hx",330,0x494b6c8d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e7eb2ae850ff3f5_343_updateAt,"feathers.data.ArrayCollection","updateAt",0x2b1d6439,"feathers.data.ArrayCollection.updateAt","feathers/data/ArrayCollection.hx",343,0x494b6c8d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e7eb2ae850ff3f5_354_updateAll,"feathers.data.ArrayCollection","updateAll",0x8e9a471b,"feathers.data.ArrayCollection.updateAll","feathers/data/ArrayCollection.hx",354,0x494b6c8d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e7eb2ae850ff3f5_360_refresh,"feathers.data.ArrayCollection","refresh",0xa350139e,"feathers.data.ArrayCollection.refresh","feathers/data/ArrayCollection.hx",360,0x494b6c8d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e7eb2ae850ff3f5_374_refreshFilterAndSort,"feathers.data.ArrayCollection","refreshFilterAndSort",0x1fc0c67f,"feathers.data.ArrayCollection.refreshFilterAndSort","feathers/data/ArrayCollection.hx",374,0x494b6c8d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e7eb2ae850ff3f5_413_getSortedInsertionIndex,"feathers.data.ArrayCollection","getSortedInsertionIndex",0xe6ab4ff9,"feathers.data.ArrayCollection.getSortedInsertionIndex","feathers/data/ArrayCollection.hx",413,0x494b6c8d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e7eb2ae850ff3f5_427_addAtInternal,"feathers.data.ArrayCollection","addAtInternal",0xd5c5dad4,"feathers.data.ArrayCollection.addAtInternal","feathers/data/ArrayCollection.hx",427,0x494b6c8d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e7eb2ae850ff3f5_24_boot,"feathers.data.ArrayCollection","boot",0xb173e28f,"feathers.data.ArrayCollection.boot","feathers/data/ArrayCollection.hx",24,0x494b6c8d)
namespace feathers{
namespace data{

void ArrayCollection_obj::__construct(::cpp::VirtualArray array){
            	HX_STACKFRAME(&_hx_pos_5e7eb2ae850ff3f5_24_new)
HXLINE(  81)		this->_pendingRefresh = false;
HXLINE(  51)		this->array = null();
HXLINE(  38)		this->_filterAndSortData = null();
HXLINE(  31)		super::__construct(null());
HXLINE(  32)		if (::hx::IsNull( array )) {
HXLINE(  33)			array = ::cpp::VirtualArray_obj::__new(0);
            		}
HXLINE(  35)		this->set_array(array);
            	}

Dynamic ArrayCollection_obj::__CreateEmpty() { return new ArrayCollection_obj; }

void *ArrayCollection_obj::_hx_vtable = 0;

Dynamic ArrayCollection_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ArrayCollection_obj > _hx_result = new ArrayCollection_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ArrayCollection_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0780f9f1) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0780f9f1;
	} else {
		return inClassId==(int)0x0c89e854;
	}
}

static ::openfl::events::IEventDispatcher_obj _hx_feathers_data_ArrayCollection__hx_openfl_events_IEventDispatcher= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::data::ArrayCollection_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::data::ArrayCollection_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::data::ArrayCollection_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::data::ArrayCollection_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::data::ArrayCollection_obj::willTrigger,
};

static ::feathers::data::IFlatCollection_obj _hx_feathers_data_ArrayCollection__hx_feathers_data_IFlatCollection= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::data::ArrayCollection_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::data::ArrayCollection_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::data::ArrayCollection_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::data::ArrayCollection_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::data::ArrayCollection_obj::willTrigger,
	( int (::hx::Object::*)())&::feathers::data::ArrayCollection_obj::get_length,
	(  ::Dynamic (::hx::Object::*)())&::feathers::data::ArrayCollection_obj::get_filterFunction,
	(  ::Dynamic (::hx::Object::*)( ::Dynamic))&::feathers::data::ArrayCollection_obj::set_filterFunction,
	(  ::Dynamic (::hx::Object::*)())&::feathers::data::ArrayCollection_obj::get_sortCompareFunction,
	(  ::Dynamic (::hx::Object::*)( ::Dynamic))&::feathers::data::ArrayCollection_obj::set_sortCompareFunction,
	(  ::Dynamic (::hx::Object::*)(int))&::feathers::data::ArrayCollection_obj::get,
	( void (::hx::Object::*)(int, ::Dynamic))&::feathers::data::ArrayCollection_obj::set,
	( void (::hx::Object::*)( ::Dynamic))&::feathers::data::ArrayCollection_obj::add,
	( void (::hx::Object::*)( ::Dynamic,int))&::feathers::data::ArrayCollection_obj::addAt,
	( void (::hx::Object::*)(::Dynamic))&::feathers::data::ArrayCollection_obj::addAll,
	( void (::hx::Object::*)(::Dynamic,int))&::feathers::data::ArrayCollection_obj::addAllAt,
	( void (::hx::Object::*)(::Dynamic))&::feathers::data::ArrayCollection_obj::reset,
	( void (::hx::Object::*)( ::Dynamic))&::feathers::data::ArrayCollection_obj::remove,
	(  ::Dynamic (::hx::Object::*)(int))&::feathers::data::ArrayCollection_obj::removeAt,
	( void (::hx::Object::*)())&::feathers::data::ArrayCollection_obj::removeAll,
	( int (::hx::Object::*)( ::Dynamic))&::feathers::data::ArrayCollection_obj::indexOf,
	( bool (::hx::Object::*)( ::Dynamic))&::feathers::data::ArrayCollection_obj::contains,
	( void (::hx::Object::*)(int))&::feathers::data::ArrayCollection_obj::updateAt,
	( void (::hx::Object::*)())&::feathers::data::ArrayCollection_obj::updateAll,
	(  ::Dynamic (::hx::Object::*)())&::feathers::data::ArrayCollection_obj::iterator,
	( void (::hx::Object::*)())&::feathers::data::ArrayCollection_obj::refresh,
};

void *ArrayCollection_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x87530281: return &_hx_feathers_data_ArrayCollection__hx_openfl_events_IEventDispatcher;
		case (int)0xde3c5fc6: return &_hx_feathers_data_ArrayCollection__hx_feathers_data_IFlatCollection;
	}
	return super::_hx_getInterface(inHash);
}

::cpp::VirtualArray ArrayCollection_obj::set_array(::cpp::VirtualArray value){
            	HX_STACKFRAME(&_hx_pos_5e7eb2ae850ff3f5_53_set_array)
HXLINE(  54)		if (::hx::IsEq( this->array,value )) {
HXLINE(  55)			return this->array;
            		}
HXLINE(  57)		if (::hx::IsNull( value )) {
HXLINE(  58)			value = ::cpp::VirtualArray_obj::__new(0);
            		}
HXLINE(  60)		this->array = value;
HXLINE(  61)		::feathers::events::FlatCollectionEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("reset",cf,49,c8,e6),-1,null(),null(),null(),null());
HXLINE(  62)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE(  63)		return this->array;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ArrayCollection_obj,set_array,return )

int ArrayCollection_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_5e7eb2ae850ff3f5_71_get_length)
HXLINE(  72)		if (this->_pendingRefresh) {
HXLINE(  73)			this->refreshFilterAndSort();
            		}
HXLINE(  75)		if (::hx::IsNotNull( this->_filterAndSortData )) {
HXLINE(  76)			return this->_filterAndSortData->get_length();
            		}
HXLINE(  78)		return this->array->get_length();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ArrayCollection_obj,get_length,return )

 ::Dynamic ArrayCollection_obj::get_filterFunction(){
            	HX_STACKFRAME(&_hx_pos_5e7eb2ae850ff3f5_90_get_filterFunction)
HXDLIN(  90)		return this->filterFunction;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ArrayCollection_obj,get_filterFunction,return )

 ::Dynamic ArrayCollection_obj::set_filterFunction( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_5e7eb2ae850ff3f5_93_set_filterFunction)
HXLINE(  94)		if (::hx::IsEq( this->get_filterFunction(),value )) {
HXLINE(  95)			return this->get_filterFunction();
            		}
HXLINE(  97)		this->filterFunction = value;
HXLINE(  98)		this->_pendingRefresh = true;
HXLINE(  99)		::feathers::events::FlatCollectionEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("filterChange",48,bf,ca,c3),-1,null(),null(),null(),null());
HXLINE( 100)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 101)		return this->get_filterFunction();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ArrayCollection_obj,set_filterFunction,return )

 ::Dynamic ArrayCollection_obj::get_sortCompareFunction(){
            	HX_STACKFRAME(&_hx_pos_5e7eb2ae850ff3f5_111_get_sortCompareFunction)
HXDLIN( 111)		return this->sortCompareFunction;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ArrayCollection_obj,get_sortCompareFunction,return )

 ::Dynamic ArrayCollection_obj::set_sortCompareFunction( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_5e7eb2ae850ff3f5_114_set_sortCompareFunction)
HXLINE( 115)		if (::hx::IsEq( this->get_sortCompareFunction(),value )) {
HXLINE( 116)			return this->get_sortCompareFunction();
            		}
HXLINE( 118)		this->sortCompareFunction = value;
HXLINE( 119)		this->_pendingRefresh = true;
HXLINE( 120)		::feathers::events::FlatCollectionEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("sortChange",6e,07,58,14),-1,null(),null(),null(),null());
HXLINE( 121)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 122)		return this->get_sortCompareFunction();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ArrayCollection_obj,set_sortCompareFunction,return )

 ::Dynamic ArrayCollection_obj::get(int index){
            	HX_GC_STACKFRAME(&_hx_pos_5e7eb2ae850ff3f5_128_get)
HXLINE( 129)		if (this->_pendingRefresh) {
HXLINE( 130)			this->refreshFilterAndSort();
            		}
HXLINE( 132)		bool _hx_tmp;
HXDLIN( 132)		if ((index >= 0)) {
HXLINE( 132)			_hx_tmp = (index >= this->get_length());
            		}
            		else {
HXLINE( 132)			_hx_tmp = true;
            		}
HXDLIN( 132)		if (_hx_tmp) {
HXLINE( 133)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown( ::openfl::errors::RangeError_obj::__alloc( HX_CTX ,((((HX_("Failed to get item at index ",5a,e2,93,4d) + index) + HX_(". Expected a value between 0 and ",35,4d,cd,45)) + (this->get_length() - 1)) + HX_(".",2e,00,00,00)))));
            		}
HXLINE( 135)		if (::hx::IsNotNull( this->_filterAndSortData )) {
HXLINE( 136)			return this->_filterAndSortData->__get(index);
            		}
HXLINE( 138)		return this->array->__get(index);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ArrayCollection_obj,get,return )

void ArrayCollection_obj::set(int index, ::Dynamic item){
            	HX_GC_STACKFRAME(&_hx_pos_5e7eb2ae850ff3f5_144_set)
HXLINE( 145)		if (this->_pendingRefresh) {
HXLINE( 146)			this->refreshFilterAndSort();
            		}
HXLINE( 148)		bool _hx_tmp;
HXDLIN( 148)		if ((index >= 0)) {
HXLINE( 148)			_hx_tmp = (index > this->get_length());
            		}
            		else {
HXLINE( 148)			_hx_tmp = true;
            		}
HXDLIN( 148)		if (_hx_tmp) {
HXLINE( 149)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown( ::openfl::errors::RangeError_obj::__alloc( HX_CTX ,((((HX_("Failed to set item at index ",ce,14,43,2a) + index) + HX_(". Expected a value between 0 and ",35,4d,cd,45)) + this->get_length()) + HX_(".",2e,00,00,00)))));
            		}
HXLINE( 151)		if (::hx::IsNotNull( this->_filterAndSortData )) {
HXLINE( 152)			 ::Dynamic oldItem = this->_filterAndSortData->__get(index);
HXLINE( 153)			int unfilteredIndex = this->array->indexOf(oldItem,null());
HXLINE( 154)			this->array->set(unfilteredIndex,item);
HXLINE( 155)			if (::hx::IsNotNull( this->get_filterFunction() )) {
HXLINE( 156)				bool includeItem = ( (bool)(this->get_filterFunction()(item)) );
HXLINE( 157)				if (includeItem) {
HXLINE( 158)					this->_filterAndSortData->set(index,item);
HXLINE( 159)					::feathers::events::FlatCollectionEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("replaceItem",67,63,5b,5a),index,item,oldItem,null(),null());
HXLINE( 160)					::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 161)					return;
            				}
            				else {
HXLINE( 165)					this->_filterAndSortData->remove(oldItem);
HXLINE( 166)					::feathers::events::FlatCollectionEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("removeItem",77,ff,de,c2),index,null(),oldItem,null(),null());
HXLINE( 167)					::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 168)					return;
            				}
            			}
            			else {
HXLINE( 170)				if (::hx::IsNotNull( this->get_sortCompareFunction() )) {
HXLINE( 172)					this->_filterAndSortData->remove(oldItem);
HXLINE( 174)					int sortedIndex = this->getSortedInsertionIndex(item);
HXLINE( 175)					this->_filterAndSortData->set(sortedIndex,item);
HXLINE( 176)					::feathers::events::FlatCollectionEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("replaceItem",67,63,5b,5a),index,item,oldItem,null(),null());
HXLINE( 177)					::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 178)					return;
            				}
            			}
            		}
HXLINE( 182)		 ::Dynamic oldItem;
HXDLIN( 182)		if ((index < this->array->get_length())) {
HXLINE( 182)			oldItem = this->array->__get(index);
            		}
            		else {
HXLINE( 182)			oldItem = null();
            		}
HXLINE( 183)		this->array->set(index,item);
HXLINE( 184)		::feathers::events::FlatCollectionEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("replaceItem",67,63,5b,5a),index,item,oldItem,null(),null());
HXLINE( 185)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(ArrayCollection_obj,set,(void))

void ArrayCollection_obj::add( ::Dynamic item){
            	HX_STACKFRAME(&_hx_pos_5e7eb2ae850ff3f5_192_add)
HXDLIN( 192)		this->addAtInternal(item,this->array->get_length(),true);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ArrayCollection_obj,add,(void))

void ArrayCollection_obj::addAt( ::Dynamic item,int index){
            	HX_STACKFRAME(&_hx_pos_5e7eb2ae850ff3f5_199_addAt)
HXDLIN( 199)		this->addAtInternal(item,index,true);
            	}


HX_DEFINE_DYNAMIC_FUNC2(ArrayCollection_obj,addAt,(void))

void ArrayCollection_obj::addAll(::Dynamic collection){
            	HX_STACKFRAME(&_hx_pos_5e7eb2ae850ff3f5_206_addAll)
HXDLIN( 206)		 ::Dynamic item = ::feathers::data::IFlatCollection_obj::iterator(collection);
HXDLIN( 206)		while(( (bool)(item->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXDLIN( 206)			 ::Dynamic item1 = item->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXLINE( 207)			this->add(item1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ArrayCollection_obj,addAll,(void))

void ArrayCollection_obj::addAllAt(::Dynamic collection,int index){
            	HX_GC_STACKFRAME(&_hx_pos_5e7eb2ae850ff3f5_214_addAllAt)
HXLINE( 215)		bool _hx_tmp;
HXDLIN( 215)		if ((index >= 0)) {
HXLINE( 215)			_hx_tmp = (index > this->get_length());
            		}
            		else {
HXLINE( 215)			_hx_tmp = true;
            		}
HXDLIN( 215)		if (_hx_tmp) {
HXLINE( 216)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown( ::openfl::errors::RangeError_obj::__alloc( HX_CTX ,((((HX_("Failed to add collection at index ",fa,68,c9,16) + index) + HX_(". Expected a value between 0 and ",35,4d,cd,45)) + this->get_length()) + HX_(".",2e,00,00,00)))));
            		}
HXLINE( 218)		{
HXLINE( 218)			 ::Dynamic item = ::feathers::data::IFlatCollection_obj::iterator(collection);
HXDLIN( 218)			while(( (bool)(item->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 218)				 ::Dynamic item1 = item->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXLINE( 219)				this->addAt(item1,index);
HXLINE( 220)				index = (index + 1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ArrayCollection_obj,addAllAt,(void))

void ArrayCollection_obj::reset(::Dynamic collection){
            	HX_STACKFRAME(&_hx_pos_5e7eb2ae850ff3f5_227_reset)
HXLINE( 228)		if (this->_pendingRefresh) {
HXLINE( 229)			this->refreshFilterAndSort();
            		}
HXLINE( 231)		if (::hx::IsNotNull( this->_filterAndSortData )) {
HXLINE( 232)			this->_filterAndSortData->resize(0);
            		}
HXLINE( 234)		this->array->resize(0);
HXLINE( 235)		if (::hx::IsNotNull( collection )) {
HXLINE( 236)			 ::Dynamic item = ::feathers::data::IFlatCollection_obj::iterator(collection);
HXDLIN( 236)			while(( (bool)(item->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 236)				 ::Dynamic item1 = item->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXLINE( 237)				this->addAtInternal(item1,this->get_length(),false);
            			}
            		}
HXLINE( 240)		::feathers::events::FlatCollectionEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("reset",cf,49,c8,e6),-1,null(),null(),null(),null());
HXLINE( 241)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(ArrayCollection_obj,reset,(void))

void ArrayCollection_obj::remove( ::Dynamic item){
            	HX_STACKFRAME(&_hx_pos_5e7eb2ae850ff3f5_247_remove)
HXLINE( 248)		if (this->_pendingRefresh) {
HXLINE( 249)			this->refreshFilterAndSort();
            		}
HXLINE( 251)		int index = this->indexOf(item);
HXLINE( 252)		if ((index == -1)) {
HXLINE( 254)			return;
            		}
HXLINE( 256)		if (::hx::IsNotNull( this->_filterAndSortData )) {
HXLINE( 257)			this->_filterAndSortData->remove(item);
            		}
HXLINE( 259)		this->array->remove(item);
HXLINE( 260)		::feathers::events::FlatCollectionEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("removeItem",77,ff,de,c2),index,null(),item,null(),null());
HXLINE( 261)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(ArrayCollection_obj,remove,(void))

 ::Dynamic ArrayCollection_obj::removeAt(int index){
            	HX_GC_STACKFRAME(&_hx_pos_5e7eb2ae850ff3f5_267_removeAt)
HXLINE( 268)		if (this->_pendingRefresh) {
HXLINE( 269)			this->refreshFilterAndSort();
            		}
HXLINE( 271)		bool _hx_tmp;
HXDLIN( 271)		if ((index >= 0)) {
HXLINE( 271)			_hx_tmp = (index >= this->get_length());
            		}
            		else {
HXLINE( 271)			_hx_tmp = true;
            		}
HXDLIN( 271)		if (_hx_tmp) {
HXLINE( 272)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown( ::openfl::errors::RangeError_obj::__alloc( HX_CTX ,((((HX_("Failed to remove item at index ",a8,09,90,5e) + index) + HX_(". Expected a value between 0 and ",35,4d,cd,45)) + (this->get_length() - 1)) + HX_(".",2e,00,00,00)))));
            		}
HXLINE( 274)		 ::Dynamic item = null();
HXLINE( 275)		if (::hx::IsNotNull( this->_filterAndSortData )) {
HXLINE( 276)			item = this->_filterAndSortData->__get(index);
HXLINE( 277)			this->_filterAndSortData->remove(item);
HXLINE( 278)			this->array->remove(item);
            		}
            		else {
HXLINE( 280)			item = this->array->__get(index);
HXLINE( 281)			this->array->remove(item);
            		}
HXLINE( 283)		::feathers::events::FlatCollectionEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("removeItem",77,ff,de,c2),index,null(),item,null(),null());
HXLINE( 284)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 285)		return item;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ArrayCollection_obj,removeAt,return )

void ArrayCollection_obj::removeAll(){
            	HX_STACKFRAME(&_hx_pos_5e7eb2ae850ff3f5_291_removeAll)
HXLINE( 292)		if (this->_pendingRefresh) {
HXLINE( 293)			this->refreshFilterAndSort();
            		}
HXLINE( 295)		if ((this->array->get_length() == 0)) {
HXLINE( 297)			return;
            		}
HXLINE( 299)		if (::hx::IsNotNull( this->_filterAndSortData )) {
HXLINE( 300)			this->_filterAndSortData->resize(0);
            		}
HXLINE( 302)		this->array->resize(0);
HXLINE( 303)		::feathers::events::FlatCollectionEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("removeAll",3d,17,e5,ca),-1,null(),null(),null(),null());
HXLINE( 304)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ArrayCollection_obj,removeAll,(void))

int ArrayCollection_obj::indexOf( ::Dynamic item){
            	HX_STACKFRAME(&_hx_pos_5e7eb2ae850ff3f5_310_indexOf)
HXLINE( 311)		if (this->_pendingRefresh) {
HXLINE( 312)			this->refreshFilterAndSort();
            		}
HXLINE( 314)		if (::hx::IsNotNull( this->_filterAndSortData )) {
HXLINE( 315)			return this->_filterAndSortData->indexOf(item,null());
            		}
HXLINE( 317)		return this->array->indexOf(item,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(ArrayCollection_obj,indexOf,return )

bool ArrayCollection_obj::contains( ::Dynamic item){
            	HX_STACKFRAME(&_hx_pos_5e7eb2ae850ff3f5_324_contains)
HXDLIN( 324)		return (this->indexOf(item) != -1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ArrayCollection_obj,contains,return )

 ::Dynamic ArrayCollection_obj::iterator(){
            	HX_GC_STACKFRAME(&_hx_pos_5e7eb2ae850ff3f5_330_iterator)
HXLINE( 331)		if (this->_pendingRefresh) {
HXLINE( 332)			this->refreshFilterAndSort();
            		}
HXLINE( 334)		if (::hx::IsNotNull( this->_filterAndSortData )) {
HXLINE( 335)			return  ::haxe::iterators::ArrayIterator_obj::__alloc( HX_CTX ,this->_filterAndSortData);
            		}
HXLINE( 337)		return  ::haxe::iterators::ArrayIterator_obj::__alloc( HX_CTX ,this->array);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ArrayCollection_obj,iterator,return )

void ArrayCollection_obj::updateAt(int index){
            	HX_GC_STACKFRAME(&_hx_pos_5e7eb2ae850ff3f5_343_updateAt)
HXLINE( 344)		bool _hx_tmp;
HXDLIN( 344)		if ((index >= 0)) {
HXLINE( 344)			_hx_tmp = (index >= this->get_length());
            		}
            		else {
HXLINE( 344)			_hx_tmp = true;
            		}
HXDLIN( 344)		if (_hx_tmp) {
HXLINE( 345)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown( ::openfl::errors::RangeError_obj::__alloc( HX_CTX ,((((HX_("Failed to update item at index ",83,e5,10,25) + index) + HX_(". Expected a value between 0 and ",35,4d,cd,45)) + (this->get_length() - 1)) + HX_(".",2e,00,00,00)))));
            		}
HXLINE( 347)		::feathers::events::FlatCollectionEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("updateItem",bc,af,74,fe),index,null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(ArrayCollection_obj,updateAt,(void))

void ArrayCollection_obj::updateAll(){
            	HX_STACKFRAME(&_hx_pos_5e7eb2ae850ff3f5_354_updateAll)
HXDLIN( 354)		::feathers::events::FlatCollectionEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("updateAll",98,d6,d6,82),-1,null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ArrayCollection_obj,updateAll,(void))

void ArrayCollection_obj::refresh(){
            	HX_STACKFRAME(&_hx_pos_5e7eb2ae850ff3f5_360_refresh)
HXLINE( 361)		bool _hx_tmp;
HXDLIN( 361)		if (::hx::IsNull( this->get_filterFunction() )) {
HXLINE( 361)			_hx_tmp = ::hx::IsNull( this->get_sortCompareFunction() );
            		}
            		else {
HXLINE( 361)			_hx_tmp = false;
            		}
HXDLIN( 361)		if (_hx_tmp) {
HXLINE( 362)			return;
            		}
HXLINE( 364)		this->_pendingRefresh = true;
HXLINE( 365)		if (::hx::IsNotNull( this->get_filterFunction() )) {
HXLINE( 366)			::feathers::events::FlatCollectionEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("filterChange",48,bf,ca,c3),-1,null(),null(),null(),null());
            		}
HXLINE( 368)		if (::hx::IsNotNull( this->get_sortCompareFunction() )) {
HXLINE( 369)			::feathers::events::FlatCollectionEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("sortChange",6e,07,58,14),-1,null(),null(),null(),null());
            		}
HXLINE( 371)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ArrayCollection_obj,refresh,(void))

void ArrayCollection_obj::refreshFilterAndSort(){
            	HX_STACKFRAME(&_hx_pos_5e7eb2ae850ff3f5_374_refreshFilterAndSort)
HXLINE( 375)		this->_pendingRefresh = false;
HXLINE( 376)		if (::hx::IsNotNull( this->get_filterFunction() )) {
HXLINE( 377)			::cpp::VirtualArray result = this->_filterAndSortData;
HXLINE( 378)			if (::hx::IsNotNull( result )) {
HXLINE( 380)				result->resize(0);
            			}
            			else {
HXLINE( 382)				result = ::cpp::VirtualArray_obj::__new(0);
            			}
HXLINE( 384)			{
HXLINE( 384)				int _g = 0;
HXDLIN( 384)				int _g1 = this->array->get_length();
HXDLIN( 384)				while((_g < _g1)){
HXLINE( 384)					_g = (_g + 1);
HXDLIN( 384)					int i = (_g - 1);
HXLINE( 385)					 ::Dynamic item = this->array->__get(i);
HXLINE( 386)					if (( (bool)(this->get_filterFunction()(item)) )) {
HXLINE( 387)						result->push(item);
            					}
            				}
            			}
HXLINE( 390)			this->_filterAndSortData = result;
            		}
            		else {
HXLINE( 391)			if (::hx::IsNotNull( this->get_sortCompareFunction() )) {
HXLINE( 393)				::cpp::VirtualArray result = this->_filterAndSortData;
HXLINE( 394)				if (::hx::IsNotNull( result )) {
HXLINE( 395)					result->resize(this->array->get_length());
HXLINE( 396)					{
HXLINE( 396)						int _g = 0;
HXDLIN( 396)						int _g1 = this->array->get_length();
HXDLIN( 396)						while((_g < _g1)){
HXLINE( 396)							_g = (_g + 1);
HXDLIN( 396)							int i = (_g - 1);
HXLINE( 397)							result->set(i,this->array->__get(i));
            						}
            					}
            				}
            				else {
HXLINE( 401)					result = this->array->slice(0,null());
            				}
HXLINE( 403)				this->_filterAndSortData = result;
            			}
            			else {
HXLINE( 406)				this->_filterAndSortData = null();
            			}
            		}
HXLINE( 408)		if (::hx::IsNotNull( this->get_sortCompareFunction() )) {
HXLINE( 409)			::cpp::VirtualArray _hx_tmp = this->_filterAndSortData;
HXDLIN( 409)			_hx_tmp->sort(this->get_sortCompareFunction());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ArrayCollection_obj,refreshFilterAndSort,(void))

int ArrayCollection_obj::getSortedInsertionIndex( ::Dynamic item){
            	HX_STACKFRAME(&_hx_pos_5e7eb2ae850ff3f5_413_getSortedInsertionIndex)
HXLINE( 414)		if (::hx::IsNull( this->get_sortCompareFunction() )) {
HXLINE( 415)			return this->_filterAndSortData->get_length();
            		}
HXLINE( 417)		{
HXLINE( 417)			int _g = 0;
HXDLIN( 417)			int _g1 = this->_filterAndSortData->get_length();
HXDLIN( 417)			while((_g < _g1)){
HXLINE( 417)				_g = (_g + 1);
HXDLIN( 417)				int i = (_g - 1);
HXLINE( 418)				 ::Dynamic otherItem = this->_filterAndSortData->__get(i);
HXLINE( 419)				int result = ( (int)(this->get_sortCompareFunction()(item,otherItem)) );
HXLINE( 420)				if ((result < 1)) {
HXLINE( 421)					return i;
            				}
            			}
            		}
HXLINE( 424)		return this->_filterAndSortData->get_length();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ArrayCollection_obj,getSortedInsertionIndex,return )

void ArrayCollection_obj::addAtInternal( ::Dynamic item,int index,bool dispatchEvents){
            	HX_GC_STACKFRAME(&_hx_pos_5e7eb2ae850ff3f5_427_addAtInternal)
HXLINE( 428)		if (this->_pendingRefresh) {
HXLINE( 429)			this->refreshFilterAndSort();
            		}
HXLINE( 431)		bool _hx_tmp;
HXDLIN( 431)		if ((index >= 0)) {
HXLINE( 431)			_hx_tmp = (index > this->get_length());
            		}
            		else {
HXLINE( 431)			_hx_tmp = true;
            		}
HXDLIN( 431)		if (_hx_tmp) {
HXLINE( 432)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown( ::openfl::errors::RangeError_obj::__alloc( HX_CTX ,((((HX_("Failed to add item at index ",2f,e5,45,e9) + index) + HX_(". Expected a value between 0 and ",35,4d,cd,45)) + this->get_length()) + HX_(".",2e,00,00,00)))));
            		}
HXLINE( 434)		if (::hx::IsNotNull( this->_filterAndSortData )) {
HXLINE( 437)			int unfilteredIndex = this->array->get_length();
HXLINE( 438)			if ((index < this->_filterAndSortData->get_length())) {
HXLINE( 441)				 ::Dynamic oldItem = this->_filterAndSortData->__get(index);
HXLINE( 442)				unfilteredIndex = this->array->indexOf(oldItem,null());
            			}
HXLINE( 445)			this->array->insert(unfilteredIndex,item);
HXLINE( 447)			bool includeItem = true;
HXLINE( 448)			if (::hx::IsNotNull( this->get_filterFunction() )) {
HXLINE( 449)				includeItem = ( (bool)(this->get_filterFunction()(item)) );
            			}
HXLINE( 451)			if (includeItem) {
HXLINE( 452)				int sortedIndex = index;
HXLINE( 453)				if (::hx::IsNotNull( this->get_sortCompareFunction() )) {
HXLINE( 454)					sortedIndex = this->getSortedInsertionIndex(item);
            				}
HXLINE( 456)				this->_filterAndSortData->insert(sortedIndex,item);
HXLINE( 457)				if (dispatchEvents) {
HXLINE( 459)					::feathers::events::FlatCollectionEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("addItem",d4,07,fd,81),index,item,null(),null(),null());
HXLINE( 460)					::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
            				}
            			}
            		}
            		else {
HXLINE( 464)			this->array->insert(index,item);
HXLINE( 465)			if (dispatchEvents) {
HXLINE( 466)				::feathers::events::FlatCollectionEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("addItem",d4,07,fd,81),index,item,null(),null(),null());
HXLINE( 467)				::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(ArrayCollection_obj,addAtInternal,(void))


::hx::ObjectPtr< ArrayCollection_obj > ArrayCollection_obj::__new(::cpp::VirtualArray array) {
	::hx::ObjectPtr< ArrayCollection_obj > __this = new ArrayCollection_obj();
	__this->__construct(array);
	return __this;
}

::hx::ObjectPtr< ArrayCollection_obj > ArrayCollection_obj::__alloc(::hx::Ctx *_hx_ctx,::cpp::VirtualArray array) {
	ArrayCollection_obj *__this = (ArrayCollection_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ArrayCollection_obj), true, "feathers.data.ArrayCollection"));
	*(void **)__this = ArrayCollection_obj::_hx_vtable;
	__this->__construct(array);
	return __this;
}

ArrayCollection_obj::ArrayCollection_obj()
{
}

void ArrayCollection_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ArrayCollection);
	HX_MARK_MEMBER_NAME(_filterAndSortData,"_filterAndSortData");
	HX_MARK_MEMBER_NAME(array,"array");
	HX_MARK_MEMBER_NAME(_pendingRefresh,"_pendingRefresh");
	HX_MARK_MEMBER_NAME(filterFunction,"filterFunction");
	HX_MARK_MEMBER_NAME(sortCompareFunction,"sortCompareFunction");
	 ::openfl::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ArrayCollection_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_filterAndSortData,"_filterAndSortData");
	HX_VISIT_MEMBER_NAME(array,"array");
	HX_VISIT_MEMBER_NAME(_pendingRefresh,"_pendingRefresh");
	HX_VISIT_MEMBER_NAME(filterFunction,"filterFunction");
	HX_VISIT_MEMBER_NAME(sortCompareFunction,"sortCompareFunction");
	 ::openfl::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ArrayCollection_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return ::hx::Val( get_dyn() ); }
		if (HX_FIELD_EQ(inName,"set") ) { return ::hx::Val( set_dyn() ); }
		if (HX_FIELD_EQ(inName,"add") ) { return ::hx::Val( add_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"array") ) { return ::hx::Val( array ); }
		if (HX_FIELD_EQ(inName,"addAt") ) { return ::hx::Val( addAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"reset") ) { return ::hx::Val( reset_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_length() ); }
		if (HX_FIELD_EQ(inName,"addAll") ) { return ::hx::Val( addAll_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return ::hx::Val( remove_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"indexOf") ) { return ::hx::Val( indexOf_dyn() ); }
		if (HX_FIELD_EQ(inName,"refresh") ) { return ::hx::Val( refresh_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"addAllAt") ) { return ::hx::Val( addAllAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeAt") ) { return ::hx::Val( removeAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"contains") ) { return ::hx::Val( contains_dyn() ); }
		if (HX_FIELD_EQ(inName,"iterator") ) { return ::hx::Val( iterator_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateAt") ) { return ::hx::Val( updateAt_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"set_array") ) { return ::hx::Val( set_array_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeAll") ) { return ::hx::Val( removeAll_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateAll") ) { return ::hx::Val( updateAll_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_length") ) { return ::hx::Val( get_length_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"addAtInternal") ) { return ::hx::Val( addAtInternal_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"filterFunction") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_filterFunction() : filterFunction ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_pendingRefresh") ) { return ::hx::Val( _pendingRefresh ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_filterAndSortData") ) { return ::hx::Val( _filterAndSortData ); }
		if (HX_FIELD_EQ(inName,"get_filterFunction") ) { return ::hx::Val( get_filterFunction_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_filterFunction") ) { return ::hx::Val( set_filterFunction_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"sortCompareFunction") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_sortCompareFunction() : sortCompareFunction ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"refreshFilterAndSort") ) { return ::hx::Val( refreshFilterAndSort_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"get_sortCompareFunction") ) { return ::hx::Val( get_sortCompareFunction_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_sortCompareFunction") ) { return ::hx::Val( set_sortCompareFunction_dyn() ); }
		if (HX_FIELD_EQ(inName,"getSortedInsertionIndex") ) { return ::hx::Val( getSortedInsertionIndex_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ArrayCollection_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"array") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_array(inValue.Cast< ::cpp::VirtualArray >()) );array=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"filterFunction") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_filterFunction(inValue.Cast<  ::Dynamic >()) );filterFunction=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_pendingRefresh") ) { _pendingRefresh=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_filterAndSortData") ) { _filterAndSortData=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"sortCompareFunction") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_sortCompareFunction(inValue.Cast<  ::Dynamic >()) );sortCompareFunction=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ArrayCollection_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_filterAndSortData",88,de,33,6e));
	outFields->push(HX_("array",99,6d,8f,25));
	outFields->push(HX_("length",e6,94,07,9f));
	outFields->push(HX_("_pendingRefresh",e3,7a,4d,d1));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ArrayCollection_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(ArrayCollection_obj,_filterAndSortData),HX_("_filterAndSortData",88,de,33,6e)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(ArrayCollection_obj,array),HX_("array",99,6d,8f,25)},
	{::hx::fsBool,(int)offsetof(ArrayCollection_obj,_pendingRefresh),HX_("_pendingRefresh",e3,7a,4d,d1)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ArrayCollection_obj,filterFunction),HX_("filterFunction",f0,fe,73,09)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ArrayCollection_obj,sortCompareFunction),HX_("sortCompareFunction",1f,07,05,4b)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ArrayCollection_obj_sStaticStorageInfo = 0;
#endif

static ::String ArrayCollection_obj_sMemberFields[] = {
	HX_("_filterAndSortData",88,de,33,6e),
	HX_("array",99,6d,8f,25),
	HX_("set_array",fc,b5,89,4c),
	HX_("get_length",af,04,8f,8f),
	HX_("_pendingRefresh",e3,7a,4d,d1),
	HX_("filterFunction",f0,fe,73,09),
	HX_("get_filterFunction",b9,df,0d,a5),
	HX_("set_filterFunction",2d,12,bd,81),
	HX_("sortCompareFunction",1f,07,05,4b),
	HX_("get_sortCompareFunction",b6,ad,5a,53),
	HX_("set_sortCompareFunction",c2,16,bc,55),
	HX_("get",96,80,4e,00),
	HX_("set",a2,9b,57,00),
	HX_("add",21,f2,49,00),
	HX_("addAt",74,b5,43,1c),
	HX_("addAll",80,09,fb,9e),
	HX_("addAllAt",93,a2,f0,9a),
	HX_("reset",cf,49,c8,e6),
	HX_("remove",44,9c,88,04),
	HX_("removeAt",57,6e,1b,ad),
	HX_("removeAll",3d,17,e5,ca),
	HX_("indexOf",c9,48,bf,e0),
	HX_("contains",1f,5a,7b,2c),
	HX_("iterator",ee,49,9a,93),
	HX_("updateAt",5c,13,fa,77),
	HX_("updateAll",98,d6,d6,82),
	HX_("refresh",db,d9,20,ed),
	HX_("refreshFilterAndSort",22,1e,b9,65),
	HX_("getSortedInsertionIndex",36,20,01,99),
	HX_("addAtInternal",d1,6c,0c,de),
	::String(null()) };

::hx::Class ArrayCollection_obj::__mClass;

void ArrayCollection_obj::__register()
{
	ArrayCollection_obj _hx_dummy;
	ArrayCollection_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("feathers.data.ArrayCollection",31,9f,b2,1c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ArrayCollection_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ArrayCollection_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ArrayCollection_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ArrayCollection_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ArrayCollection_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_5e7eb2ae850ff3f5_24_boot)
HXDLIN(  24)		__mClass->__meta__ =  ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("obj",f7,8f,54,00), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("defaultXmlProperty",0b,06,d9,8a),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("array",99,6d,8f,25))))));
            	}
}

} // end namespace feathers
} // end namespace data
