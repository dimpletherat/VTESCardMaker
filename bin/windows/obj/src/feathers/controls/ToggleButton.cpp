// Generated by Haxe 4.1.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_feathers_controls_BasicToggleButton
#include <feathers/controls/BasicToggleButton.h>
#endif
#ifndef INCLUDED_feathers_controls_IToggle
#include <feathers/controls/IToggle.h>
#endif
#ifndef INCLUDED_feathers_controls_ToggleButton
#include <feathers/controls/ToggleButton.h>
#endif
#ifndef INCLUDED_feathers_controls_ToggleButtonState
#include <feathers/controls/ToggleButtonState.h>
#endif
#ifndef INCLUDED_feathers_core_FeathersControl
#include <feathers/core/FeathersControl.h>
#endif
#ifndef INCLUDED_feathers_core_IDisplayObject
#include <feathers/core/IDisplayObject.h>
#endif
#ifndef INCLUDED_feathers_core_IFocusObject
#include <feathers/core/IFocusObject.h>
#endif
#ifndef INCLUDED_feathers_core_IMeasureObject
#include <feathers/core/IMeasureObject.h>
#endif
#ifndef INCLUDED_feathers_core_IStateContext
#include <feathers/core/IStateContext.h>
#endif
#ifndef INCLUDED_feathers_core_IStateObserver
#include <feathers/core/IStateObserver.h>
#endif
#ifndef INCLUDED_feathers_core_ITextControl
#include <feathers/core/ITextControl.h>
#endif
#ifndef INCLUDED_feathers_core_IUIControl
#include <feathers/core/IUIControl.h>
#endif
#ifndef INCLUDED_feathers_core_IValidating
#include <feathers/core/IValidating.h>
#endif
#ifndef INCLUDED_feathers_core_MeasureSprite
#include <feathers/core/MeasureSprite.h>
#endif
#ifndef INCLUDED_feathers_core_ValidatingSprite
#include <feathers/core/ValidatingSprite.h>
#endif
#ifndef INCLUDED_feathers_layout_HorizontalAlign
#include <feathers/layout/HorizontalAlign.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayoutObject
#include <feathers/layout/ILayoutObject.h>
#endif
#ifndef INCLUDED_feathers_layout_Measurements
#include <feathers/layout/Measurements.h>
#endif
#ifndef INCLUDED_feathers_layout_RelativePosition
#include <feathers/layout/RelativePosition.h>
#endif
#ifndef INCLUDED_feathers_layout_VerticalAlign
#include <feathers/layout/VerticalAlign.h>
#endif
#ifndef INCLUDED_feathers_style_IDarkModeTheme
#include <feathers/style/IDarkModeTheme.h>
#endif
#ifndef INCLUDED_feathers_style_IStyleObject
#include <feathers/style/IStyleObject.h>
#endif
#ifndef INCLUDED_feathers_style_ITheme
#include <feathers/style/ITheme.h>
#endif
#ifndef INCLUDED_feathers_style_IVariantStyleObject
#include <feathers/style/IVariantStyleObject.h>
#endif
#ifndef INCLUDED_feathers_themes_ClassVariantTheme
#include <feathers/themes/ClassVariantTheme.h>
#endif
#ifndef INCLUDED_feathers_themes_steel_BaseSteelTheme
#include <feathers/themes/steel/BaseSteelTheme.h>
#endif
#ifndef INCLUDED_feathers_themes_steel_components_SteelToggleButtonStyles
#include <feathers/themes/steel/components/SteelToggleButtonStyles.h>
#endif
#ifndef INCLUDED_feathers_utils_MeasurementsUtil
#include <feathers/utils/MeasurementsUtil.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <haxe/ds/EnumValueMap.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0a2fccb1c21dad55_51_new,"feathers.controls.ToggleButton","new",0x64aa64b2,"feathers.controls.ToggleButton.new","feathers/controls/ToggleButton.hx",51,0x2c819b1e)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2fccb1c21dad55_88_get_text,"feathers.controls.ToggleButton","get_text",0x8b490aa4,"feathers.controls.ToggleButton.get_text","feathers/controls/ToggleButton.hx",88,0x2c819b1e)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2fccb1c21dad55_91_set_text,"feathers.controls.ToggleButton","set_text",0x39a66418,"feathers.controls.ToggleButton.set_text","feathers/controls/ToggleButton.hx",91,0x2c819b1e)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2fccb1c21dad55_494_getTextFormatForState,"feathers.controls.ToggleButton","getTextFormatForState",0x07d2c134,"feathers.controls.ToggleButton.getTextFormatForState","feathers/controls/ToggleButton.hx",494,0x2c819b1e)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2fccb1c21dad55_512_setTextFormatForState,"feathers.controls.ToggleButton","setTextFormatForState",0x5bdb8f40,"feathers.controls.ToggleButton.setTextFormatForState","feathers/controls/ToggleButton.hx",512,0x2c819b1e)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2fccb1c21dad55_538_getIconForState,"feathers.controls.ToggleButton","getIconForState",0x79855fe9,"feathers.controls.ToggleButton.getIconForState","feathers/controls/ToggleButton.hx",538,0x2c819b1e)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2fccb1c21dad55_556_setIconForState,"feathers.controls.ToggleButton","setIconForState",0x7550dcf5,"feathers.controls.ToggleButton.setIconForState","feathers/controls/ToggleButton.hx",556,0x2c819b1e)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2fccb1c21dad55_574_initializeToggleButtonTheme,"feathers.controls.ToggleButton","initializeToggleButtonTheme",0x73976665,"feathers.controls.ToggleButton.initializeToggleButtonTheme","feathers/controls/ToggleButton.hx",574,0x2c819b1e)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2fccb1c21dad55_577_initialize,"feathers.controls.ToggleButton","initialize",0xdb47ab3e,"feathers.controls.ToggleButton.initialize","feathers/controls/ToggleButton.hx",577,0x2c819b1e)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2fccb1c21dad55_586_update,"feathers.controls.ToggleButton","update",0x0636f0f7,"feathers.controls.ToggleButton.update","feathers/controls/ToggleButton.hx",586,0x2c819b1e)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2fccb1c21dad55_610_measure,"feathers.controls.ToggleButton","measure",0x08f620b0,"feathers.controls.ToggleButton.measure","feathers/controls/ToggleButton.hx",610,0x2c819b1e)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2fccb1c21dad55_768_refreshTextStyles,"feathers.controls.ToggleButton","refreshTextStyles",0xdf8f043c,"feathers.controls.ToggleButton.refreshTextStyles","feathers/controls/ToggleButton.hx",768,0x2c819b1e)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2fccb1c21dad55_785_refreshText,"feathers.controls.ToggleButton","refreshText",0x0df3927a,"feathers.controls.ToggleButton.refreshText","feathers/controls/ToggleButton.hx",785,0x2c819b1e)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2fccb1c21dad55_807_getCurrentTextFormat,"feathers.controls.ToggleButton","getCurrentTextFormat",0x382f3755,"feathers.controls.ToggleButton.getCurrentTextFormat","feathers/controls/ToggleButton.hx",807,0x2c819b1e)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2fccb1c21dad55_821_layoutContent,"feathers.controls.ToggleButton","layoutContent",0x23377e81,"feathers.controls.ToggleButton.layoutContent","feathers/controls/ToggleButton.hx",821,0x2c819b1e)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2fccb1c21dad55_836_refreshTextFieldDimensions,"feathers.controls.ToggleButton","refreshTextFieldDimensions",0x019f924d,"feathers.controls.ToggleButton.refreshTextFieldDimensions","feathers/controls/ToggleButton.hx",836,0x2c819b1e)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2fccb1c21dad55_897_positionSingleChild,"feathers.controls.ToggleButton","positionSingleChild",0x7ab0341d,"feathers.controls.ToggleButton.positionSingleChild","feathers/controls/ToggleButton.hx",897,0x2c819b1e)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2fccb1c21dad55_916_positionTextAndIcon,"feathers.controls.ToggleButton","positionTextAndIcon",0xa834eeec,"feathers.controls.ToggleButton.positionTextAndIcon","feathers/controls/ToggleButton.hx",916,0x2c819b1e)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2fccb1c21dad55_987_refreshIcon,"feathers.controls.ToggleButton","refreshIcon",0x06acad46,"feathers.controls.ToggleButton.refreshIcon","feathers/controls/ToggleButton.hx",987,0x2c819b1e)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2fccb1c21dad55_1012_getCurrentIcon,"feathers.controls.ToggleButton","getCurrentIcon",0xaffe1c4a,"feathers.controls.ToggleButton.getCurrentIcon","feathers/controls/ToggleButton.hx",1012,0x2c819b1e)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2fccb1c21dad55_1026_removeCurrentIcon,"feathers.controls.ToggleButton","removeCurrentIcon",0x78601a40,"feathers.controls.ToggleButton.removeCurrentIcon","feathers/controls/ToggleButton.hx",1026,0x2c819b1e)
HX_LOCAL_STACK_FRAME(_hx_pos_0ad027dc407a7d82_42_get_styleContext,"feathers.controls.ToggleButton","get_styleContext",0xf8c21db5,"feathers.controls.ToggleButton.get_styleContext","feathers/macros/StyleContextMacro.hx",42,0xea61cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_7c2c418178ac41a1_68_set_icon,"feathers.controls.ToggleButton","set_icon",0x325f7ee4,"feathers.controls.ToggleButton.set_icon","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7c2c418178ac41a1_94_clearStyle_icon,"feathers.controls.ToggleButton","clearStyle_icon",0x99be7bc6,"feathers.controls.ToggleButton.clearStyle_icon","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7c2c418178ac41a1_68_set_disabledIcon,"feathers.controls.ToggleButton","set_disabledIcon",0x78773d80,"feathers.controls.ToggleButton.set_disabledIcon","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7c2c418178ac41a1_94_clearStyle_disabledIcon,"feathers.controls.ToggleButton","clearStyle_disabledIcon",0x4a50ec62,"feathers.controls.ToggleButton.clearStyle_disabledIcon","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7c2c418178ac41a1_68_set_selectedIcon,"feathers.controls.ToggleButton","set_selectedIcon",0xdecf81df,"feathers.controls.ToggleButton.set_selectedIcon","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7c2c418178ac41a1_94_clearStyle_selectedIcon,"feathers.controls.ToggleButton","clearStyle_selectedIcon",0xb0a930c1,"feathers.controls.ToggleButton.clearStyle_selectedIcon","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7c2c418178ac41a1_68_set_textFormat,"feathers.controls.ToggleButton","set_textFormat",0x74af896f,"feathers.controls.ToggleButton.set_textFormat","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7c2c418178ac41a1_94_clearStyle_textFormat,"feathers.controls.ToggleButton","clearStyle_textFormat",0x8d665bd1,"feathers.controls.ToggleButton.clearStyle_textFormat","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7c2c418178ac41a1_68_set_embedFonts,"feathers.controls.ToggleButton","set_embedFonts",0xcf1240d6,"feathers.controls.ToggleButton.set_embedFonts","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7c2c418178ac41a1_94_clearStyle_embedFonts,"feathers.controls.ToggleButton","clearStyle_embedFonts",0xe7c91338,"feathers.controls.ToggleButton.clearStyle_embedFonts","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7c2c418178ac41a1_68_set_disabledTextFormat,"feathers.controls.ToggleButton","set_disabledTextFormat",0x2b3e250b,"feathers.controls.ToggleButton.set_disabledTextFormat","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7c2c418178ac41a1_94_clearStyle_disabledTextFormat,"feathers.controls.ToggleButton","clearStyle_disabledTextFormat",0xb281296d,"feathers.controls.ToggleButton.clearStyle_disabledTextFormat","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7c2c418178ac41a1_68_set_selectedTextFormat,"feathers.controls.ToggleButton","set_selectedTextFormat",0x05987aaa,"feathers.controls.ToggleButton.set_selectedTextFormat","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7c2c418178ac41a1_94_clearStyle_selectedTextFormat,"feathers.controls.ToggleButton","clearStyle_selectedTextFormat",0x8cdb7f0c,"feathers.controls.ToggleButton.clearStyle_selectedTextFormat","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7c2c418178ac41a1_68_set_iconPosition,"feathers.controls.ToggleButton","set_iconPosition",0x7ebb5fad,"feathers.controls.ToggleButton.set_iconPosition","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7c2c418178ac41a1_94_clearStyle_iconPosition,"feathers.controls.ToggleButton","clearStyle_iconPosition",0x50950e8f,"feathers.controls.ToggleButton.clearStyle_iconPosition","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7c2c418178ac41a1_68_set_gap,"feathers.controls.ToggleButton","set_gap",0xe5d0fc0b,"feathers.controls.ToggleButton.set_gap","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7c2c418178ac41a1_94_clearStyle_gap,"feathers.controls.ToggleButton","clearStyle_gap",0x5230b169,"feathers.controls.ToggleButton.clearStyle_gap","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7c2c418178ac41a1_68_set_minGap,"feathers.controls.ToggleButton","set_minGap",0x357672cf,"feathers.controls.ToggleButton.set_minGap","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7c2c418178ac41a1_94_clearStyle_minGap,"feathers.controls.ToggleButton","clearStyle_minGap",0x7037ec31,"feathers.controls.ToggleButton.clearStyle_minGap","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7c2c418178ac41a1_68_set_paddingTop,"feathers.controls.ToggleButton","set_paddingTop",0x7a3676ef,"feathers.controls.ToggleButton.set_paddingTop","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7c2c418178ac41a1_94_clearStyle_paddingTop,"feathers.controls.ToggleButton","clearStyle_paddingTop",0x92ed4951,"feathers.controls.ToggleButton.clearStyle_paddingTop","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7c2c418178ac41a1_68_set_paddingRight,"feathers.controls.ToggleButton","set_paddingRight",0x232a66b6,"feathers.controls.ToggleButton.set_paddingRight","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7c2c418178ac41a1_94_clearStyle_paddingRight,"feathers.controls.ToggleButton","clearStyle_paddingRight",0xf5041598,"feathers.controls.ToggleButton.clearStyle_paddingRight","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7c2c418178ac41a1_68_set_paddingBottom,"feathers.controls.ToggleButton","set_paddingBottom",0xb9420ad1,"feathers.controls.ToggleButton.set_paddingBottom","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7c2c418178ac41a1_94_clearStyle_paddingBottom,"feathers.controls.ToggleButton","clearStyle_paddingBottom",0x85e161af,"feathers.controls.ToggleButton.clearStyle_paddingBottom","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7c2c418178ac41a1_68_set_paddingLeft,"feathers.controls.ToggleButton","set_paddingLeft",0x7020466d,"feathers.controls.ToggleButton.set_paddingLeft","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7c2c418178ac41a1_94_clearStyle_paddingLeft,"feathers.controls.ToggleButton","clearStyle_paddingLeft",0xf76189cb,"feathers.controls.ToggleButton.clearStyle_paddingLeft","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7c2c418178ac41a1_68_set_horizontalAlign,"feathers.controls.ToggleButton","set_horizontalAlign",0x93e729b6,"feathers.controls.ToggleButton.set_horizontalAlign","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7c2c418178ac41a1_94_clearStyle_horizontalAlign,"feathers.controls.ToggleButton","clearStyle_horizontalAlign",0x48307414,"feathers.controls.ToggleButton.clearStyle_horizontalAlign","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7c2c418178ac41a1_68_set_verticalAlign,"feathers.controls.ToggleButton","set_verticalAlign",0x4e24c1a4,"feathers.controls.ToggleButton.set_verticalAlign","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7c2c418178ac41a1_94_clearStyle_verticalAlign,"feathers.controls.ToggleButton","clearStyle_verticalAlign",0x1ac41882,"feathers.controls.ToggleButton.clearStyle_verticalAlign","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2fccb1c21dad55_51_boot,"feathers.controls.ToggleButton","boot",0xa886b7a0,"feathers.controls.ToggleButton.boot","feathers/controls/ToggleButton.hx",51,0x2c819b1e)
namespace feathers{
namespace controls{

void ToggleButton_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_0a2fccb1c21dad55_51_new)
HXLINE( 478)		this->_stateToTextFormat =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
HXLINE( 474)		this->verticalAlign = ::feathers::layout::VerticalAlign_obj::MIDDLE_dyn();
HXLINE( 454)		this->horizontalAlign = ::feathers::layout::HorizontalAlign_obj::CENTER_dyn();
HXLINE( 434)		this->paddingLeft = ((Float)0.0);
HXLINE( 416)		this->paddingBottom = ((Float)0.0);
HXLINE( 398)		this->paddingRight = ((Float)0.0);
HXLINE( 380)		this->paddingTop = ((Float)0.0);
HXLINE( 363)		this->minGap = ((Float)0.0);
HXLINE( 342)		this->gap = ((Float)0.0);
HXLINE( 317)		this->iconPosition = ::feathers::layout::RelativePosition_obj::LEFT_dyn();
HXLINE( 299)		this->selectedTextFormat = null();
HXLINE( 266)		this->disabledTextFormat = null();
HXLINE( 234)		this->embedFonts = false;
HXLINE( 218)		this->textFormat = null();
HXLINE( 199)		this->selectedIcon = null();
HXLINE( 166)		this->disabledIcon = null();
HXLINE( 134)		this->icon = null();
HXLINE( 103)		this->_ignoreIconResizes = false;
HXLINE( 102)		this->_currentIcon = null();
HXLINE( 101)		this->_iconMeasurements = null();
HXLINE( 100)		this->_stateToIcon =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
HXLINE(  67)		this->_updatedTextStyles = false;
HXLINE(  66)		this->_previousTextFormat = null();
HXLINE(  65)		this->_previousText = null();
HXLINE(  58)		this->initializeToggleButtonTheme();
HXLINE(  60)		super::__construct();
            	}

Dynamic ToggleButton_obj::__CreateEmpty() { return new ToggleButton_obj; }

void *ToggleButton_obj::_hx_vtable = 0;

Dynamic ToggleButton_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ToggleButton_obj > _hx_result = new ToggleButton_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ToggleButton_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x093ab78b) {
				if (inClassId<=(int)0x0330636f) {
					return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
				} else {
					return inClassId==(int)0x093ab78b;
				}
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1727ecc2 || inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			if (inClassId<=(int)0x482d5eec) {
				return inClassId==(int)0x4033f4be || inClassId==(int)0x482d5eec;
			} else {
				return inClassId==(int)0x4af7dd8e;
			}
		} else {
			return inClassId==(int)0x58123034 || inClassId==(int)0x6b353933;
		}
	}
}

static ::openfl::events::IEventDispatcher_obj _hx_feathers_controls_ToggleButton__hx_openfl_events_IEventDispatcher= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::ToggleButton_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::ToggleButton_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::ToggleButton_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::ToggleButton_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::ToggleButton_obj::willTrigger,
};

static ::feathers::core::ITextControl_obj _hx_feathers_controls_ToggleButton__hx_feathers_core_ITextControl= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::ToggleButton_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::ToggleButton_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::ToggleButton_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::ToggleButton_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::ToggleButton_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::ToggleButton_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::ToggleButton_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::ToggleButton_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::ToggleButton_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::ToggleButton_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::ToggleButton_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::ToggleButton_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::ToggleButton_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::ToggleButton_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::ToggleButton_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::ToggleButton_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::ToggleButton_obj::set_scaleY,
	( Float (::hx::Object::*)())&::feathers::controls::ToggleButton_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::ToggleButton_obj::set_alpha,
	( bool (::hx::Object::*)())&::feathers::controls::ToggleButton_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::ToggleButton_obj::set_visible,
	( bool (::hx::Object::*)())&::feathers::controls::ToggleButton_obj::get_enabled,
	( bool (::hx::Object::*)(bool))&::feathers::controls::ToggleButton_obj::set_enabled,
	( void (::hx::Object::*)())&::feathers::controls::ToggleButton_obj::initializeNow,
	( ::String (::hx::Object::*)())&::feathers::controls::ToggleButton_obj::get_text,
	( ::String (::hx::Object::*)(::String))&::feathers::controls::ToggleButton_obj::set_text,
};

static ::feathers::core::IFocusObject_obj _hx_feathers_controls_ToggleButton__hx_feathers_core_IFocusObject= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::ToggleButton_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::ToggleButton_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::ToggleButton_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::ToggleButton_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::ToggleButton_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::ToggleButton_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::ToggleButton_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::ToggleButton_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::ToggleButton_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::ToggleButton_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::ToggleButton_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::ToggleButton_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::ToggleButton_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::ToggleButton_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::ToggleButton_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::ToggleButton_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::ToggleButton_obj::set_scaleY,
	( Float (::hx::Object::*)())&::feathers::controls::ToggleButton_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::ToggleButton_obj::set_alpha,
	( bool (::hx::Object::*)())&::feathers::controls::ToggleButton_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::ToggleButton_obj::set_visible,
	( ::Dynamic (::hx::Object::*)())&::feathers::controls::ToggleButton_obj::get_focusManager,
	( ::Dynamic (::hx::Object::*)(::Dynamic))&::feathers::controls::ToggleButton_obj::set_focusManager,
	( bool (::hx::Object::*)())&::feathers::controls::ToggleButton_obj::get_focusEnabled,
	( bool (::hx::Object::*)(bool))&::feathers::controls::ToggleButton_obj::set_focusEnabled,
	( void (::hx::Object::*)(bool))&::feathers::controls::ToggleButton_obj::showFocus,
};

static ::feathers::core::IUIControl_obj _hx_feathers_controls_ToggleButton__hx_feathers_core_IUIControl= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::ToggleButton_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::ToggleButton_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::ToggleButton_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::ToggleButton_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::ToggleButton_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::ToggleButton_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::ToggleButton_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::ToggleButton_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::ToggleButton_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::ToggleButton_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::ToggleButton_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::ToggleButton_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::ToggleButton_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::ToggleButton_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::ToggleButton_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::ToggleButton_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::ToggleButton_obj::set_scaleY,
	( Float (::hx::Object::*)())&::feathers::controls::ToggleButton_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::ToggleButton_obj::set_alpha,
	( bool (::hx::Object::*)())&::feathers::controls::ToggleButton_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::ToggleButton_obj::set_visible,
	( bool (::hx::Object::*)())&::feathers::controls::ToggleButton_obj::get_enabled,
	( bool (::hx::Object::*)(bool))&::feathers::controls::ToggleButton_obj::set_enabled,
	( void (::hx::Object::*)())&::feathers::controls::ToggleButton_obj::initializeNow,
};

static ::feathers::core::IDisplayObject_obj _hx_feathers_controls_ToggleButton__hx_feathers_core_IDisplayObject= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::ToggleButton_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::ToggleButton_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::ToggleButton_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::ToggleButton_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::ToggleButton_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::ToggleButton_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::ToggleButton_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::ToggleButton_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::ToggleButton_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::ToggleButton_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::ToggleButton_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::ToggleButton_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::ToggleButton_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::ToggleButton_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::ToggleButton_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::ToggleButton_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::ToggleButton_obj::set_scaleY,
	( Float (::hx::Object::*)())&::feathers::controls::ToggleButton_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::ToggleButton_obj::set_alpha,
	( bool (::hx::Object::*)())&::feathers::controls::ToggleButton_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::ToggleButton_obj::set_visible,
};

void *ToggleButton_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x87530281: return &_hx_feathers_controls_ToggleButton__hx_openfl_events_IEventDispatcher;
		case (int)0xfccd2876: return &_hx_feathers_controls_ToggleButton__hx_feathers_core_ITextControl;
		case (int)0x701686fd: return &_hx_feathers_controls_ToggleButton__hx_feathers_core_IFocusObject;
		case (int)0x2696a04f: return &_hx_feathers_controls_ToggleButton__hx_feathers_core_IUIControl;
		case (int)0x3a979a67: return &_hx_feathers_controls_ToggleButton__hx_feathers_core_IDisplayObject;
	}
	return super::_hx_getInterface(inHash);
}

::String ToggleButton_obj::get_text(){
            	HX_STACKFRAME(&_hx_pos_0a2fccb1c21dad55_88_get_text)
HXDLIN(  88)		return this->text;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ToggleButton_obj,get_text,return )

::String ToggleButton_obj::set_text(::String value){
            	HX_STACKFRAME(&_hx_pos_0a2fccb1c21dad55_91_set_text)
HXLINE(  92)		if ((this->get_text() == value)) {
HXLINE(  93)			return this->get_text();
            		}
HXLINE(  95)		this->text = value;
HXLINE(  96)		this->setInvalid(HX_("data",2a,56,63,42));
HXLINE(  97)		return this->get_text();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ToggleButton_obj,set_text,return )

 ::openfl::text::TextFormat ToggleButton_obj::getTextFormatForState( ::feathers::controls::ToggleButtonState state){
            	HX_STACKFRAME(&_hx_pos_0a2fccb1c21dad55_494_getTextFormatForState)
HXDLIN( 494)		return this->_stateToTextFormat->get(state).StaticCast<  ::openfl::text::TextFormat >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ToggleButton_obj,getTextFormatForState,return )

void ToggleButton_obj::setTextFormatForState( ::feathers::controls::ToggleButtonState state, ::openfl::text::TextFormat textFormat){
            	HX_STACKFRAME(&_hx_pos_0a2fccb1c21dad55_512_setTextFormatForState)
HXLINE( 513)		if (!(this->setStyle(HX_("setTextFormatForState",6e,7e,1f,fc),state))) {
HXLINE( 514)			return;
            		}
HXLINE( 516)		if (::hx::IsNull( textFormat )) {
HXLINE( 517)			this->_stateToTextFormat->remove(state);
            		}
            		else {
HXLINE( 519)			this->_stateToTextFormat->set(state,textFormat);
            		}
HXLINE( 521)		this->setInvalid(HX_("styles",22,e6,d2,15));
            	}


HX_DEFINE_DYNAMIC_FUNC2(ToggleButton_obj,setTextFormatForState,(void))

 ::openfl::display::DisplayObject ToggleButton_obj::getIconForState( ::feathers::controls::ToggleButtonState state){
            	HX_STACKFRAME(&_hx_pos_0a2fccb1c21dad55_538_getIconForState)
HXDLIN( 538)		return this->_stateToIcon->get(state).StaticCast<  ::openfl::display::DisplayObject >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ToggleButton_obj,getIconForState,return )

void ToggleButton_obj::setIconForState( ::feathers::controls::ToggleButtonState state, ::openfl::display::DisplayObject icon){
            	HX_STACKFRAME(&_hx_pos_0a2fccb1c21dad55_556_setIconForState)
HXLINE( 557)		if (!(this->setStyle(HX_("setIconForState",a3,15,c4,47),state))) {
HXLINE( 558)			return;
            		}
HXLINE( 560)		 ::openfl::display::DisplayObject oldIcon = this->_stateToIcon->get(state).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 561)		bool _hx_tmp;
HXDLIN( 561)		if (::hx::IsNotNull( oldIcon )) {
HXLINE( 561)			_hx_tmp = ::hx::IsEq( oldIcon,this->_currentIcon );
            		}
            		else {
HXLINE( 561)			_hx_tmp = false;
            		}
HXDLIN( 561)		if (_hx_tmp) {
HXLINE( 562)			this->removeCurrentIcon(oldIcon);
HXLINE( 563)			this->_currentIcon = null();
            		}
HXLINE( 565)		if (::hx::IsNull( icon )) {
HXLINE( 566)			this->_stateToIcon->remove(state);
            		}
            		else {
HXLINE( 568)			this->_stateToIcon->set(state,icon);
            		}
HXLINE( 570)		this->setInvalid(HX_("styles",22,e6,d2,15));
            	}


HX_DEFINE_DYNAMIC_FUNC2(ToggleButton_obj,setIconForState,(void))

void ToggleButton_obj::initializeToggleButtonTheme(){
            	HX_STACKFRAME(&_hx_pos_0a2fccb1c21dad55_574_initializeToggleButtonTheme)
HXDLIN( 574)		::feathers::themes::steel::components::SteelToggleButtonStyles_obj::initialize(null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ToggleButton_obj,initializeToggleButtonTheme,(void))

void ToggleButton_obj::initialize(){
            	HX_GC_STACKFRAME(&_hx_pos_0a2fccb1c21dad55_577_initialize)
HXLINE( 578)		this->super::initialize();
HXLINE( 579)		if (::hx::IsNull( this->textField )) {
HXLINE( 580)			this->textField =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE( 581)			this->textField->set_selectable(false);
HXLINE( 582)			this->addChild(this->textField);
            		}
            	}


void ToggleButton_obj::update(){
            	HX_STACKFRAME(&_hx_pos_0a2fccb1c21dad55_586_update)
HXLINE( 587)		bool dataInvalid = this->isInvalid(HX_("data",2a,56,63,42));
HXLINE( 588)		bool stateInvalid = this->isInvalid(HX_("state",11,76,0b,84));
HXLINE( 589)		bool stylesInvalid = this->isInvalid(HX_("styles",22,e6,d2,15));
HXLINE( 591)		this->_updatedTextStyles = false;
HXLINE( 593)		bool _hx_tmp;
HXDLIN( 593)		if (!(stylesInvalid)) {
HXLINE( 593)			_hx_tmp = stateInvalid;
            		}
            		else {
HXLINE( 593)			_hx_tmp = true;
            		}
HXDLIN( 593)		if (_hx_tmp) {
HXLINE( 594)			this->refreshIcon();
            		}
HXLINE( 597)		bool _hx_tmp1;
HXDLIN( 597)		if (!(stylesInvalid)) {
HXLINE( 597)			_hx_tmp1 = stateInvalid;
            		}
            		else {
HXLINE( 597)			_hx_tmp1 = true;
            		}
HXDLIN( 597)		if (_hx_tmp1) {
HXLINE( 598)			this->refreshTextStyles();
            		}
HXLINE( 601)		bool _hx_tmp2;
HXDLIN( 601)		bool _hx_tmp3;
HXDLIN( 601)		if (!(dataInvalid)) {
HXLINE( 601)			_hx_tmp3 = stylesInvalid;
            		}
            		else {
HXLINE( 601)			_hx_tmp3 = true;
            		}
HXDLIN( 601)		if (!(_hx_tmp3)) {
HXLINE( 601)			_hx_tmp2 = stateInvalid;
            		}
            		else {
HXLINE( 601)			_hx_tmp2 = true;
            		}
HXDLIN( 601)		if (_hx_tmp2) {
HXLINE( 602)			this->refreshText();
            		}
HXLINE( 605)		this->super::update();
HXLINE( 607)		this->layoutContent();
            	}


bool ToggleButton_obj::measure(){
            	HX_STACKFRAME(&_hx_pos_0a2fccb1c21dad55_610_measure)
HXLINE( 611)		bool needsWidth = ::hx::IsNull( this->get_explicitWidth() );
HXLINE( 612)		bool needsHeight = ::hx::IsNull( this->get_explicitHeight() );
HXLINE( 613)		bool needsMinWidth = ::hx::IsNull( this->get_explicitMinWidth() );
HXLINE( 614)		bool needsMinHeight = ::hx::IsNull( this->get_explicitMinHeight() );
HXLINE( 615)		bool needsMaxWidth = ::hx::IsNull( this->get_explicitMaxWidth() );
HXLINE( 616)		bool needsMaxHeight = ::hx::IsNull( this->get_explicitMaxHeight() );
HXLINE( 617)		bool _hx_tmp;
HXDLIN( 617)		bool _hx_tmp1;
HXDLIN( 617)		bool _hx_tmp2;
HXDLIN( 617)		bool _hx_tmp3;
HXDLIN( 617)		bool _hx_tmp4;
HXDLIN( 617)		if (!(needsWidth)) {
HXLINE( 617)			_hx_tmp4 = !(needsHeight);
            		}
            		else {
HXLINE( 617)			_hx_tmp4 = false;
            		}
HXDLIN( 617)		if (_hx_tmp4) {
HXLINE( 617)			_hx_tmp3 = !(needsMinWidth);
            		}
            		else {
HXLINE( 617)			_hx_tmp3 = false;
            		}
HXDLIN( 617)		if (_hx_tmp3) {
HXLINE( 617)			_hx_tmp2 = !(needsMinHeight);
            		}
            		else {
HXLINE( 617)			_hx_tmp2 = false;
            		}
HXDLIN( 617)		if (_hx_tmp2) {
HXLINE( 617)			_hx_tmp1 = !(needsMaxWidth);
            		}
            		else {
HXLINE( 617)			_hx_tmp1 = false;
            		}
HXDLIN( 617)		if (_hx_tmp1) {
HXLINE( 617)			_hx_tmp = !(needsMaxHeight);
            		}
            		else {
HXLINE( 617)			_hx_tmp = false;
            		}
HXDLIN( 617)		if (_hx_tmp) {
HXLINE( 618)			return false;
            		}
HXLINE( 621)		bool hasText;
HXDLIN( 621)		if (::hx::IsNotNull( this->get_text() )) {
HXLINE( 621)			hasText = (this->get_text().length > 0);
            		}
            		else {
HXLINE( 621)			hasText = false;
            		}
HXLINE( 622)		if (hasText) {
HXLINE( 623)			this->refreshTextFieldDimensions(true);
            		}
HXLINE( 626)		if (::hx::IsNotNull( this->_currentBackgroundSkin )) {
HXLINE( 627)			::feathers::utils::MeasurementsUtil_obj::resetFluidlyWithParent(this->_backgroundSkinMeasurements,this->_currentBackgroundSkin,::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 630)		::Dynamic measureSkin = null();
HXLINE( 631)		if (::Std_obj::isOfType(this->_currentBackgroundSkin,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IMeasureObject >()) ))) {
HXLINE( 632)			measureSkin =  ::hx::interface_check(this->_currentBackgroundSkin,0xcfc32883);
            		}
HXLINE( 635)		if (::Std_obj::isOfType(this->_currentBackgroundSkin,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IValidating >()) ))) {
HXLINE( 636)			::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->_currentBackgroundSkin,0x64d4b3cd));
            		}
HXLINE( 639)		if (::Std_obj::isOfType(this->_currentIcon,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IValidating >()) ))) {
HXLINE( 640)			::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->_currentIcon,0x64d4b3cd));
            		}
HXLINE( 643)		Float adjustedGap = this->gap;
HXLINE( 644)		if ((adjustedGap == ::Math_obj::POSITIVE_INFINITY)) {
HXLINE( 645)			adjustedGap = this->minGap;
            		}
HXLINE( 648)		 ::Dynamic newWidth = this->get_explicitWidth();
HXLINE( 649)		if (needsWidth) {
HXLINE( 650)			if (hasText) {
HXLINE( 651)				newWidth = this->_textMeasuredWidth;
            			}
            			else {
HXLINE( 653)				newWidth = ((Float)0.0);
            			}
HXLINE( 655)			if (::hx::IsNotNull( this->_currentIcon )) {
HXLINE( 656)				bool _hx_tmp;
HXDLIN( 656)				if (::hx::IsNotEq( this->iconPosition,::feathers::layout::RelativePosition_obj::LEFT_dyn() )) {
HXLINE( 656)					_hx_tmp = ::hx::IsEq( this->iconPosition,::feathers::layout::RelativePosition_obj::RIGHT_dyn() );
            				}
            				else {
HXLINE( 656)					_hx_tmp = true;
            				}
HXDLIN( 656)				if (_hx_tmp) {
HXLINE( 657)					if (hasText) {
HXLINE( 658)						newWidth = (newWidth + adjustedGap);
            					}
HXLINE( 660)					newWidth = (newWidth + this->_currentIcon->get_width());
            				}
            				else {
HXLINE( 661)					bool _hx_tmp;
HXDLIN( 661)					if (::hx::IsNotEq( this->iconPosition,::feathers::layout::RelativePosition_obj::TOP_dyn() )) {
HXLINE( 661)						_hx_tmp = ::hx::IsEq( this->iconPosition,::feathers::layout::RelativePosition_obj::BOTTOM_dyn() );
            					}
            					else {
HXLINE( 661)						_hx_tmp = true;
            					}
HXDLIN( 661)					if (_hx_tmp) {
HXLINE( 662)						newWidth = ::Math_obj::max(( (Float)(newWidth) ),this->_currentIcon->get_width());
            					}
            				}
            			}
HXLINE( 665)			newWidth = (newWidth + (this->paddingLeft + this->paddingRight));
HXLINE( 666)			if (::hx::IsNotNull( this->_currentBackgroundSkin )) {
HXLINE( 667)				newWidth = ::Math_obj::max(this->_currentBackgroundSkin->get_width(),( (Float)(newWidth) ));
            			}
            		}
HXLINE( 671)		 ::Dynamic newHeight = this->get_explicitHeight();
HXLINE( 672)		if (needsHeight) {
HXLINE( 673)			if (hasText) {
HXLINE( 674)				newHeight = this->_textMeasuredHeight;
            			}
            			else {
HXLINE( 676)				newHeight = ((Float)0.0);
            			}
HXLINE( 678)			if (::hx::IsNotNull( this->_currentIcon )) {
HXLINE( 679)				bool _hx_tmp;
HXDLIN( 679)				if (::hx::IsNotEq( this->iconPosition,::feathers::layout::RelativePosition_obj::TOP_dyn() )) {
HXLINE( 679)					_hx_tmp = ::hx::IsEq( this->iconPosition,::feathers::layout::RelativePosition_obj::BOTTOM_dyn() );
            				}
            				else {
HXLINE( 679)					_hx_tmp = true;
            				}
HXDLIN( 679)				if (_hx_tmp) {
HXLINE( 680)					if (hasText) {
HXLINE( 681)						newHeight = (newHeight + adjustedGap);
            					}
HXLINE( 683)					newHeight = (newHeight + this->_currentIcon->get_height());
            				}
            				else {
HXLINE( 684)					bool _hx_tmp;
HXDLIN( 684)					if (::hx::IsNotEq( this->iconPosition,::feathers::layout::RelativePosition_obj::LEFT_dyn() )) {
HXLINE( 684)						_hx_tmp = ::hx::IsEq( this->iconPosition,::feathers::layout::RelativePosition_obj::RIGHT_dyn() );
            					}
            					else {
HXLINE( 684)						_hx_tmp = true;
            					}
HXDLIN( 684)					if (_hx_tmp) {
HXLINE( 685)						newHeight = ::Math_obj::max(( (Float)(newHeight) ),this->_currentIcon->get_height());
            					}
            				}
            			}
HXLINE( 688)			newHeight = (newHeight + (this->paddingTop + this->paddingBottom));
HXLINE( 689)			if (::hx::IsNotNull( this->_currentBackgroundSkin )) {
HXLINE( 690)				newHeight = ::Math_obj::max(this->_currentBackgroundSkin->get_height(),( (Float)(newHeight) ));
            			}
            		}
HXLINE( 694)		 ::Dynamic newMinWidth = this->get_explicitMinWidth();
HXLINE( 695)		if (needsMinWidth) {
HXLINE( 696)			if (hasText) {
HXLINE( 697)				newMinWidth = this->_textMeasuredWidth;
            			}
            			else {
HXLINE( 699)				newMinWidth = ((Float)0.0);
            			}
HXLINE( 701)			if (::hx::IsNotNull( this->_currentIcon )) {
HXLINE( 702)				bool _hx_tmp;
HXDLIN( 702)				if (::hx::IsNotEq( this->iconPosition,::feathers::layout::RelativePosition_obj::LEFT_dyn() )) {
HXLINE( 702)					_hx_tmp = ::hx::IsEq( this->iconPosition,::feathers::layout::RelativePosition_obj::RIGHT_dyn() );
            				}
            				else {
HXLINE( 702)					_hx_tmp = true;
            				}
HXDLIN( 702)				if (_hx_tmp) {
HXLINE( 703)					if (hasText) {
HXLINE( 704)						newMinWidth = (newMinWidth + adjustedGap);
            					}
HXLINE( 706)					newMinWidth = (newMinWidth + this->_currentIcon->get_width());
            				}
            				else {
HXLINE( 707)					bool _hx_tmp;
HXDLIN( 707)					if (::hx::IsNotEq( this->iconPosition,::feathers::layout::RelativePosition_obj::TOP_dyn() )) {
HXLINE( 707)						_hx_tmp = ::hx::IsEq( this->iconPosition,::feathers::layout::RelativePosition_obj::BOTTOM_dyn() );
            					}
            					else {
HXLINE( 707)						_hx_tmp = true;
            					}
HXDLIN( 707)					if (_hx_tmp) {
HXLINE( 708)						newMinWidth = ::Math_obj::max(( (Float)(newMinWidth) ),this->_currentIcon->get_width());
            					}
            				}
            			}
HXLINE( 711)			newMinWidth = (newMinWidth + (this->paddingLeft + this->paddingRight));
HXLINE( 712)			if (::hx::IsNotNull( measureSkin )) {
HXLINE( 713)				newMinWidth = ::Math_obj::max(::feathers::core::IMeasureObject_obj::get_minWidth(measureSkin),( (Float)(newMinWidth) ));
            			}
            			else {
HXLINE( 714)				if (::hx::IsNotNull( this->_backgroundSkinMeasurements )) {
HXLINE( 715)					newMinWidth = ::Math_obj::max(( (Float)(this->_backgroundSkinMeasurements->minWidth) ),( (Float)(newMinWidth) ));
            				}
            			}
            		}
HXLINE( 719)		 ::Dynamic newMinHeight = this->get_explicitMinHeight();
HXLINE( 720)		if (needsMinHeight) {
HXLINE( 721)			if (hasText) {
HXLINE( 722)				newMinHeight = this->_textMeasuredHeight;
            			}
            			else {
HXLINE( 724)				newMinHeight = ((Float)0.0);
            			}
HXLINE( 726)			if (::hx::IsNotNull( this->_currentIcon )) {
HXLINE( 727)				bool _hx_tmp;
HXDLIN( 727)				if (::hx::IsNotEq( this->iconPosition,::feathers::layout::RelativePosition_obj::TOP_dyn() )) {
HXLINE( 727)					_hx_tmp = ::hx::IsEq( this->iconPosition,::feathers::layout::RelativePosition_obj::BOTTOM_dyn() );
            				}
            				else {
HXLINE( 727)					_hx_tmp = true;
            				}
HXDLIN( 727)				if (_hx_tmp) {
HXLINE( 728)					if (hasText) {
HXLINE( 729)						newMinHeight = (newMinHeight + adjustedGap);
            					}
HXLINE( 731)					newMinHeight = (newMinHeight + this->_currentIcon->get_height());
            				}
            				else {
HXLINE( 732)					bool _hx_tmp;
HXDLIN( 732)					if (::hx::IsNotEq( this->iconPosition,::feathers::layout::RelativePosition_obj::LEFT_dyn() )) {
HXLINE( 732)						_hx_tmp = ::hx::IsEq( this->iconPosition,::feathers::layout::RelativePosition_obj::RIGHT_dyn() );
            					}
            					else {
HXLINE( 732)						_hx_tmp = true;
            					}
HXDLIN( 732)					if (_hx_tmp) {
HXLINE( 733)						newMinHeight = ::Math_obj::max(( (Float)(newMinHeight) ),this->_currentIcon->get_height());
            					}
            				}
            			}
HXLINE( 736)			newMinHeight = (newMinHeight + (this->paddingTop + this->paddingBottom));
HXLINE( 737)			if (::hx::IsNotNull( measureSkin )) {
HXLINE( 738)				newMinHeight = ::Math_obj::max(::feathers::core::IMeasureObject_obj::get_minHeight(measureSkin),( (Float)(newMinHeight) ));
            			}
            			else {
HXLINE( 739)				if (::hx::IsNotNull( this->_backgroundSkinMeasurements )) {
HXLINE( 740)					newMinHeight = ::Math_obj::max(( (Float)(this->_backgroundSkinMeasurements->minHeight) ),( (Float)(newMinHeight) ));
            				}
            			}
            		}
HXLINE( 743)		 ::Dynamic newMaxWidth = this->get_explicitMaxWidth();
HXLINE( 744)		if (needsMaxWidth) {
HXLINE( 745)			if (::hx::IsNotNull( measureSkin )) {
HXLINE( 746)				newMaxWidth = ::feathers::core::IMeasureObject_obj::get_maxWidth(measureSkin);
            			}
            			else {
HXLINE( 747)				if (::hx::IsNotNull( this->_backgroundSkinMeasurements )) {
HXLINE( 748)					newMaxWidth = this->_backgroundSkinMeasurements->maxWidth;
            				}
            				else {
HXLINE( 750)					newMaxWidth = ::Math_obj::POSITIVE_INFINITY;
            				}
            			}
            		}
HXLINE( 754)		 ::Dynamic newMaxHeight = this->get_explicitMaxHeight();
HXLINE( 755)		if (needsMaxHeight) {
HXLINE( 756)			if (::hx::IsNotNull( measureSkin )) {
HXLINE( 757)				newMaxHeight = ::feathers::core::IMeasureObject_obj::get_maxHeight(measureSkin);
            			}
            			else {
HXLINE( 758)				if (::hx::IsNotNull( this->_backgroundSkinMeasurements )) {
HXLINE( 759)					newMaxHeight = this->_backgroundSkinMeasurements->maxHeight;
            				}
            				else {
HXLINE( 761)					newMaxHeight = ::Math_obj::POSITIVE_INFINITY;
            				}
            			}
            		}
HXLINE( 765)		return this->saveMeasurements(( (Float)(newWidth) ),( (Float)(newHeight) ),newMinWidth,newMinHeight,newMaxWidth,newMaxHeight);
            	}


void ToggleButton_obj::refreshTextStyles(){
            	HX_STACKFRAME(&_hx_pos_0a2fccb1c21dad55_768_refreshTextStyles)
HXLINE( 769)		bool _hx_tmp = this->textField->get_embedFonts();
HXDLIN( 769)		if ((_hx_tmp != this->embedFonts)) {
HXLINE( 770)			this->textField->set_embedFonts(this->embedFonts);
HXLINE( 771)			this->_updatedTextStyles = true;
            		}
HXLINE( 773)		 ::openfl::text::TextFormat textFormat = this->getCurrentTextFormat();
HXLINE( 774)		if (::hx::IsEq( textFormat,this->_previousTextFormat )) {
HXLINE( 776)			return;
            		}
HXLINE( 778)		if (::hx::IsNotNull( textFormat )) {
HXLINE( 779)			this->textField->set_defaultTextFormat(textFormat);
HXLINE( 780)			this->_updatedTextStyles = true;
HXLINE( 781)			this->_previousTextFormat = textFormat;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ToggleButton_obj,refreshTextStyles,(void))

void ToggleButton_obj::refreshText(){
            	HX_STACKFRAME(&_hx_pos_0a2fccb1c21dad55_785_refreshText)
HXLINE( 786)		bool _hx_tmp;
HXDLIN( 786)		::String _hx_tmp1 = this->get_text();
HXDLIN( 786)		if ((_hx_tmp1 == this->_previousText)) {
HXLINE( 786)			_hx_tmp = !(this->_updatedTextStyles);
            		}
            		else {
HXLINE( 786)			_hx_tmp = false;
            		}
HXDLIN( 786)		if (_hx_tmp) {
HXLINE( 788)			return;
            		}
HXLINE( 790)		bool hasText;
HXDLIN( 790)		if (::hx::IsNotNull( this->get_text() )) {
HXLINE( 790)			hasText = (this->get_text().length > 0);
            		}
            		else {
HXLINE( 790)			hasText = false;
            		}
HXLINE( 791)		if (hasText) {
HXLINE( 792)			 ::openfl::text::TextField _hx_tmp = this->textField;
HXDLIN( 792)			_hx_tmp->set_text(this->get_text());
            		}
            		else {
HXLINE( 794)			this->textField->set_text(HX_W(u"\u8203",81e3,00b0));
            		}
HXLINE( 796)		this->textField->set_autoSize(1);
HXLINE( 797)		this->_textMeasuredWidth = this->textField->get_width();
HXLINE( 798)		this->_textMeasuredHeight = this->textField->get_height();
HXLINE( 799)		this->textField->set_autoSize(2);
HXLINE( 800)		if (!(hasText)) {
HXLINE( 801)			this->textField->set_text(HX_("",00,00,00,00));
            		}
HXLINE( 803)		this->textField->set_visible(hasText);
HXLINE( 804)		this->_previousText = this->get_text();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ToggleButton_obj,refreshText,(void))

 ::openfl::text::TextFormat ToggleButton_obj::getCurrentTextFormat(){
            	HX_STACKFRAME(&_hx_pos_0a2fccb1c21dad55_807_getCurrentTextFormat)
HXLINE( 808)		::Dynamic this1 = this->_stateToTextFormat;
HXDLIN( 808)		 ::openfl::text::TextFormat result = ( ( ::haxe::ds::EnumValueMap)(this1) )->get(this->get_currentState()).StaticCast<  ::openfl::text::TextFormat >();
HXLINE( 809)		if (::hx::IsNotNull( result )) {
HXLINE( 810)			return result;
            		}
HXLINE( 812)		bool _hx_tmp;
HXDLIN( 812)		if (!(this->get_enabled())) {
HXLINE( 812)			_hx_tmp = ::hx::IsNotNull( this->disabledTextFormat );
            		}
            		else {
HXLINE( 812)			_hx_tmp = false;
            		}
HXDLIN( 812)		if (_hx_tmp) {
HXLINE( 813)			return this->disabledTextFormat;
            		}
HXLINE( 815)		bool _hx_tmp1;
HXDLIN( 815)		if (this->get_selected()) {
HXLINE( 815)			_hx_tmp1 = ::hx::IsNotNull( this->selectedTextFormat );
            		}
            		else {
HXLINE( 815)			_hx_tmp1 = false;
            		}
HXDLIN( 815)		if (_hx_tmp1) {
HXLINE( 816)			return this->selectedTextFormat;
            		}
HXLINE( 818)		return this->textFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ToggleButton_obj,getCurrentTextFormat,return )

void ToggleButton_obj::layoutContent(){
            	HX_STACKFRAME(&_hx_pos_0a2fccb1c21dad55_821_layoutContent)
HXLINE( 822)		this->refreshTextFieldDimensions(false);
HXLINE( 824)		bool hasText;
HXDLIN( 824)		if (::hx::IsNotNull( this->get_text() )) {
HXLINE( 824)			hasText = (this->get_text().length > 0);
            		}
            		else {
HXLINE( 824)			hasText = false;
            		}
HXLINE( 825)		bool iconIsInLayout;
HXDLIN( 825)		if (::hx::IsNotNull( this->_currentIcon )) {
HXLINE( 825)			iconIsInLayout = ::hx::IsNotEq( this->iconPosition,::feathers::layout::RelativePosition_obj::MANUAL_dyn() );
            		}
            		else {
HXLINE( 825)			iconIsInLayout = false;
            		}
HXLINE( 826)		bool _hx_tmp;
HXDLIN( 826)		if (hasText) {
HXLINE( 826)			_hx_tmp = iconIsInLayout;
            		}
            		else {
HXLINE( 826)			_hx_tmp = false;
            		}
HXDLIN( 826)		if (_hx_tmp) {
HXLINE( 827)			this->positionSingleChild(this->textField);
HXLINE( 828)			this->positionTextAndIcon();
            		}
            		else {
HXLINE( 829)			if (hasText) {
HXLINE( 830)				this->positionSingleChild(this->textField);
            			}
            			else {
HXLINE( 831)				if (iconIsInLayout) {
HXLINE( 832)					this->positionSingleChild(this->_currentIcon);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ToggleButton_obj,layoutContent,(void))

void ToggleButton_obj::refreshTextFieldDimensions(bool forMeasurement){
            	HX_STACKFRAME(&_hx_pos_0a2fccb1c21dad55_836_refreshTextFieldDimensions)
HXLINE( 837)		bool oldIgnoreIconResizes = this->_ignoreIconResizes;
HXLINE( 838)		this->_ignoreIconResizes = true;
HXLINE( 839)		if (::Std_obj::isOfType(this->_currentIcon,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IValidating >()) ))) {
HXLINE( 840)			::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->_currentIcon,0x64d4b3cd));
            		}
HXLINE( 842)		this->_ignoreIconResizes = oldIgnoreIconResizes;
HXLINE( 843)		bool _hx_tmp;
HXDLIN( 843)		if (::hx::IsNotNull( this->get_text() )) {
HXLINE( 843)			_hx_tmp = (this->get_text().length == 0);
            		}
            		else {
HXLINE( 843)			_hx_tmp = true;
            		}
HXDLIN( 843)		if (_hx_tmp) {
HXLINE( 844)			return;
            		}
HXLINE( 847)		Float calculatedWidth = this->actualWidth;
HXLINE( 848)		Float calculatedHeight = this->actualHeight;
HXLINE( 849)		if (forMeasurement) {
HXLINE( 850)			calculatedWidth = ((Float)0.0);
HXLINE( 851)			 ::Dynamic explicitCalculatedWidth = this->get_explicitWidth();
HXLINE( 852)			if (::hx::IsNull( explicitCalculatedWidth )) {
HXLINE( 853)				explicitCalculatedWidth = this->get_explicitMaxWidth();
            			}
HXLINE( 855)			if (::hx::IsNotNull( explicitCalculatedWidth )) {
HXLINE( 856)				calculatedWidth = ( (Float)(explicitCalculatedWidth) );
            			}
HXLINE( 858)			calculatedHeight = ((Float)0.0);
HXLINE( 859)			 ::Dynamic explicitCalculatedHeight = this->get_explicitHeight();
HXLINE( 860)			if (::hx::IsNull( explicitCalculatedHeight )) {
HXLINE( 861)				explicitCalculatedHeight = this->get_explicitMaxHeight();
            			}
HXLINE( 863)			if (::hx::IsNotNull( explicitCalculatedHeight )) {
HXLINE( 864)				calculatedHeight = ( (Float)(explicitCalculatedHeight) );
            			}
            		}
HXLINE( 867)		calculatedWidth = (calculatedWidth - (this->paddingLeft + this->paddingRight));
HXLINE( 868)		calculatedHeight = (calculatedHeight - (this->paddingTop + this->paddingBottom));
HXLINE( 869)		if (::hx::IsNotNull( this->_currentIcon )) {
HXLINE( 870)			Float adjustedGap = this->gap;
HXLINE( 871)			if ((adjustedGap == ::Math_obj::POSITIVE_INFINITY)) {
HXLINE( 872)				adjustedGap = this->minGap;
            			}
HXLINE( 874)			bool _hx_tmp;
HXDLIN( 874)			if (::hx::IsNotEq( this->iconPosition,::feathers::layout::RelativePosition_obj::LEFT_dyn() )) {
HXLINE( 874)				_hx_tmp = ::hx::IsEq( this->iconPosition,::feathers::layout::RelativePosition_obj::RIGHT_dyn() );
            			}
            			else {
HXLINE( 874)				_hx_tmp = true;
            			}
HXDLIN( 874)			if (_hx_tmp) {
HXLINE( 875)				calculatedWidth = (calculatedWidth - (this->_currentIcon->get_width() + adjustedGap));
            			}
HXLINE( 877)			bool _hx_tmp1;
HXDLIN( 877)			if (::hx::IsNotEq( this->iconPosition,::feathers::layout::RelativePosition_obj::TOP_dyn() )) {
HXLINE( 877)				_hx_tmp1 = ::hx::IsEq( this->iconPosition,::feathers::layout::RelativePosition_obj::BOTTOM_dyn() );
            			}
            			else {
HXLINE( 877)				_hx_tmp1 = true;
            			}
HXDLIN( 877)			if (_hx_tmp1) {
HXLINE( 878)				calculatedHeight = (calculatedHeight - (this->_currentIcon->get_height() + adjustedGap));
            			}
            		}
HXLINE( 881)		if ((calculatedWidth < ((Float)0.0))) {
HXLINE( 882)			calculatedWidth = ((Float)0.0);
            		}
HXLINE( 884)		if ((calculatedHeight < ((Float)0.0))) {
HXLINE( 885)			calculatedHeight = ((Float)0.0);
            		}
HXLINE( 887)		if ((calculatedWidth > this->_textMeasuredWidth)) {
HXLINE( 888)			calculatedWidth = this->_textMeasuredWidth;
            		}
HXLINE( 890)		if ((calculatedHeight > this->_textMeasuredHeight)) {
HXLINE( 891)			calculatedHeight = this->_textMeasuredHeight;
            		}
HXLINE( 893)		this->textField->set_width(calculatedWidth);
HXLINE( 894)		this->textField->set_height(calculatedHeight);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ToggleButton_obj,refreshTextFieldDimensions,(void))

void ToggleButton_obj::positionSingleChild( ::openfl::display::DisplayObject displayObject){
            	HX_STACKFRAME(&_hx_pos_0a2fccb1c21dad55_897_positionSingleChild)
HXLINE( 898)		if (::hx::IsEq( this->horizontalAlign,::feathers::layout::HorizontalAlign_obj::LEFT_dyn() )) {
HXLINE( 899)			displayObject->set_x(this->paddingLeft);
            		}
            		else {
HXLINE( 900)			if (::hx::IsEq( this->horizontalAlign,::feathers::layout::HorizontalAlign_obj::RIGHT_dyn() )) {
HXLINE( 901)				Float _hx_tmp = (this->actualWidth - this->paddingRight);
HXDLIN( 901)				displayObject->set_x((_hx_tmp - displayObject->get_width()));
            			}
            			else {
HXLINE( 904)				Float _hx_tmp = this->paddingLeft;
HXDLIN( 904)				Float _hx_tmp1 = ((this->actualWidth - this->paddingLeft) - this->paddingRight);
HXDLIN( 904)				displayObject->set_x((_hx_tmp + ((_hx_tmp1 - displayObject->get_width()) / ((Float)2.0))));
            			}
            		}
HXLINE( 906)		if (::hx::IsEq( this->verticalAlign,::feathers::layout::VerticalAlign_obj::TOP_dyn() )) {
HXLINE( 907)			displayObject->set_y(this->paddingTop);
            		}
            		else {
HXLINE( 908)			if (::hx::IsEq( this->verticalAlign,::feathers::layout::VerticalAlign_obj::BOTTOM_dyn() )) {
HXLINE( 909)				Float _hx_tmp = (this->actualHeight - this->paddingBottom);
HXDLIN( 909)				displayObject->set_y((_hx_tmp - displayObject->get_height()));
            			}
            			else {
HXLINE( 912)				Float _hx_tmp = this->paddingTop;
HXDLIN( 912)				Float _hx_tmp1 = ((this->actualHeight - this->paddingTop) - this->paddingBottom);
HXDLIN( 912)				displayObject->set_y((_hx_tmp + ((_hx_tmp1 - displayObject->get_height()) / ((Float)2.0))));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ToggleButton_obj,positionSingleChild,(void))

void ToggleButton_obj::positionTextAndIcon(){
            	HX_STACKFRAME(&_hx_pos_0a2fccb1c21dad55_916_positionTextAndIcon)
HXLINE( 917)		if (::hx::IsEq( this->iconPosition,::feathers::layout::RelativePosition_obj::TOP_dyn() )) {
HXLINE( 918)			if ((this->gap == ::Math_obj::POSITIVE_INFINITY)) {
HXLINE( 919)				this->_currentIcon->set_y(this->paddingTop);
HXLINE( 920)				 ::openfl::text::TextField _hx_tmp = this->textField;
HXDLIN( 920)				Float _hx_tmp1 = (this->actualHeight - this->paddingBottom);
HXDLIN( 920)				_hx_tmp->set_y((_hx_tmp1 - this->textField->get_height()));
            			}
            			else {
HXLINE( 922)				if (::hx::IsEq( this->verticalAlign,::feathers::layout::VerticalAlign_obj::TOP_dyn() )) {
HXLINE( 923)					 ::openfl::text::TextField _g = this->textField;
HXDLIN( 923)					Float _hx_tmp = _g->get_y();
HXDLIN( 923)					Float _hx_tmp1 = this->_currentIcon->get_height();
HXDLIN( 923)					_g->set_y((_hx_tmp + (_hx_tmp1 + this->gap)));
            				}
            				else {
HXLINE( 924)					if (::hx::IsEq( this->verticalAlign,::feathers::layout::VerticalAlign_obj::MIDDLE_dyn() )) {
HXLINE( 925)						 ::openfl::text::TextField _g = this->textField;
HXDLIN( 925)						Float _hx_tmp = _g->get_y();
HXDLIN( 925)						Float _hx_tmp1 = this->_currentIcon->get_height();
HXDLIN( 925)						_g->set_y((_hx_tmp + ((_hx_tmp1 + this->gap) / ((Float)2.0))));
            					}
            				}
HXLINE( 927)				 ::openfl::display::DisplayObject _hx_tmp = this->_currentIcon;
HXDLIN( 927)				Float _hx_tmp1 = this->textField->get_y();
HXDLIN( 927)				Float _hx_tmp2 = (_hx_tmp1 - this->_currentIcon->get_height());
HXDLIN( 927)				_hx_tmp->set_y((_hx_tmp2 - this->gap));
            			}
            		}
            		else {
HXLINE( 929)			if (::hx::IsEq( this->iconPosition,::feathers::layout::RelativePosition_obj::RIGHT_dyn() )) {
HXLINE( 930)				if ((this->gap == ::Math_obj::POSITIVE_INFINITY)) {
HXLINE( 931)					this->textField->set_x(this->paddingLeft);
HXLINE( 932)					 ::openfl::display::DisplayObject _hx_tmp = this->_currentIcon;
HXDLIN( 932)					Float _hx_tmp1 = (this->actualWidth - this->paddingRight);
HXDLIN( 932)					_hx_tmp->set_x((_hx_tmp1 - this->_currentIcon->get_width()));
            				}
            				else {
HXLINE( 934)					if (::hx::IsEq( this->horizontalAlign,::feathers::layout::HorizontalAlign_obj::RIGHT_dyn() )) {
HXLINE( 935)						 ::openfl::text::TextField _g = this->textField;
HXDLIN( 935)						Float _hx_tmp = _g->get_x();
HXDLIN( 935)						Float _hx_tmp1 = this->_currentIcon->get_width();
HXDLIN( 935)						_g->set_x((_hx_tmp - (_hx_tmp1 + this->gap)));
            					}
            					else {
HXLINE( 936)						if (::hx::IsEq( this->horizontalAlign,::feathers::layout::HorizontalAlign_obj::CENTER_dyn() )) {
HXLINE( 937)							 ::openfl::text::TextField _g = this->textField;
HXDLIN( 937)							Float _hx_tmp = _g->get_x();
HXDLIN( 937)							Float _hx_tmp1 = this->_currentIcon->get_width();
HXDLIN( 937)							_g->set_x((_hx_tmp - ((_hx_tmp1 + this->gap) / ((Float)2.0))));
            						}
            					}
HXLINE( 939)					 ::openfl::display::DisplayObject _hx_tmp = this->_currentIcon;
HXDLIN( 939)					Float _hx_tmp1 = this->textField->get_x();
HXDLIN( 939)					Float _hx_tmp2 = (_hx_tmp1 + this->textField->get_width());
HXDLIN( 939)					_hx_tmp->set_x((_hx_tmp2 + this->gap));
            				}
            			}
            			else {
HXLINE( 941)				if (::hx::IsEq( this->iconPosition,::feathers::layout::RelativePosition_obj::BOTTOM_dyn() )) {
HXLINE( 942)					if ((this->gap == ::Math_obj::POSITIVE_INFINITY)) {
HXLINE( 943)						this->textField->set_y(this->paddingTop);
HXLINE( 944)						 ::openfl::display::DisplayObject _hx_tmp = this->_currentIcon;
HXDLIN( 944)						Float _hx_tmp1 = (this->actualHeight - this->paddingBottom);
HXDLIN( 944)						_hx_tmp->set_y((_hx_tmp1 - this->_currentIcon->get_height()));
            					}
            					else {
HXLINE( 946)						if (::hx::IsEq( this->verticalAlign,::feathers::layout::VerticalAlign_obj::BOTTOM_dyn() )) {
HXLINE( 947)							 ::openfl::text::TextField _g = this->textField;
HXDLIN( 947)							Float _hx_tmp = _g->get_y();
HXDLIN( 947)							Float _hx_tmp1 = this->_currentIcon->get_height();
HXDLIN( 947)							_g->set_y((_hx_tmp - (_hx_tmp1 + this->gap)));
            						}
            						else {
HXLINE( 948)							if (::hx::IsEq( this->verticalAlign,::feathers::layout::VerticalAlign_obj::MIDDLE_dyn() )) {
HXLINE( 949)								 ::openfl::text::TextField _g = this->textField;
HXDLIN( 949)								Float _hx_tmp = _g->get_y();
HXDLIN( 949)								Float _hx_tmp1 = this->_currentIcon->get_height();
HXDLIN( 949)								_g->set_y((_hx_tmp - ((_hx_tmp1 + this->gap) / ((Float)2.0))));
            							}
            						}
HXLINE( 951)						 ::openfl::display::DisplayObject _hx_tmp = this->_currentIcon;
HXDLIN( 951)						Float _hx_tmp1 = this->textField->get_y();
HXDLIN( 951)						Float _hx_tmp2 = (_hx_tmp1 + this->textField->get_height());
HXDLIN( 951)						_hx_tmp->set_y((_hx_tmp2 + this->gap));
            					}
            				}
            				else {
HXLINE( 953)					if (::hx::IsEq( this->iconPosition,::feathers::layout::RelativePosition_obj::LEFT_dyn() )) {
HXLINE( 954)						if ((this->gap == ::Math_obj::POSITIVE_INFINITY)) {
HXLINE( 955)							this->_currentIcon->set_x(this->paddingLeft);
HXLINE( 956)							 ::openfl::text::TextField _hx_tmp = this->textField;
HXDLIN( 956)							Float _hx_tmp1 = (this->actualWidth - this->paddingRight);
HXDLIN( 956)							_hx_tmp->set_x((_hx_tmp1 - this->textField->get_width()));
            						}
            						else {
HXLINE( 958)							if (::hx::IsEq( this->horizontalAlign,::feathers::layout::HorizontalAlign_obj::LEFT_dyn() )) {
HXLINE( 959)								 ::openfl::text::TextField _g = this->textField;
HXDLIN( 959)								Float _hx_tmp = _g->get_x();
HXDLIN( 959)								Float _hx_tmp1 = this->gap;
HXDLIN( 959)								_g->set_x((_hx_tmp + (_hx_tmp1 + this->_currentIcon->get_width())));
            							}
            							else {
HXLINE( 960)								if (::hx::IsEq( this->horizontalAlign,::feathers::layout::HorizontalAlign_obj::CENTER_dyn() )) {
HXLINE( 961)									 ::openfl::text::TextField _g = this->textField;
HXDLIN( 961)									Float _hx_tmp = _g->get_x();
HXDLIN( 961)									Float _hx_tmp1 = this->gap;
HXDLIN( 961)									_g->set_x((_hx_tmp + ((_hx_tmp1 + this->_currentIcon->get_width()) / ((Float)2.0))));
            								}
            							}
HXLINE( 963)							 ::openfl::display::DisplayObject _hx_tmp = this->_currentIcon;
HXDLIN( 963)							Float _hx_tmp1 = this->textField->get_x();
HXDLIN( 963)							Float _hx_tmp2 = (_hx_tmp1 - this->gap);
HXDLIN( 963)							_hx_tmp->set_x((_hx_tmp2 - this->_currentIcon->get_width()));
            						}
            					}
            				}
            			}
            		}
HXLINE( 967)		bool _hx_tmp;
HXDLIN( 967)		if (::hx::IsNotEq( this->iconPosition,::feathers::layout::RelativePosition_obj::LEFT_dyn() )) {
HXLINE( 967)			_hx_tmp = ::hx::IsEq( this->iconPosition,::feathers::layout::RelativePosition_obj::RIGHT_dyn() );
            		}
            		else {
HXLINE( 967)			_hx_tmp = true;
            		}
HXDLIN( 967)		if (_hx_tmp) {
HXLINE( 968)			if (::hx::IsEq( this->verticalAlign,::feathers::layout::VerticalAlign_obj::TOP_dyn() )) {
HXLINE( 969)				this->_currentIcon->set_y(this->paddingTop);
            			}
            			else {
HXLINE( 970)				if (::hx::IsEq( this->verticalAlign,::feathers::layout::VerticalAlign_obj::BOTTOM_dyn() )) {
HXLINE( 971)					 ::openfl::display::DisplayObject _hx_tmp = this->_currentIcon;
HXDLIN( 971)					Float _hx_tmp1 = (this->actualHeight - this->paddingBottom);
HXDLIN( 971)					_hx_tmp->set_y((_hx_tmp1 - this->_currentIcon->get_height()));
            				}
            				else {
HXLINE( 973)					 ::openfl::display::DisplayObject _hx_tmp = this->_currentIcon;
HXDLIN( 973)					Float _hx_tmp1 = this->paddingTop;
HXDLIN( 973)					Float _hx_tmp2 = ((this->actualHeight - this->paddingTop) - this->paddingBottom);
HXDLIN( 973)					_hx_tmp->set_y((_hx_tmp1 + ((_hx_tmp2 - this->_currentIcon->get_height()) / ((Float)2.0))));
            				}
            			}
            		}
            		else {
HXLINE( 977)			if (::hx::IsEq( this->horizontalAlign,::feathers::layout::HorizontalAlign_obj::LEFT_dyn() )) {
HXLINE( 978)				this->_currentIcon->set_x(this->paddingLeft);
            			}
            			else {
HXLINE( 979)				if (::hx::IsEq( this->horizontalAlign,::feathers::layout::HorizontalAlign_obj::RIGHT_dyn() )) {
HXLINE( 980)					 ::openfl::display::DisplayObject _hx_tmp = this->_currentIcon;
HXDLIN( 980)					Float _hx_tmp1 = (this->actualWidth - this->paddingRight);
HXDLIN( 980)					_hx_tmp->set_x((_hx_tmp1 - this->_currentIcon->get_width()));
            				}
            				else {
HXLINE( 982)					 ::openfl::display::DisplayObject _hx_tmp = this->_currentIcon;
HXDLIN( 982)					Float _hx_tmp1 = this->paddingLeft;
HXDLIN( 982)					Float _hx_tmp2 = ((this->actualWidth - this->paddingLeft) - this->paddingRight);
HXDLIN( 982)					_hx_tmp->set_x((_hx_tmp1 + ((_hx_tmp2 - this->_currentIcon->get_width()) / ((Float)2.0))));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ToggleButton_obj,positionTextAndIcon,(void))

void ToggleButton_obj::refreshIcon(){
            	HX_GC_STACKFRAME(&_hx_pos_0a2fccb1c21dad55_987_refreshIcon)
HXLINE( 988)		 ::openfl::display::DisplayObject oldIcon = this->_currentIcon;
HXLINE( 989)		this->_currentIcon = this->getCurrentIcon();
HXLINE( 990)		if (::hx::IsEq( this->_currentIcon,oldIcon )) {
HXLINE( 991)			return;
            		}
HXLINE( 993)		this->removeCurrentIcon(oldIcon);
HXLINE( 994)		if (::hx::IsNull( this->_currentIcon )) {
HXLINE( 995)			this->_iconMeasurements = null();
HXLINE( 996)			return;
            		}
HXLINE( 998)		if (::Std_obj::isOfType(this->_currentIcon,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IUIControl >()) ))) {
HXLINE( 999)			::feathers::core::IUIControl_obj::initializeNow( ::hx::interface_check(this->_currentIcon,0x2696a04f));
            		}
HXLINE(1001)		if (::hx::IsNull( this->_iconMeasurements )) {
HXLINE(1002)			this->_iconMeasurements =  ::feathers::layout::Measurements_obj::__alloc( HX_CTX ,this->_currentIcon);
            		}
            		else {
HXLINE(1004)			this->_iconMeasurements->save(this->_currentIcon);
            		}
HXLINE(1006)		if (::Std_obj::isOfType(this->_currentIcon,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IStateObserver >()) ))) {
HXLINE(1007)			::feathers::core::IStateObserver_obj::set_stateContext( ::hx::interface_check(this->_currentIcon,0xb36ec70d),::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1009)		this->addChild(this->_currentIcon);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ToggleButton_obj,refreshIcon,(void))

 ::openfl::display::DisplayObject ToggleButton_obj::getCurrentIcon(){
            	HX_STACKFRAME(&_hx_pos_0a2fccb1c21dad55_1012_getCurrentIcon)
HXLINE(1013)		::Dynamic this1 = this->_stateToIcon;
HXDLIN(1013)		 ::openfl::display::DisplayObject result = ( ( ::haxe::ds::EnumValueMap)(this1) )->get(this->get_currentState()).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE(1014)		if (::hx::IsNotNull( result )) {
HXLINE(1015)			return result;
            		}
HXLINE(1017)		bool _hx_tmp;
HXDLIN(1017)		if (!(this->get_enabled())) {
HXLINE(1017)			_hx_tmp = ::hx::IsNotNull( this->disabledIcon );
            		}
            		else {
HXLINE(1017)			_hx_tmp = false;
            		}
HXDLIN(1017)		if (_hx_tmp) {
HXLINE(1018)			return this->disabledIcon;
            		}
HXLINE(1020)		bool _hx_tmp1;
HXDLIN(1020)		if (this->get_selected()) {
HXLINE(1020)			_hx_tmp1 = ::hx::IsNotNull( this->selectedIcon );
            		}
            		else {
HXLINE(1020)			_hx_tmp1 = false;
            		}
HXDLIN(1020)		if (_hx_tmp1) {
HXLINE(1021)			return this->selectedIcon;
            		}
HXLINE(1023)		return this->icon;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ToggleButton_obj,getCurrentIcon,return )

void ToggleButton_obj::removeCurrentIcon( ::openfl::display::DisplayObject icon){
            	HX_STACKFRAME(&_hx_pos_0a2fccb1c21dad55_1026_removeCurrentIcon)
HXLINE(1027)		if (::hx::IsNull( icon )) {
HXLINE(1028)			return;
            		}
HXLINE(1030)		if (::Std_obj::isOfType(icon,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IStateObserver >()) ))) {
HXLINE(1031)			::feathers::core::IStateObserver_obj::set_stateContext( ::hx::interface_check(icon,0xb36ec70d),null());
            		}
HXLINE(1033)		this->_iconMeasurements->restore(icon);
HXLINE(1034)		if (::hx::IsEq( icon->parent,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(1037)			this->removeChild(icon);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ToggleButton_obj,removeCurrentIcon,(void))

::hx::Class ToggleButton_obj::get_styleContext(){
            	HX_STACKFRAME(&_hx_pos_0ad027dc407a7d82_42_get_styleContext)
HXDLIN(  42)		return ::hx::ClassOf< ::feathers::controls::ToggleButton >();
            	}


 ::openfl::display::DisplayObject ToggleButton_obj::set_icon( ::openfl::display::DisplayObject value){
            	HX_STACKFRAME(&_hx_pos_7c2c418178ac41a1_68_set_icon)
HXLINE(  69)		if (!(this->setStyle(HX_("icon",79,e7,b2,45),null()))) {
HXLINE(  70)			return this->icon;
            		}
HXLINE(  72)		if (::hx::IsEq( this->icon,value )) {
HXLINE(  73)			return this->icon;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_icon_dyn();
HXLINE(  79)		this->icon = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->icon;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ToggleButton_obj,set_icon,return )

 ::openfl::display::DisplayObject ToggleButton_obj::clearStyle_icon(){
            	HX_STACKFRAME(&_hx_pos_7c2c418178ac41a1_94_clearStyle_icon)
HXLINE(  95)		this->set_icon(null());
HXLINE(  96)		return this->icon;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ToggleButton_obj,clearStyle_icon,return )

 ::openfl::display::DisplayObject ToggleButton_obj::set_disabledIcon( ::openfl::display::DisplayObject value){
            	HX_STACKFRAME(&_hx_pos_7c2c418178ac41a1_68_set_disabledIcon)
HXLINE(  69)		if (!(this->setStyle(HX_("disabledIcon",15,c3,f4,6f),null()))) {
HXLINE(  70)			return this->disabledIcon;
            		}
HXLINE(  72)		if (::hx::IsEq( this->disabledIcon,value )) {
HXLINE(  73)			return this->disabledIcon;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_disabledIcon_dyn();
HXLINE(  79)		this->disabledIcon = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->disabledIcon;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ToggleButton_obj,set_disabledIcon,return )

 ::openfl::display::DisplayObject ToggleButton_obj::clearStyle_disabledIcon(){
            	HX_STACKFRAME(&_hx_pos_7c2c418178ac41a1_94_clearStyle_disabledIcon)
HXLINE(  95)		this->set_disabledIcon(null());
HXLINE(  96)		return this->disabledIcon;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ToggleButton_obj,clearStyle_disabledIcon,return )

 ::openfl::display::DisplayObject ToggleButton_obj::set_selectedIcon( ::openfl::display::DisplayObject value){
            	HX_STACKFRAME(&_hx_pos_7c2c418178ac41a1_68_set_selectedIcon)
HXLINE(  69)		if (!(this->setStyle(HX_("selectedIcon",74,07,4d,d6),null()))) {
HXLINE(  70)			return this->selectedIcon;
            		}
HXLINE(  72)		if (::hx::IsEq( this->selectedIcon,value )) {
HXLINE(  73)			return this->selectedIcon;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_selectedIcon_dyn();
HXLINE(  79)		this->selectedIcon = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->selectedIcon;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ToggleButton_obj,set_selectedIcon,return )

 ::openfl::display::DisplayObject ToggleButton_obj::clearStyle_selectedIcon(){
            	HX_STACKFRAME(&_hx_pos_7c2c418178ac41a1_94_clearStyle_selectedIcon)
HXLINE(  95)		this->set_selectedIcon(null());
HXLINE(  96)		return this->selectedIcon;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ToggleButton_obj,clearStyle_selectedIcon,return )

 ::openfl::text::TextFormat ToggleButton_obj::set_textFormat( ::openfl::text::TextFormat value){
            	HX_STACKFRAME(&_hx_pos_7c2c418178ac41a1_68_set_textFormat)
HXLINE(  69)		if (!(this->setStyle(HX_("textFormat",c4,0f,7f,34),null()))) {
HXLINE(  70)			return this->textFormat;
            		}
HXLINE(  72)		if (::hx::IsEq( this->textFormat,value )) {
HXLINE(  73)			return this->textFormat;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_textFormat_dyn();
HXLINE(  79)		this->textFormat = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->textFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ToggleButton_obj,set_textFormat,return )

 ::openfl::text::TextFormat ToggleButton_obj::clearStyle_textFormat(){
            	HX_STACKFRAME(&_hx_pos_7c2c418178ac41a1_94_clearStyle_textFormat)
HXLINE(  95)		this->set_textFormat(null());
HXLINE(  96)		return this->textFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ToggleButton_obj,clearStyle_textFormat,return )

bool ToggleButton_obj::set_embedFonts(bool value){
            	HX_STACKFRAME(&_hx_pos_7c2c418178ac41a1_68_set_embedFonts)
HXLINE(  69)		if (!(this->setStyle(HX_("embedFonts",2b,c7,e1,8e),null()))) {
HXLINE(  70)			return this->embedFonts;
            		}
HXLINE(  72)		if ((this->embedFonts == value)) {
HXLINE(  73)			return this->embedFonts;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_embedFonts_dyn();
HXLINE(  79)		this->embedFonts = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->embedFonts;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ToggleButton_obj,set_embedFonts,return )

bool ToggleButton_obj::clearStyle_embedFonts(){
            	HX_STACKFRAME(&_hx_pos_7c2c418178ac41a1_94_clearStyle_embedFonts)
HXLINE(  95)		this->set_embedFonts(false);
HXLINE(  96)		return this->embedFonts;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ToggleButton_obj,clearStyle_embedFonts,return )

 ::openfl::text::TextFormat ToggleButton_obj::set_disabledTextFormat( ::openfl::text::TextFormat value){
            	HX_STACKFRAME(&_hx_pos_7c2c418178ac41a1_68_set_disabledTextFormat)
HXLINE(  69)		if (!(this->setStyle(HX_("disabledTextFormat",60,88,2b,39),null()))) {
HXLINE(  70)			return this->disabledTextFormat;
            		}
HXLINE(  72)		if (::hx::IsEq( this->disabledTextFormat,value )) {
HXLINE(  73)			return this->disabledTextFormat;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_disabledTextFormat_dyn();
HXLINE(  79)		this->disabledTextFormat = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->disabledTextFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ToggleButton_obj,set_disabledTextFormat,return )

 ::openfl::text::TextFormat ToggleButton_obj::clearStyle_disabledTextFormat(){
            	HX_STACKFRAME(&_hx_pos_7c2c418178ac41a1_94_clearStyle_disabledTextFormat)
HXLINE(  95)		this->set_disabledTextFormat(null());
HXLINE(  96)		return this->disabledTextFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ToggleButton_obj,clearStyle_disabledTextFormat,return )

 ::openfl::text::TextFormat ToggleButton_obj::set_selectedTextFormat( ::openfl::text::TextFormat value){
            	HX_STACKFRAME(&_hx_pos_7c2c418178ac41a1_68_set_selectedTextFormat)
HXLINE(  69)		if (!(this->setStyle(HX_("selectedTextFormat",ff,dd,85,13),null()))) {
HXLINE(  70)			return this->selectedTextFormat;
            		}
HXLINE(  72)		if (::hx::IsEq( this->selectedTextFormat,value )) {
HXLINE(  73)			return this->selectedTextFormat;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_selectedTextFormat_dyn();
HXLINE(  79)		this->selectedTextFormat = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->selectedTextFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ToggleButton_obj,set_selectedTextFormat,return )

 ::openfl::text::TextFormat ToggleButton_obj::clearStyle_selectedTextFormat(){
            	HX_STACKFRAME(&_hx_pos_7c2c418178ac41a1_94_clearStyle_selectedTextFormat)
HXLINE(  95)		this->set_selectedTextFormat(null());
HXLINE(  96)		return this->selectedTextFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ToggleButton_obj,clearStyle_selectedTextFormat,return )

 ::feathers::layout::RelativePosition ToggleButton_obj::set_iconPosition( ::feathers::layout::RelativePosition value){
            	HX_STACKFRAME(&_hx_pos_7c2c418178ac41a1_68_set_iconPosition)
HXLINE(  69)		if (!(this->setStyle(HX_("iconPosition",42,e5,38,76),null()))) {
HXLINE(  70)			return this->iconPosition;
            		}
HXLINE(  72)		if (::hx::IsEq( this->iconPosition,value )) {
HXLINE(  73)			return this->iconPosition;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_iconPosition_dyn();
HXLINE(  79)		this->iconPosition = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->iconPosition;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ToggleButton_obj,set_iconPosition,return )

 ::feathers::layout::RelativePosition ToggleButton_obj::clearStyle_iconPosition(){
            	HX_STACKFRAME(&_hx_pos_7c2c418178ac41a1_94_clearStyle_iconPosition)
HXLINE(  95)		this->set_iconPosition(::feathers::layout::RelativePosition_obj::LEFT_dyn());
HXLINE(  96)		return this->iconPosition;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ToggleButton_obj,clearStyle_iconPosition,return )

Float ToggleButton_obj::set_gap(Float value){
            	HX_STACKFRAME(&_hx_pos_7c2c418178ac41a1_68_set_gap)
HXLINE(  69)		if (!(this->setStyle(HX_("gap",16,7d,4e,00),null()))) {
HXLINE(  70)			return this->gap;
            		}
HXLINE(  72)		if ((this->gap == value)) {
HXLINE(  73)			return this->gap;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_gap_dyn();
HXLINE(  79)		this->gap = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->gap;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ToggleButton_obj,set_gap,return )

Float ToggleButton_obj::clearStyle_gap(){
            	HX_STACKFRAME(&_hx_pos_7c2c418178ac41a1_94_clearStyle_gap)
HXLINE(  95)		this->set_gap(((Float)0.0));
HXLINE(  96)		return this->gap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ToggleButton_obj,clearStyle_gap,return )

Float ToggleButton_obj::set_minGap(Float value){
            	HX_STACKFRAME(&_hx_pos_7c2c418178ac41a1_68_set_minGap)
HXLINE(  69)		if (!(this->setStyle(HX_("minGap",a4,ea,e4,52),null()))) {
HXLINE(  70)			return this->minGap;
            		}
HXLINE(  72)		if ((this->minGap == value)) {
HXLINE(  73)			return this->minGap;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_minGap_dyn();
HXLINE(  79)		this->minGap = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->minGap;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ToggleButton_obj,set_minGap,return )

Float ToggleButton_obj::clearStyle_minGap(){
            	HX_STACKFRAME(&_hx_pos_7c2c418178ac41a1_94_clearStyle_minGap)
HXLINE(  95)		this->set_minGap(((Float)0.0));
HXLINE(  96)		return this->minGap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ToggleButton_obj,clearStyle_minGap,return )

Float ToggleButton_obj::set_paddingTop(Float value){
            	HX_STACKFRAME(&_hx_pos_7c2c418178ac41a1_68_set_paddingTop)
HXLINE(  69)		if (!(this->setStyle(HX_("paddingTop",44,fd,05,3a),null()))) {
HXLINE(  70)			return this->paddingTop;
            		}
HXLINE(  72)		if ((this->paddingTop == value)) {
HXLINE(  73)			return this->paddingTop;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_paddingTop_dyn();
HXLINE(  79)		this->paddingTop = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->paddingTop;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ToggleButton_obj,set_paddingTop,return )

Float ToggleButton_obj::clearStyle_paddingTop(){
            	HX_STACKFRAME(&_hx_pos_7c2c418178ac41a1_94_clearStyle_paddingTop)
HXLINE(  95)		this->set_paddingTop(((Float)0.0));
HXLINE(  96)		return this->paddingTop;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ToggleButton_obj,clearStyle_paddingTop,return )

Float ToggleButton_obj::set_paddingRight(Float value){
            	HX_STACKFRAME(&_hx_pos_7c2c418178ac41a1_68_set_paddingRight)
HXLINE(  69)		if (!(this->setStyle(HX_("paddingRight",4b,ec,a7,1a),null()))) {
HXLINE(  70)			return this->paddingRight;
            		}
HXLINE(  72)		if ((this->paddingRight == value)) {
HXLINE(  73)			return this->paddingRight;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_paddingRight_dyn();
HXLINE(  79)		this->paddingRight = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->paddingRight;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ToggleButton_obj,set_paddingRight,return )

Float ToggleButton_obj::clearStyle_paddingRight(){
            	HX_STACKFRAME(&_hx_pos_7c2c418178ac41a1_94_clearStyle_paddingRight)
HXLINE(  95)		this->set_paddingRight(((Float)0.0));
HXLINE(  96)		return this->paddingRight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ToggleButton_obj,clearStyle_paddingRight,return )

Float ToggleButton_obj::set_paddingBottom(Float value){
            	HX_STACKFRAME(&_hx_pos_7c2c418178ac41a1_68_set_paddingBottom)
HXLINE(  69)		if (!(this->setStyle(HX_("paddingBottom",9c,67,99,4f),null()))) {
HXLINE(  70)			return this->paddingBottom;
            		}
HXLINE(  72)		if ((this->paddingBottom == value)) {
HXLINE(  73)			return this->paddingBottom;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_paddingBottom_dyn();
HXLINE(  79)		this->paddingBottom = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->paddingBottom;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ToggleButton_obj,set_paddingBottom,return )

Float ToggleButton_obj::clearStyle_paddingBottom(){
            	HX_STACKFRAME(&_hx_pos_7c2c418178ac41a1_94_clearStyle_paddingBottom)
HXLINE(  95)		this->set_paddingBottom(((Float)0.0));
HXLINE(  96)		return this->paddingBottom;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ToggleButton_obj,clearStyle_paddingBottom,return )

Float ToggleButton_obj::set_paddingLeft(Float value){
            	HX_STACKFRAME(&_hx_pos_7c2c418178ac41a1_68_set_paddingLeft)
HXLINE(  69)		if (!(this->setStyle(HX_("paddingLeft",78,4a,e6,85),null()))) {
HXLINE(  70)			return this->paddingLeft;
            		}
HXLINE(  72)		if ((this->paddingLeft == value)) {
HXLINE(  73)			return this->paddingLeft;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_paddingLeft_dyn();
HXLINE(  79)		this->paddingLeft = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->paddingLeft;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ToggleButton_obj,set_paddingLeft,return )

Float ToggleButton_obj::clearStyle_paddingLeft(){
            	HX_STACKFRAME(&_hx_pos_7c2c418178ac41a1_94_clearStyle_paddingLeft)
HXLINE(  95)		this->set_paddingLeft(((Float)0.0));
HXLINE(  96)		return this->paddingLeft;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ToggleButton_obj,clearStyle_paddingLeft,return )

 ::feathers::layout::HorizontalAlign ToggleButton_obj::set_horizontalAlign( ::feathers::layout::HorizontalAlign value){
            	HX_STACKFRAME(&_hx_pos_7c2c418178ac41a1_68_set_horizontalAlign)
HXLINE(  69)		if (!(this->setStyle(HX_("horizontalAlign",41,8f,67,f4),null()))) {
HXLINE(  70)			return this->horizontalAlign;
            		}
HXLINE(  72)		if (::hx::IsEq( this->horizontalAlign,value )) {
HXLINE(  73)			return this->horizontalAlign;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_horizontalAlign_dyn();
HXLINE(  79)		this->horizontalAlign = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->horizontalAlign;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ToggleButton_obj,set_horizontalAlign,return )

 ::feathers::layout::HorizontalAlign ToggleButton_obj::clearStyle_horizontalAlign(){
            	HX_STACKFRAME(&_hx_pos_7c2c418178ac41a1_94_clearStyle_horizontalAlign)
HXLINE(  95)		this->set_horizontalAlign(::feathers::layout::HorizontalAlign_obj::CENTER_dyn());
HXLINE(  96)		return this->horizontalAlign;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ToggleButton_obj,clearStyle_horizontalAlign,return )

 ::feathers::layout::VerticalAlign ToggleButton_obj::set_verticalAlign( ::feathers::layout::VerticalAlign value){
            	HX_STACKFRAME(&_hx_pos_7c2c418178ac41a1_68_set_verticalAlign)
HXLINE(  69)		if (!(this->setStyle(HX_("verticalAlign",6f,1e,7c,e4),null()))) {
HXLINE(  70)			return this->verticalAlign;
            		}
HXLINE(  72)		if (::hx::IsEq( this->verticalAlign,value )) {
HXLINE(  73)			return this->verticalAlign;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_verticalAlign_dyn();
HXLINE(  79)		this->verticalAlign = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->verticalAlign;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ToggleButton_obj,set_verticalAlign,return )

 ::feathers::layout::VerticalAlign ToggleButton_obj::clearStyle_verticalAlign(){
            	HX_STACKFRAME(&_hx_pos_7c2c418178ac41a1_94_clearStyle_verticalAlign)
HXLINE(  95)		this->set_verticalAlign(::feathers::layout::VerticalAlign_obj::MIDDLE_dyn());
HXLINE(  96)		return this->verticalAlign;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ToggleButton_obj,clearStyle_verticalAlign,return )


::hx::ObjectPtr< ToggleButton_obj > ToggleButton_obj::__new() {
	::hx::ObjectPtr< ToggleButton_obj > __this = new ToggleButton_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< ToggleButton_obj > ToggleButton_obj::__alloc(::hx::Ctx *_hx_ctx) {
	ToggleButton_obj *__this = (ToggleButton_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ToggleButton_obj), true, "feathers.controls.ToggleButton"));
	*(void **)__this = ToggleButton_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ToggleButton_obj::ToggleButton_obj()
{
}

void ToggleButton_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ToggleButton);
	HX_MARK_MEMBER_NAME(textField,"textField");
	HX_MARK_MEMBER_NAME(_previousText,"_previousText");
	HX_MARK_MEMBER_NAME(_previousTextFormat,"_previousTextFormat");
	HX_MARK_MEMBER_NAME(_updatedTextStyles,"_updatedTextStyles");
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(_stateToIcon,"_stateToIcon");
	HX_MARK_MEMBER_NAME(_iconMeasurements,"_iconMeasurements");
	HX_MARK_MEMBER_NAME(_currentIcon,"_currentIcon");
	HX_MARK_MEMBER_NAME(_ignoreIconResizes,"_ignoreIconResizes");
	HX_MARK_MEMBER_NAME(icon,"icon");
	HX_MARK_MEMBER_NAME(disabledIcon,"disabledIcon");
	HX_MARK_MEMBER_NAME(selectedIcon,"selectedIcon");
	HX_MARK_MEMBER_NAME(textFormat,"textFormat");
	HX_MARK_MEMBER_NAME(embedFonts,"embedFonts");
	HX_MARK_MEMBER_NAME(disabledTextFormat,"disabledTextFormat");
	HX_MARK_MEMBER_NAME(selectedTextFormat,"selectedTextFormat");
	HX_MARK_MEMBER_NAME(iconPosition,"iconPosition");
	HX_MARK_MEMBER_NAME(gap,"gap");
	HX_MARK_MEMBER_NAME(minGap,"minGap");
	HX_MARK_MEMBER_NAME(paddingTop,"paddingTop");
	HX_MARK_MEMBER_NAME(paddingRight,"paddingRight");
	HX_MARK_MEMBER_NAME(paddingBottom,"paddingBottom");
	HX_MARK_MEMBER_NAME(paddingLeft,"paddingLeft");
	HX_MARK_MEMBER_NAME(horizontalAlign,"horizontalAlign");
	HX_MARK_MEMBER_NAME(verticalAlign,"verticalAlign");
	HX_MARK_MEMBER_NAME(_textMeasuredWidth,"_textMeasuredWidth");
	HX_MARK_MEMBER_NAME(_textMeasuredHeight,"_textMeasuredHeight");
	HX_MARK_MEMBER_NAME(_stateToTextFormat,"_stateToTextFormat");
	 ::feathers::controls::BasicToggleButton_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ToggleButton_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(textField,"textField");
	HX_VISIT_MEMBER_NAME(_previousText,"_previousText");
	HX_VISIT_MEMBER_NAME(_previousTextFormat,"_previousTextFormat");
	HX_VISIT_MEMBER_NAME(_updatedTextStyles,"_updatedTextStyles");
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(_stateToIcon,"_stateToIcon");
	HX_VISIT_MEMBER_NAME(_iconMeasurements,"_iconMeasurements");
	HX_VISIT_MEMBER_NAME(_currentIcon,"_currentIcon");
	HX_VISIT_MEMBER_NAME(_ignoreIconResizes,"_ignoreIconResizes");
	HX_VISIT_MEMBER_NAME(icon,"icon");
	HX_VISIT_MEMBER_NAME(disabledIcon,"disabledIcon");
	HX_VISIT_MEMBER_NAME(selectedIcon,"selectedIcon");
	HX_VISIT_MEMBER_NAME(textFormat,"textFormat");
	HX_VISIT_MEMBER_NAME(embedFonts,"embedFonts");
	HX_VISIT_MEMBER_NAME(disabledTextFormat,"disabledTextFormat");
	HX_VISIT_MEMBER_NAME(selectedTextFormat,"selectedTextFormat");
	HX_VISIT_MEMBER_NAME(iconPosition,"iconPosition");
	HX_VISIT_MEMBER_NAME(gap,"gap");
	HX_VISIT_MEMBER_NAME(minGap,"minGap");
	HX_VISIT_MEMBER_NAME(paddingTop,"paddingTop");
	HX_VISIT_MEMBER_NAME(paddingRight,"paddingRight");
	HX_VISIT_MEMBER_NAME(paddingBottom,"paddingBottom");
	HX_VISIT_MEMBER_NAME(paddingLeft,"paddingLeft");
	HX_VISIT_MEMBER_NAME(horizontalAlign,"horizontalAlign");
	HX_VISIT_MEMBER_NAME(verticalAlign,"verticalAlign");
	HX_VISIT_MEMBER_NAME(_textMeasuredWidth,"_textMeasuredWidth");
	HX_VISIT_MEMBER_NAME(_textMeasuredHeight,"_textMeasuredHeight");
	HX_VISIT_MEMBER_NAME(_stateToTextFormat,"_stateToTextFormat");
	 ::feathers::controls::BasicToggleButton_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ToggleButton_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"gap") ) { return ::hx::Val( gap ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_text() : text ); }
		if (HX_FIELD_EQ(inName,"icon") ) { return ::hx::Val( icon ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"minGap") ) { return ::hx::Val( minGap ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"measure") ) { return ::hx::Val( measure_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_gap") ) { return ::hx::Val( set_gap_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_text") ) { return ::hx::Val( get_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return ::hx::Val( set_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_icon") ) { return ::hx::Val( set_icon_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"textField") ) { return ::hx::Val( textField ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"textFormat") ) { return ::hx::Val( textFormat ); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { return ::hx::Val( embedFonts ); }
		if (HX_FIELD_EQ(inName,"paddingTop") ) { return ::hx::Val( paddingTop ); }
		if (HX_FIELD_EQ(inName,"initialize") ) { return ::hx::Val( initialize_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_minGap") ) { return ::hx::Val( set_minGap_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"paddingLeft") ) { return ::hx::Val( paddingLeft ); }
		if (HX_FIELD_EQ(inName,"refreshText") ) { return ::hx::Val( refreshText_dyn() ); }
		if (HX_FIELD_EQ(inName,"refreshIcon") ) { return ::hx::Val( refreshIcon_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_stateToIcon") ) { return ::hx::Val( _stateToIcon ); }
		if (HX_FIELD_EQ(inName,"_currentIcon") ) { return ::hx::Val( _currentIcon ); }
		if (HX_FIELD_EQ(inName,"disabledIcon") ) { return ::hx::Val( disabledIcon ); }
		if (HX_FIELD_EQ(inName,"selectedIcon") ) { return ::hx::Val( selectedIcon ); }
		if (HX_FIELD_EQ(inName,"iconPosition") ) { return ::hx::Val( iconPosition ); }
		if (HX_FIELD_EQ(inName,"paddingRight") ) { return ::hx::Val( paddingRight ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_previousText") ) { return ::hx::Val( _previousText ); }
		if (HX_FIELD_EQ(inName,"paddingBottom") ) { return ::hx::Val( paddingBottom ); }
		if (HX_FIELD_EQ(inName,"verticalAlign") ) { return ::hx::Val( verticalAlign ); }
		if (HX_FIELD_EQ(inName,"layoutContent") ) { return ::hx::Val( layoutContent_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getCurrentIcon") ) { return ::hx::Val( getCurrentIcon_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_textFormat") ) { return ::hx::Val( set_textFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_embedFonts") ) { return ::hx::Val( set_embedFonts_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_gap") ) { return ::hx::Val( clearStyle_gap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingTop") ) { return ::hx::Val( set_paddingTop_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"horizontalAlign") ) { return ::hx::Val( horizontalAlign ); }
		if (HX_FIELD_EQ(inName,"getIconForState") ) { return ::hx::Val( getIconForState_dyn() ); }
		if (HX_FIELD_EQ(inName,"setIconForState") ) { return ::hx::Val( setIconForState_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_icon") ) { return ::hx::Val( clearStyle_icon_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingLeft") ) { return ::hx::Val( set_paddingLeft_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_styleContext") ) { return ::hx::Val( get_styleContext_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_disabledIcon") ) { return ::hx::Val( set_disabledIcon_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_selectedIcon") ) { return ::hx::Val( set_selectedIcon_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_iconPosition") ) { return ::hx::Val( set_iconPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingRight") ) { return ::hx::Val( set_paddingRight_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_iconMeasurements") ) { return ::hx::Val( _iconMeasurements ); }
		if (HX_FIELD_EQ(inName,"refreshTextStyles") ) { return ::hx::Val( refreshTextStyles_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeCurrentIcon") ) { return ::hx::Val( removeCurrentIcon_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_minGap") ) { return ::hx::Val( clearStyle_minGap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingBottom") ) { return ::hx::Val( set_paddingBottom_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_verticalAlign") ) { return ::hx::Val( set_verticalAlign_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_updatedTextStyles") ) { return ::hx::Val( _updatedTextStyles ); }
		if (HX_FIELD_EQ(inName,"_ignoreIconResizes") ) { return ::hx::Val( _ignoreIconResizes ); }
		if (HX_FIELD_EQ(inName,"disabledTextFormat") ) { return ::hx::Val( disabledTextFormat ); }
		if (HX_FIELD_EQ(inName,"selectedTextFormat") ) { return ::hx::Val( selectedTextFormat ); }
		if (HX_FIELD_EQ(inName,"_textMeasuredWidth") ) { return ::hx::Val( _textMeasuredWidth ); }
		if (HX_FIELD_EQ(inName,"_stateToTextFormat") ) { return ::hx::Val( _stateToTextFormat ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_previousTextFormat") ) { return ::hx::Val( _previousTextFormat ); }
		if (HX_FIELD_EQ(inName,"_textMeasuredHeight") ) { return ::hx::Val( _textMeasuredHeight ); }
		if (HX_FIELD_EQ(inName,"positionSingleChild") ) { return ::hx::Val( positionSingleChild_dyn() ); }
		if (HX_FIELD_EQ(inName,"positionTextAndIcon") ) { return ::hx::Val( positionTextAndIcon_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_horizontalAlign") ) { return ::hx::Val( set_horizontalAlign_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getCurrentTextFormat") ) { return ::hx::Val( getCurrentTextFormat_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"getTextFormatForState") ) { return ::hx::Val( getTextFormatForState_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTextFormatForState") ) { return ::hx::Val( setTextFormatForState_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_textFormat") ) { return ::hx::Val( clearStyle_textFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_embedFonts") ) { return ::hx::Val( clearStyle_embedFonts_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_paddingTop") ) { return ::hx::Val( clearStyle_paddingTop_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"set_disabledTextFormat") ) { return ::hx::Val( set_disabledTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_selectedTextFormat") ) { return ::hx::Val( set_selectedTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_paddingLeft") ) { return ::hx::Val( clearStyle_paddingLeft_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"clearStyle_disabledIcon") ) { return ::hx::Val( clearStyle_disabledIcon_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_selectedIcon") ) { return ::hx::Val( clearStyle_selectedIcon_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_iconPosition") ) { return ::hx::Val( clearStyle_iconPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_paddingRight") ) { return ::hx::Val( clearStyle_paddingRight_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"clearStyle_paddingBottom") ) { return ::hx::Val( clearStyle_paddingBottom_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_verticalAlign") ) { return ::hx::Val( clearStyle_verticalAlign_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"refreshTextFieldDimensions") ) { return ::hx::Val( refreshTextFieldDimensions_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_horizontalAlign") ) { return ::hx::Val( clearStyle_horizontalAlign_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"initializeToggleButtonTheme") ) { return ::hx::Val( initializeToggleButtonTheme_dyn() ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"clearStyle_disabledTextFormat") ) { return ::hx::Val( clearStyle_disabledTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_selectedTextFormat") ) { return ::hx::Val( clearStyle_selectedTextFormat_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ToggleButton_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"gap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_gap(inValue.Cast< Float >()) );gap=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_text(inValue.Cast< ::String >()) );text=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"icon") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_icon(inValue.Cast<  ::openfl::display::DisplayObject >()) );icon=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"minGap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_minGap(inValue.Cast< Float >()) );minGap=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"textField") ) { textField=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"textFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_textFormat(inValue.Cast<  ::openfl::text::TextFormat >()) );textFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_embedFonts(inValue.Cast< bool >()) );embedFonts=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paddingTop") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingTop(inValue.Cast< Float >()) );paddingTop=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"paddingLeft") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingLeft(inValue.Cast< Float >()) );paddingLeft=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_stateToIcon") ) { _stateToIcon=inValue.Cast<  ::haxe::ds::EnumValueMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_currentIcon") ) { _currentIcon=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"disabledIcon") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_disabledIcon(inValue.Cast<  ::openfl::display::DisplayObject >()) );disabledIcon=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectedIcon") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_selectedIcon(inValue.Cast<  ::openfl::display::DisplayObject >()) );selectedIcon=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iconPosition") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_iconPosition(inValue.Cast<  ::feathers::layout::RelativePosition >()) );iconPosition=inValue.Cast<  ::feathers::layout::RelativePosition >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paddingRight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingRight(inValue.Cast< Float >()) );paddingRight=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_previousText") ) { _previousText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paddingBottom") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingBottom(inValue.Cast< Float >()) );paddingBottom=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"verticalAlign") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_verticalAlign(inValue.Cast<  ::feathers::layout::VerticalAlign >()) );verticalAlign=inValue.Cast<  ::feathers::layout::VerticalAlign >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"horizontalAlign") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_horizontalAlign(inValue.Cast<  ::feathers::layout::HorizontalAlign >()) );horizontalAlign=inValue.Cast<  ::feathers::layout::HorizontalAlign >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_iconMeasurements") ) { _iconMeasurements=inValue.Cast<  ::feathers::layout::Measurements >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_updatedTextStyles") ) { _updatedTextStyles=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_ignoreIconResizes") ) { _ignoreIconResizes=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"disabledTextFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_disabledTextFormat(inValue.Cast<  ::openfl::text::TextFormat >()) );disabledTextFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectedTextFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_selectedTextFormat(inValue.Cast<  ::openfl::text::TextFormat >()) );selectedTextFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_textMeasuredWidth") ) { _textMeasuredWidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_stateToTextFormat") ) { _stateToTextFormat=inValue.Cast<  ::haxe::ds::EnumValueMap >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_previousTextFormat") ) { _previousTextFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_textMeasuredHeight") ) { _textMeasuredHeight=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ToggleButton_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("textField",cd,24,81,99));
	outFields->push(HX_("_previousText",63,2f,0a,d6));
	outFields->push(HX_("_previousTextFormat",fa,5e,47,b1));
	outFields->push(HX_("_updatedTextStyles",8b,09,a3,ed));
	outFields->push(HX_("text",ad,cc,f9,4c));
	outFields->push(HX_("_stateToIcon",86,4d,ff,5b));
	outFields->push(HX_("_iconMeasurements",6f,a8,d1,97));
	outFields->push(HX_("_currentIcon",53,6e,4e,e4));
	outFields->push(HX_("_ignoreIconResizes",55,46,52,72));
	outFields->push(HX_("icon",79,e7,b2,45));
	outFields->push(HX_("disabledIcon",15,c3,f4,6f));
	outFields->push(HX_("selectedIcon",74,07,4d,d6));
	outFields->push(HX_("textFormat",c4,0f,7f,34));
	outFields->push(HX_("embedFonts",2b,c7,e1,8e));
	outFields->push(HX_("disabledTextFormat",60,88,2b,39));
	outFields->push(HX_("selectedTextFormat",ff,dd,85,13));
	outFields->push(HX_("iconPosition",42,e5,38,76));
	outFields->push(HX_("gap",16,7d,4e,00));
	outFields->push(HX_("minGap",a4,ea,e4,52));
	outFields->push(HX_("paddingTop",44,fd,05,3a));
	outFields->push(HX_("paddingRight",4b,ec,a7,1a));
	outFields->push(HX_("paddingBottom",9c,67,99,4f));
	outFields->push(HX_("paddingLeft",78,4a,e6,85));
	outFields->push(HX_("horizontalAlign",41,8f,67,f4));
	outFields->push(HX_("verticalAlign",6f,1e,7c,e4));
	outFields->push(HX_("_textMeasuredWidth",b4,10,38,8f));
	outFields->push(HX_("_textMeasuredHeight",79,05,26,78));
	outFields->push(HX_("_stateToTextFormat",91,fd,b2,b5));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ToggleButton_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::text::TextField */ ,(int)offsetof(ToggleButton_obj,textField),HX_("textField",cd,24,81,99)},
	{::hx::fsString,(int)offsetof(ToggleButton_obj,_previousText),HX_("_previousText",63,2f,0a,d6)},
	{::hx::fsObject /*  ::openfl::text::TextFormat */ ,(int)offsetof(ToggleButton_obj,_previousTextFormat),HX_("_previousTextFormat",fa,5e,47,b1)},
	{::hx::fsBool,(int)offsetof(ToggleButton_obj,_updatedTextStyles),HX_("_updatedTextStyles",8b,09,a3,ed)},
	{::hx::fsString,(int)offsetof(ToggleButton_obj,text),HX_("text",ad,cc,f9,4c)},
	{::hx::fsObject /*  ::haxe::ds::EnumValueMap */ ,(int)offsetof(ToggleButton_obj,_stateToIcon),HX_("_stateToIcon",86,4d,ff,5b)},
	{::hx::fsObject /*  ::feathers::layout::Measurements */ ,(int)offsetof(ToggleButton_obj,_iconMeasurements),HX_("_iconMeasurements",6f,a8,d1,97)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(ToggleButton_obj,_currentIcon),HX_("_currentIcon",53,6e,4e,e4)},
	{::hx::fsBool,(int)offsetof(ToggleButton_obj,_ignoreIconResizes),HX_("_ignoreIconResizes",55,46,52,72)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(ToggleButton_obj,icon),HX_("icon",79,e7,b2,45)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(ToggleButton_obj,disabledIcon),HX_("disabledIcon",15,c3,f4,6f)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(ToggleButton_obj,selectedIcon),HX_("selectedIcon",74,07,4d,d6)},
	{::hx::fsObject /*  ::openfl::text::TextFormat */ ,(int)offsetof(ToggleButton_obj,textFormat),HX_("textFormat",c4,0f,7f,34)},
	{::hx::fsBool,(int)offsetof(ToggleButton_obj,embedFonts),HX_("embedFonts",2b,c7,e1,8e)},
	{::hx::fsObject /*  ::openfl::text::TextFormat */ ,(int)offsetof(ToggleButton_obj,disabledTextFormat),HX_("disabledTextFormat",60,88,2b,39)},
	{::hx::fsObject /*  ::openfl::text::TextFormat */ ,(int)offsetof(ToggleButton_obj,selectedTextFormat),HX_("selectedTextFormat",ff,dd,85,13)},
	{::hx::fsObject /*  ::feathers::layout::RelativePosition */ ,(int)offsetof(ToggleButton_obj,iconPosition),HX_("iconPosition",42,e5,38,76)},
	{::hx::fsFloat,(int)offsetof(ToggleButton_obj,gap),HX_("gap",16,7d,4e,00)},
	{::hx::fsFloat,(int)offsetof(ToggleButton_obj,minGap),HX_("minGap",a4,ea,e4,52)},
	{::hx::fsFloat,(int)offsetof(ToggleButton_obj,paddingTop),HX_("paddingTop",44,fd,05,3a)},
	{::hx::fsFloat,(int)offsetof(ToggleButton_obj,paddingRight),HX_("paddingRight",4b,ec,a7,1a)},
	{::hx::fsFloat,(int)offsetof(ToggleButton_obj,paddingBottom),HX_("paddingBottom",9c,67,99,4f)},
	{::hx::fsFloat,(int)offsetof(ToggleButton_obj,paddingLeft),HX_("paddingLeft",78,4a,e6,85)},
	{::hx::fsObject /*  ::feathers::layout::HorizontalAlign */ ,(int)offsetof(ToggleButton_obj,horizontalAlign),HX_("horizontalAlign",41,8f,67,f4)},
	{::hx::fsObject /*  ::feathers::layout::VerticalAlign */ ,(int)offsetof(ToggleButton_obj,verticalAlign),HX_("verticalAlign",6f,1e,7c,e4)},
	{::hx::fsFloat,(int)offsetof(ToggleButton_obj,_textMeasuredWidth),HX_("_textMeasuredWidth",b4,10,38,8f)},
	{::hx::fsFloat,(int)offsetof(ToggleButton_obj,_textMeasuredHeight),HX_("_textMeasuredHeight",79,05,26,78)},
	{::hx::fsObject /*  ::haxe::ds::EnumValueMap */ ,(int)offsetof(ToggleButton_obj,_stateToTextFormat),HX_("_stateToTextFormat",91,fd,b2,b5)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ToggleButton_obj_sStaticStorageInfo = 0;
#endif

static ::String ToggleButton_obj_sMemberFields[] = {
	HX_("textField",cd,24,81,99),
	HX_("_previousText",63,2f,0a,d6),
	HX_("_previousTextFormat",fa,5e,47,b1),
	HX_("_updatedTextStyles",8b,09,a3,ed),
	HX_("text",ad,cc,f9,4c),
	HX_("get_text",36,88,b4,cc),
	HX_("set_text",aa,e1,11,7b),
	HX_("_stateToIcon",86,4d,ff,5b),
	HX_("_iconMeasurements",6f,a8,d1,97),
	HX_("_currentIcon",53,6e,4e,e4),
	HX_("_ignoreIconResizes",55,46,52,72),
	HX_("icon",79,e7,b2,45),
	HX_("disabledIcon",15,c3,f4,6f),
	HX_("selectedIcon",74,07,4d,d6),
	HX_("textFormat",c4,0f,7f,34),
	HX_("embedFonts",2b,c7,e1,8e),
	HX_("disabledTextFormat",60,88,2b,39),
	HX_("selectedTextFormat",ff,dd,85,13),
	HX_("iconPosition",42,e5,38,76),
	HX_("gap",16,7d,4e,00),
	HX_("minGap",a4,ea,e4,52),
	HX_("paddingTop",44,fd,05,3a),
	HX_("paddingRight",4b,ec,a7,1a),
	HX_("paddingBottom",9c,67,99,4f),
	HX_("paddingLeft",78,4a,e6,85),
	HX_("horizontalAlign",41,8f,67,f4),
	HX_("verticalAlign",6f,1e,7c,e4),
	HX_("_textMeasuredWidth",b4,10,38,8f),
	HX_("_textMeasuredHeight",79,05,26,78),
	HX_("_stateToTextFormat",91,fd,b2,b5),
	HX_("getTextFormatForState",62,b0,16,a8),
	HX_("setTextFormatForState",6e,7e,1f,fc),
	HX_("getIconForState",97,98,f8,4b),
	HX_("setIconForState",a3,15,c4,47),
	HX_("initializeToggleButtonTheme",13,ec,d3,2a),
	HX_("initialize",50,31,bb,ec),
	HX_("update",09,86,05,87),
	HX_("measure",5e,fb,e9,3c),
	HX_("refreshTextStyles",6a,44,c4,9f),
	HX_("refreshText",28,5c,95,41),
	HX_("getCurrentTextFormat",e7,c7,29,33),
	HX_("layoutContent",af,8f,21,da),
	HX_("refreshTextFieldDimensions",5f,dc,23,3e),
	HX_("positionSingleChild",cb,5b,d8,a2),
	HX_("positionTextAndIcon",9a,16,5d,d0),
	HX_("refreshIcon",f4,76,4e,3a),
	HX_("getCurrentIcon",5c,13,e3,05),
	HX_("removeCurrentIcon",6e,5a,95,38),
	HX_("get_styleContext",47,7d,20,4b),
	HX_("set_icon",76,fc,ca,73),
	HX_("clearStyle_icon",74,b4,31,6c),
	HX_("set_disabledIcon",12,9d,d5,ca),
	HX_("clearStyle_disabledIcon",10,83,d1,76),
	HX_("set_selectedIcon",71,e1,2d,31),
	HX_("clearStyle_selectedIcon",6f,c7,29,dd),
	HX_("set_textFormat",81,80,94,ca),
	HX_("clearStyle_textFormat",ff,4a,aa,2d),
	HX_("set_embedFonts",e8,37,f7,24),
	HX_("clearStyle_embedFonts",66,02,0d,88),
	HX_("set_disabledTextFormat",1d,7e,6b,c6),
	HX_("clearStyle_disabledTextFormat",9b,f6,2c,16),
	HX_("set_selectedTextFormat",bc,d3,c5,a0),
	HX_("clearStyle_selectedTextFormat",3a,4c,87,f0),
	HX_("set_iconPosition",3f,bf,19,d1),
	HX_("clearStyle_iconPosition",3d,a5,15,7d),
	HX_("set_gap",b9,d6,c4,19),
	HX_("clearStyle_gap",7b,a8,15,a8),
	HX_("set_minGap",e1,f8,e9,46),
	HX_("clearStyle_minGap",5f,2c,6d,30),
	HX_("set_paddingTop",01,6e,1b,d0),
	HX_("clearStyle_paddingTop",7f,38,31,33),
	HX_("set_paddingRight",48,c6,88,75),
	HX_("clearStyle_paddingRight",46,ac,84,21),
	HX_("set_paddingBottom",ff,4a,77,79),
	HX_("clearStyle_paddingBottom",41,a3,e4,49),
	HX_("set_paddingLeft",1b,7f,93,42),
	HX_("clearStyle_paddingLeft",dd,e2,8e,92),
	HX_("set_horizontalAlign",64,51,0f,bc),
	HX_("clearStyle_horizontalAlign",26,be,b4,84),
	HX_("set_verticalAlign",d2,01,5a,0e),
	HX_("clearStyle_verticalAlign",14,5a,c7,de),
	::String(null()) };

::hx::Class ToggleButton_obj::__mClass;

void ToggleButton_obj::__register()
{
	ToggleButton_obj _hx_dummy;
	ToggleButton_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("feathers.controls.ToggleButton",c0,e3,d1,86);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ToggleButton_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ToggleButton_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ToggleButton_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ToggleButton_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ToggleButton_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_0a2fccb1c21dad55_51_boot)
HXDLIN(  51)		__mClass->__meta__ =  ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("fields",79,8e,8e,80), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("setTextFormatForState",6e,7e,1f,fc), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("style",31,a5,1d,84),null())))
            				->setFixed(1,HX_("setIconForState",a3,15,c4,47), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("style",31,a5,1d,84),null()))))));
            	}
}

} // end namespace feathers
} // end namespace controls
