// Generated by Haxe 4.1.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_feathers_controls_TextInput
#include <feathers/controls/TextInput.h>
#endif
#ifndef INCLUDED_feathers_controls_TextInputState
#include <feathers/controls/TextInputState.h>
#endif
#ifndef INCLUDED_feathers_core_FeathersControl
#include <feathers/core/FeathersControl.h>
#endif
#ifndef INCLUDED_feathers_core_IDisplayObject
#include <feathers/core/IDisplayObject.h>
#endif
#ifndef INCLUDED_feathers_core_IFocusObject
#include <feathers/core/IFocusObject.h>
#endif
#ifndef INCLUDED_feathers_core_IMeasureObject
#include <feathers/core/IMeasureObject.h>
#endif
#ifndef INCLUDED_feathers_core_IStateContext
#include <feathers/core/IStateContext.h>
#endif
#ifndef INCLUDED_feathers_core_IStateObserver
#include <feathers/core/IStateObserver.h>
#endif
#ifndef INCLUDED_feathers_core_ITextControl
#include <feathers/core/ITextControl.h>
#endif
#ifndef INCLUDED_feathers_core_IUIControl
#include <feathers/core/IUIControl.h>
#endif
#ifndef INCLUDED_feathers_core_IValidating
#include <feathers/core/IValidating.h>
#endif
#ifndef INCLUDED_feathers_core_MeasureSprite
#include <feathers/core/MeasureSprite.h>
#endif
#ifndef INCLUDED_feathers_core_ValidatingSprite
#include <feathers/core/ValidatingSprite.h>
#endif
#ifndef INCLUDED_feathers_events_FeathersEvent
#include <feathers/events/FeathersEvent.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayoutObject
#include <feathers/layout/ILayoutObject.h>
#endif
#ifndef INCLUDED_feathers_layout_Measurements
#include <feathers/layout/Measurements.h>
#endif
#ifndef INCLUDED_feathers_layout_VerticalAlign
#include <feathers/layout/VerticalAlign.h>
#endif
#ifndef INCLUDED_feathers_style_IDarkModeTheme
#include <feathers/style/IDarkModeTheme.h>
#endif
#ifndef INCLUDED_feathers_style_IStyleObject
#include <feathers/style/IStyleObject.h>
#endif
#ifndef INCLUDED_feathers_style_ITheme
#include <feathers/style/ITheme.h>
#endif
#ifndef INCLUDED_feathers_style_IVariantStyleObject
#include <feathers/style/IVariantStyleObject.h>
#endif
#ifndef INCLUDED_feathers_themes_ClassVariantTheme
#include <feathers/themes/ClassVariantTheme.h>
#endif
#ifndef INCLUDED_feathers_themes_steel_BaseSteelTheme
#include <feathers/themes/steel/BaseSteelTheme.h>
#endif
#ifndef INCLUDED_feathers_themes_steel_components_SteelTextInputStyles
#include <feathers/themes/steel/components/SteelTextInputStyles.h>
#endif
#ifndef INCLUDED_feathers_utils_MeasurementsUtil
#include <feathers/utils/MeasurementsUtil.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <haxe/ds/EnumValueMap.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_FocusEvent
#include <openfl/events/FocusEvent.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5d64ccb50b85967a_53_new,"feathers.controls.TextInput","new",0xa8429735,"feathers.controls.TextInput.new","feathers/controls/TextInput.hx",53,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_82_get_currentState,"feathers.controls.TextInput","get_currentState",0x53ba1fac,"feathers.controls.TextInput.get_currentState","feathers/controls/TextInput.hx",82,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_85_set_enabled,"feathers.controls.TextInput","set_enabled",0x8e998f79,"feathers.controls.TextInput.set_enabled","feathers/controls/TextInput.hx",85,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_152_get_text,"feathers.controls.TextInput","get_text",0x797bdd41,"feathers.controls.TextInput.get_text","feathers/controls/TextInput.hx",152,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_155_set_text,"feathers.controls.TextInput","set_text",0x27d936b5,"feathers.controls.TextInput.set_text","feathers/controls/TextInput.hx",155,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_191_set_restrict,"feathers.controls.TextInput","set_restrict",0x3cafd944,"feathers.controls.TextInput.set_restrict","feathers/controls/TextInput.hx",191,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_218_set_displayAsPassword,"feathers.controls.TextInput","set_displayAsPassword",0x4a47bc07,"feathers.controls.TextInput.set_displayAsPassword","feathers/controls/TextInput.hx",218,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_368_set_scrollX,"feathers.controls.TextInput","set_scrollX",0x4140bea3,"feathers.controls.TextInput.set_scrollX","feathers/controls/TextInput.hx",368,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_395_getSkinForState,"feathers.controls.TextInput","getSkinForState",0x21cf9df0,"feathers.controls.TextInput.getSkinForState","feathers/controls/TextInput.hx",395,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_413_setSkinForState,"feathers.controls.TextInput","setSkinForState",0x1d9b1afc,"feathers.controls.TextInput.setSkinForState","feathers/controls/TextInput.hx",413,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_444_getTextFormatForState,"feathers.controls.TextInput","getTextFormatForState",0x3510d077,"feathers.controls.TextInput.getTextFormatForState","feathers/controls/TextInput.hx",444,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_462_setTextFormatForState,"feathers.controls.TextInput","setTextFormatForState",0x89199e83,"feathers.controls.TextInput.setTextFormatForState","feathers/controls/TextInput.hx",462,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_475_initializeTextInputTheme,"feathers.controls.TextInput","initializeTextInputTheme",0xf6f35d27,"feathers.controls.TextInput.initializeTextInputTheme","feathers/controls/TextInput.hx",475,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_478_initialize,"feathers.controls.TextInput","initialize",0xd9ca1f1b,"feathers.controls.TextInput.initialize","feathers/controls/TextInput.hx",478,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_492_update,"feathers.controls.TextInput","update",0x74e0f254,"feathers.controls.TextInput.update","feathers/controls/TextInput.hx",492,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_520_refreshBackgroundSkin,"feathers.controls.TextInput","refreshBackgroundSkin",0xba8b5cdb,"feathers.controls.TextInput.refreshBackgroundSkin","feathers/controls/TextInput.hx",520,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_545_getCurrentBackgroundSkin,"feathers.controls.TextInput","getCurrentBackgroundSkin",0x1dd7c639,"feathers.controls.TextInput.getCurrentBackgroundSkin","feathers/controls/TextInput.hx",545,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_553_removeCurrentBackgroundSkin,"feathers.controls.TextInput","removeCurrentBackgroundSkin",0x3f05da95,"feathers.controls.TextInput.removeCurrentBackgroundSkin","feathers/controls/TextInput.hx",553,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_568_measure,"feathers.controls.TextInput","measure",0x6f0d50b3,"feathers.controls.TextInput.measure","feathers/controls/TextInput.hx",568,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_654_refreshTextStyles,"feathers.controls.TextInput","refreshTextStyles",0x9f1d75ff,"feathers.controls.TextInput.refreshTextStyles","feathers/controls/TextInput.hx",654,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_680_refreshText,"feathers.controls.TextInput","refreshText",0xc1967ffd,"feathers.controls.TextInput.refreshText","feathers/controls/TextInput.hx",680,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_703_refreshScrollPosition,"feathers.controls.TextInput","refreshScrollPosition",0xf1078126,"feathers.controls.TextInput.refreshScrollPosition","feathers/controls/TextInput.hx",703,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_706_getCurrentTextFormat,"feathers.controls.TextInput","getCurrentTextFormat",0x57620172,"feathers.controls.TextInput.getCurrentTextFormat","feathers/controls/TextInput.hx",706,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_714_layoutContent,"feathers.controls.TextInput","layoutContent",0x379312c4,"feathers.controls.TextInput.layoutContent","feathers/controls/TextInput.hx",714,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_742_layoutBackgroundSkin,"feathers.controls.TextInput","layoutBackgroundSkin",0x0f627760,"feathers.controls.TextInput.layoutBackgroundSkin","feathers/controls/TextInput.hx",742,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_763_changeState,"feathers.controls.TextInput","changeState",0x29d24256,"feathers.controls.TextInput.changeState","feathers/controls/TextInput.hx",763,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_775_textField_changeHandler,"feathers.controls.TextInput","textField_changeHandler",0xc605655d,"feathers.controls.TextInput.textField_changeHandler","feathers/controls/TextInput.hx",775,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_786_textField_scrollHandler,"feathers.controls.TextInput","textField_scrollHandler",0xd777dc60,"feathers.controls.TextInput.textField_scrollHandler","feathers/controls/TextInput.hx",786,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_794_textInput_focusInHandler,"feathers.controls.TextInput","textInput_focusInHandler",0xc5f62f9a,"feathers.controls.TextInput.textInput_focusInHandler","feathers/controls/TextInput.hx",794,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_800_textField_focusInHandler,"feathers.controls.TextInput","textField_focusInHandler",0xa1a6a4ea,"feathers.controls.TextInput.textField_focusInHandler","feathers/controls/TextInput.hx",800,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_804_textField_focusOutHandler,"feathers.controls.TextInput","textField_focusOutHandler",0x65af06b7,"feathers.controls.TextInput.textField_focusOutHandler","feathers/controls/TextInput.hx",804,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_68_set_backgroundSkin,"feathers.controls.TextInput","set_backgroundSkin",0x076aa993,"feathers.controls.TextInput.set_backgroundSkin","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_94_clearStyle_backgroundSkin,"feathers.controls.TextInput","clearStyle_backgroundSkin",0xa3eca8db,"feathers.controls.TextInput.clearStyle_backgroundSkin","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_68_set_textFormat,"feathers.controls.TextInput","set_textFormat",0x3075afcc,"feathers.controls.TextInput.set_textFormat","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_94_clearStyle_textFormat,"feathers.controls.TextInput","clearStyle_textFormat",0xbaa46b14,"feathers.controls.TextInput.clearStyle_textFormat","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_68_set_embedFonts,"feathers.controls.TextInput","set_embedFonts",0x8ad86733,"feathers.controls.TextInput.set_embedFonts","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_94_clearStyle_embedFonts,"feathers.controls.TextInput","clearStyle_embedFonts",0x1507227b,"feathers.controls.TextInput.clearStyle_embedFonts","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_68_set_paddingTop,"feathers.controls.TextInput","set_paddingTop",0x35fc9d4c,"feathers.controls.TextInput.set_paddingTop","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_94_clearStyle_paddingTop,"feathers.controls.TextInput","clearStyle_paddingTop",0xc02b5894,"feathers.controls.TextInput.clearStyle_paddingTop","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_68_set_paddingRight,"feathers.controls.TextInput","set_paddingRight",0xf98c9e53,"feathers.controls.TextInput.set_paddingRight","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_94_clearStyle_paddingRight,"feathers.controls.TextInput","clearStyle_paddingRight",0x7956bb9b,"feathers.controls.TextInput.clearStyle_paddingRight","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_68_set_paddingBottom,"feathers.controls.TextInput","set_paddingBottom",0x78d07c94,"feathers.controls.TextInput.set_paddingBottom","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_94_clearStyle_paddingBottom,"feathers.controls.TextInput","clearStyle_paddingBottom",0xc9dffe4c,"feathers.controls.TextInput.clearStyle_paddingBottom","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_68_set_paddingLeft,"feathers.controls.TextInput","set_paddingLeft",0x01bbb170,"feathers.controls.TextInput.set_paddingLeft","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_94_clearStyle_paddingLeft,"feathers.controls.TextInput","clearStyle_paddingLeft",0x6070d528,"feathers.controls.TextInput.clearStyle_paddingLeft","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_68_set_verticalAlign,"feathers.controls.TextInput","set_verticalAlign",0x0db33367,"feathers.controls.TextInput.set_verticalAlign","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_94_clearStyle_verticalAlign,"feathers.controls.TextInput","clearStyle_verticalAlign",0x5ec2b51f,"feathers.controls.TextInput.clearStyle_verticalAlign","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_5924568a4aeee60f_42_get_styleContext,"feathers.controls.TextInput","get_styleContext",0xcf245552,"feathers.controls.TextInput.get_styleContext","feathers/macros/StyleContextMacro.hx",42,0xea61cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_53_boot,"feathers.controls.TextInput","boot",0x8a1ab7bd,"feathers.controls.TextInput.boot","feathers/controls/TextInput.hx",53,0x8bf5cdbb)
namespace feathers{
namespace controls{

void TextInput_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_5d64ccb50b85967a_53_new)
HXLINE( 366)		this->scrollX = ((Float)0.0);
HXLINE( 352)		this->verticalAlign = ::feathers::layout::VerticalAlign_obj::MIDDLE_dyn();
HXLINE( 334)		this->paddingLeft = ((Float)0.0);
HXLINE( 316)		this->paddingBottom = ((Float)0.0);
HXLINE( 298)		this->paddingRight = ((Float)0.0);
HXLINE( 280)		this->paddingTop = ((Float)0.0);
HXLINE( 262)		this->_stateToTextFormat =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
HXLINE( 260)		this->embedFonts = false;
HXLINE( 244)		this->textFormat = null();
HXLINE( 149)		this->text = HX_("",00,00,00,00);
HXLINE( 127)		this->_updatedTextStyles = false;
HXLINE( 126)		this->_previousTextFormat = null();
HXLINE( 125)		this->_previousText = null();
HXLINE( 121)		this->_stateToSkin =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
HXLINE( 119)		this->backgroundSkin = null();
HXLINE(  98)		this->_currentBackgroundSkin = null();
HXLINE(  97)		this->_backgroundSkinMeasurements = null();
HXLINE(  79)		this->currentState = ::feathers::controls::TextInputState_obj::ENABLED_dyn();
HXLINE(  60)		this->initializeTextInputTheme();
HXLINE(  62)		super::__construct();
HXLINE(  64)		this->set_tabEnabled(true);
HXLINE(  65)		this->set_tabChildren(false);
HXLINE(  66)		this->focusRect = false;
HXLINE(  68)		this->addEventListener(HX_("focusIn",dd,45,83,41),this->textInput_focusInHandler_dyn(),null(),null(),null());
            	}

Dynamic TextInput_obj::__CreateEmpty() { return new TextInput_obj; }

void *TextInput_obj::_hx_vtable = 0;

Dynamic TextInput_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TextInput_obj > _hx_result = new TextInput_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TextInput_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2d42ea17) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x093ab78b) {
				if (inClassId<=(int)0x0330636f) {
					return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
				} else {
					return inClassId==(int)0x093ab78b;
				}
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x2d42ea17;
		}
	} else {
		if (inClassId<=(int)0x58123034) {
			if (inClassId<=(int)0x4af7dd8e) {
				return inClassId==(int)0x4033f4be || inClassId==(int)0x4af7dd8e;
			} else {
				return inClassId==(int)0x58123034;
			}
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

static ::feathers::core::IStateContext_obj _hx_feathers_controls_TextInput__hx_feathers_core_IStateContext= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::TextInput_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::TextInput_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextInput_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::TextInput_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextInput_obj::willTrigger,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_currentState_2aa2127b,
};

static ::openfl::events::IEventDispatcher_obj _hx_feathers_controls_TextInput__hx_openfl_events_IEventDispatcher= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::TextInput_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::TextInput_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextInput_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::TextInput_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextInput_obj::willTrigger,
};

static ::feathers::core::ITextControl_obj _hx_feathers_controls_TextInput__hx_feathers_core_ITextControl= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::TextInput_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::TextInput_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextInput_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::TextInput_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextInput_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_scaleY,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_alpha,
	( bool (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::TextInput_obj::set_visible,
	( bool (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_enabled,
	( bool (::hx::Object::*)(bool))&::feathers::controls::TextInput_obj::set_enabled,
	( void (::hx::Object::*)())&::feathers::controls::TextInput_obj::initializeNow,
	( ::String (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_text,
	( ::String (::hx::Object::*)(::String))&::feathers::controls::TextInput_obj::set_text,
};

static ::feathers::core::IFocusObject_obj _hx_feathers_controls_TextInput__hx_feathers_core_IFocusObject= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::TextInput_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::TextInput_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextInput_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::TextInput_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextInput_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_scaleY,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_alpha,
	( bool (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::TextInput_obj::set_visible,
	( ::Dynamic (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_focusManager,
	( ::Dynamic (::hx::Object::*)(::Dynamic))&::feathers::controls::TextInput_obj::set_focusManager,
	( bool (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_focusEnabled,
	( bool (::hx::Object::*)(bool))&::feathers::controls::TextInput_obj::set_focusEnabled,
	( void (::hx::Object::*)(bool))&::feathers::controls::TextInput_obj::showFocus,
};

static ::feathers::core::IUIControl_obj _hx_feathers_controls_TextInput__hx_feathers_core_IUIControl= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::TextInput_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::TextInput_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextInput_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::TextInput_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextInput_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_scaleY,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_alpha,
	( bool (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::TextInput_obj::set_visible,
	( bool (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_enabled,
	( bool (::hx::Object::*)(bool))&::feathers::controls::TextInput_obj::set_enabled,
	( void (::hx::Object::*)())&::feathers::controls::TextInput_obj::initializeNow,
};

static ::feathers::core::IDisplayObject_obj _hx_feathers_controls_TextInput__hx_feathers_core_IDisplayObject= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::TextInput_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::TextInput_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextInput_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::TextInput_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextInput_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_scaleY,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_alpha,
	( bool (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::TextInput_obj::set_visible,
};

 ::Dynamic TextInput_obj::get_currentState_2aa2127b() {
			return get_currentState();
}
void *TextInput_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xa18fd6d8: return &_hx_feathers_controls_TextInput__hx_feathers_core_IStateContext;
		case (int)0x87530281: return &_hx_feathers_controls_TextInput__hx_openfl_events_IEventDispatcher;
		case (int)0xfccd2876: return &_hx_feathers_controls_TextInput__hx_feathers_core_ITextControl;
		case (int)0x701686fd: return &_hx_feathers_controls_TextInput__hx_feathers_core_IFocusObject;
		case (int)0x2696a04f: return &_hx_feathers_controls_TextInput__hx_feathers_core_IUIControl;
		case (int)0x3a979a67: return &_hx_feathers_controls_TextInput__hx_feathers_core_IDisplayObject;
	}
	return super::_hx_getInterface(inHash);
}

 ::feathers::controls::TextInputState TextInput_obj::get_currentState(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_82_get_currentState)
HXDLIN(  82)		return this->currentState;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,get_currentState,return )

bool TextInput_obj::set_enabled(bool value){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_85_set_enabled)
HXLINE(  86)		this->super::set_enabled(value);
HXLINE(  87)		if (this->get_enabled()) {
HXLINE(  88)			if (::hx::IsEq( this->get_currentState(),::feathers::controls::TextInputState_obj::DISABLED_dyn() )) {
HXLINE(  89)				this->changeState(::feathers::controls::TextInputState_obj::ENABLED_dyn());
            			}
            		}
            		else {
HXLINE(  92)			this->changeState(::feathers::controls::TextInputState_obj::DISABLED_dyn());
            		}
HXLINE(  94)		return this->get_enabled();
            	}


::String TextInput_obj::get_text(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_152_get_text)
HXDLIN( 152)		return this->text;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,get_text,return )

::String TextInput_obj::set_text(::String value){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_155_set_text)
HXLINE( 156)		if (::hx::IsNull( value )) {
HXLINE( 158)			if ((this->get_text().length == 0)) {
HXLINE( 160)				return this->get_text();
            			}
HXLINE( 162)			value = HX_("",00,00,00,00);
            		}
HXLINE( 164)		if ((this->get_text() == value)) {
HXLINE( 165)			return this->get_text();
            		}
HXLINE( 167)		this->text = value;
HXLINE( 168)		this->setInvalid(HX_("data",2a,56,63,42));
HXLINE( 169)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 170)		return this->get_text();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,set_text,return )

::String TextInput_obj::set_restrict(::String value){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_191_set_restrict)
HXLINE( 192)		if ((this->restrict == value)) {
HXLINE( 193)			return this->restrict;
            		}
HXLINE( 195)		this->restrict = value;
HXLINE( 196)		this->setInvalid(HX_("data",2a,56,63,42));
HXLINE( 197)		return this->restrict;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,set_restrict,return )

bool TextInput_obj::set_displayAsPassword(bool value){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_218_set_displayAsPassword)
HXLINE( 219)		if ((this->displayAsPassword == value)) {
HXLINE( 220)			return this->displayAsPassword;
            		}
HXLINE( 222)		this->displayAsPassword = value;
HXLINE( 223)		this->setInvalid(HX_("data",2a,56,63,42));
HXLINE( 224)		return this->displayAsPassword;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,set_displayAsPassword,return )

Float TextInput_obj::set_scrollX(Float value){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_368_set_scrollX)
HXLINE( 369)		if ((this->scrollX == value)) {
HXLINE( 370)			return this->scrollX;
            		}
HXLINE( 372)		this->scrollX = value;
HXLINE( 373)		this->setInvalid(HX_("scroll",0d,d8,64,47));
HXLINE( 374)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("scroll",0d,d8,64,47),null(),null());
HXLINE( 375)		return this->scrollX;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,set_scrollX,return )

 ::openfl::display::DisplayObject TextInput_obj::getSkinForState( ::feathers::controls::TextInputState state){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_395_getSkinForState)
HXDLIN( 395)		return this->_stateToSkin->get(state).StaticCast<  ::openfl::display::DisplayObject >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,getSkinForState,return )

void TextInput_obj::setSkinForState( ::feathers::controls::TextInputState state, ::openfl::display::DisplayObject skin){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_413_setSkinForState)
HXLINE( 414)		if (!(this->setStyle(HX_("setSkinForState",a7,e8,72,5e),state))) {
HXLINE( 415)			return;
            		}
HXLINE( 417)		 ::openfl::display::DisplayObject oldSkin = this->_stateToSkin->get(state).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 418)		bool _hx_tmp;
HXDLIN( 418)		if (::hx::IsNotNull( oldSkin )) {
HXLINE( 418)			_hx_tmp = ::hx::IsEq( oldSkin,this->_currentBackgroundSkin );
            		}
            		else {
HXLINE( 418)			_hx_tmp = false;
            		}
HXDLIN( 418)		if (_hx_tmp) {
HXLINE( 419)			this->removeCurrentBackgroundSkin(oldSkin);
HXLINE( 420)			this->_currentBackgroundSkin = null();
            		}
HXLINE( 422)		if (::hx::IsNull( skin )) {
HXLINE( 423)			this->_stateToSkin->remove(state);
            		}
            		else {
HXLINE( 425)			this->_stateToSkin->set(state,skin);
            		}
HXLINE( 427)		this->setInvalid(HX_("styles",22,e6,d2,15));
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextInput_obj,setSkinForState,(void))

 ::openfl::text::TextFormat TextInput_obj::getTextFormatForState( ::feathers::controls::TextInputState state){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_444_getTextFormatForState)
HXDLIN( 444)		return this->_stateToTextFormat->get(state).StaticCast<  ::openfl::text::TextFormat >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,getTextFormatForState,return )

void TextInput_obj::setTextFormatForState( ::feathers::controls::TextInputState state, ::openfl::text::TextFormat textFormat){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_462_setTextFormatForState)
HXLINE( 463)		if (!(this->setStyle(HX_("setTextFormatForState",6e,7e,1f,fc),state))) {
HXLINE( 464)			return;
            		}
HXLINE( 466)		if (::hx::IsNull( textFormat )) {
HXLINE( 467)			this->_stateToTextFormat->remove(state);
            		}
            		else {
HXLINE( 469)			this->_stateToTextFormat->set(state,textFormat);
            		}
HXLINE( 471)		this->setInvalid(HX_("styles",22,e6,d2,15));
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextInput_obj,setTextFormatForState,(void))

void TextInput_obj::initializeTextInputTheme(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_475_initializeTextInputTheme)
HXDLIN( 475)		::feathers::themes::steel::components::SteelTextInputStyles_obj::initialize(null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,initializeTextInputTheme,(void))

void TextInput_obj::initialize(){
            	HX_GC_STACKFRAME(&_hx_pos_5d64ccb50b85967a_478_initialize)
HXLINE( 479)		this->super::initialize();
HXLINE( 480)		if (::hx::IsNull( this->textField )) {
HXLINE( 481)			this->textField =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE( 482)			this->textField->set_selectable(true);
HXLINE( 483)			this->textField->set_tabEnabled(false);
HXLINE( 484)			this->textField->addEventListener(HX_("change",70,91,72,b7),this->textField_changeHandler_dyn(),null(),null(),null());
HXLINE( 485)			this->textField->addEventListener(HX_("scroll",0d,d8,64,47),this->textField_scrollHandler_dyn(),null(),null(),null());
HXLINE( 486)			this->textField->addEventListener(HX_("focusIn",dd,45,83,41),this->textField_focusInHandler_dyn(),null(),null(),null());
HXLINE( 487)			this->textField->addEventListener(HX_("focusOut",96,6f,5e,11),this->textField_focusOutHandler_dyn(),null(),null(),null());
HXLINE( 488)			this->addChild(this->textField);
            		}
            	}


void TextInput_obj::update(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_492_update)
HXLINE( 493)		bool dataInvalid = this->isInvalid(HX_("data",2a,56,63,42));
HXLINE( 494)		bool scrollInvalid = this->isInvalid(HX_("scroll",0d,d8,64,47));
HXLINE( 495)		bool stateInvalid = this->isInvalid(HX_("state",11,76,0b,84));
HXLINE( 496)		bool stylesInvalid = this->isInvalid(HX_("styles",22,e6,d2,15));
HXLINE( 498)		this->_updatedTextStyles = false;
HXLINE( 500)		bool _hx_tmp;
HXDLIN( 500)		if (!(stylesInvalid)) {
HXLINE( 500)			_hx_tmp = stateInvalid;
            		}
            		else {
HXLINE( 500)			_hx_tmp = true;
            		}
HXDLIN( 500)		if (_hx_tmp) {
HXLINE( 501)			this->refreshBackgroundSkin();
            		}
HXLINE( 504)		bool _hx_tmp1;
HXDLIN( 504)		if (!(stylesInvalid)) {
HXLINE( 504)			_hx_tmp1 = stateInvalid;
            		}
            		else {
HXLINE( 504)			_hx_tmp1 = true;
            		}
HXDLIN( 504)		if (_hx_tmp1) {
HXLINE( 505)			this->refreshTextStyles();
            		}
HXLINE( 508)		bool _hx_tmp2;
HXDLIN( 508)		bool _hx_tmp3;
HXDLIN( 508)		if (!(dataInvalid)) {
HXLINE( 508)			_hx_tmp3 = stylesInvalid;
            		}
            		else {
HXLINE( 508)			_hx_tmp3 = true;
            		}
HXDLIN( 508)		if (!(_hx_tmp3)) {
HXLINE( 508)			_hx_tmp2 = stateInvalid;
            		}
            		else {
HXLINE( 508)			_hx_tmp2 = true;
            		}
HXDLIN( 508)		if (_hx_tmp2) {
HXLINE( 509)			this->refreshText();
            		}
HXLINE( 512)		if (scrollInvalid) {
HXLINE( 513)			this->refreshScrollPosition();
            		}
HXLINE( 516)		this->measure();
HXLINE( 517)		this->layoutContent();
            	}


void TextInput_obj::refreshBackgroundSkin(){
            	HX_GC_STACKFRAME(&_hx_pos_5d64ccb50b85967a_520_refreshBackgroundSkin)
HXLINE( 521)		 ::openfl::display::DisplayObject oldSkin = this->_currentBackgroundSkin;
HXLINE( 522)		this->_currentBackgroundSkin = this->getCurrentBackgroundSkin();
HXLINE( 523)		if (::hx::IsEq( this->_currentBackgroundSkin,oldSkin )) {
HXLINE( 524)			return;
            		}
HXLINE( 526)		this->removeCurrentBackgroundSkin(oldSkin);
HXLINE( 527)		if (::hx::IsNull( this->_currentBackgroundSkin )) {
HXLINE( 528)			this->_backgroundSkinMeasurements = null();
HXLINE( 529)			return;
            		}
HXLINE( 531)		if (::Std_obj::isOfType(this->_currentBackgroundSkin,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IUIControl >()) ))) {
HXLINE( 532)			::feathers::core::IUIControl_obj::initializeNow( ::hx::interface_check(this->_currentBackgroundSkin,0x2696a04f));
            		}
HXLINE( 534)		if (::hx::IsNull( this->_backgroundSkinMeasurements )) {
HXLINE( 535)			this->_backgroundSkinMeasurements =  ::feathers::layout::Measurements_obj::__alloc( HX_CTX ,this->_currentBackgroundSkin);
            		}
            		else {
HXLINE( 537)			this->_backgroundSkinMeasurements->save(this->_currentBackgroundSkin);
            		}
HXLINE( 539)		if (::Std_obj::isOfType(this->_currentBackgroundSkin,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IStateObserver >()) ))) {
HXLINE( 540)			::feathers::core::IStateObserver_obj::set_stateContext( ::hx::interface_check(this->_currentBackgroundSkin,0xb36ec70d),::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 542)		this->addChildAt(this->_currentBackgroundSkin,0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,refreshBackgroundSkin,(void))

 ::openfl::display::DisplayObject TextInput_obj::getCurrentBackgroundSkin(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_545_getCurrentBackgroundSkin)
HXLINE( 546)		::Dynamic this1 = this->_stateToSkin;
HXDLIN( 546)		 ::openfl::display::DisplayObject result = ( ( ::haxe::ds::EnumValueMap)(this1) )->get(this->get_currentState()).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 547)		if (::hx::IsNotNull( result )) {
HXLINE( 548)			return result;
            		}
HXLINE( 550)		return this->backgroundSkin;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,getCurrentBackgroundSkin,return )

void TextInput_obj::removeCurrentBackgroundSkin( ::openfl::display::DisplayObject skin){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_553_removeCurrentBackgroundSkin)
HXLINE( 554)		if (::hx::IsNull( skin )) {
HXLINE( 555)			return;
            		}
HXLINE( 557)		if (::Std_obj::isOfType(skin,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IStateObserver >()) ))) {
HXLINE( 558)			::feathers::core::IStateObserver_obj::set_stateContext( ::hx::interface_check(skin,0xb36ec70d),null());
            		}
HXLINE( 560)		this->_backgroundSkinMeasurements->restore(skin);
HXLINE( 561)		if (::hx::IsEq( skin->parent,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 564)			this->removeChild(skin);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,removeCurrentBackgroundSkin,(void))

bool TextInput_obj::measure(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_568_measure)
HXLINE( 569)		bool needsWidth = ::hx::IsNull( this->get_explicitWidth() );
HXLINE( 570)		bool needsHeight = ::hx::IsNull( this->get_explicitHeight() );
HXLINE( 571)		bool needsMinWidth = ::hx::IsNull( this->get_explicitMinWidth() );
HXLINE( 572)		bool needsMinHeight = ::hx::IsNull( this->get_explicitMinHeight() );
HXLINE( 573)		bool needsMaxWidth = ::hx::IsNull( this->get_explicitMaxWidth() );
HXLINE( 574)		bool needsMaxHeight = ::hx::IsNull( this->get_explicitMaxHeight() );
HXLINE( 575)		bool _hx_tmp;
HXDLIN( 575)		bool _hx_tmp1;
HXDLIN( 575)		bool _hx_tmp2;
HXDLIN( 575)		bool _hx_tmp3;
HXDLIN( 575)		bool _hx_tmp4;
HXDLIN( 575)		if (!(needsWidth)) {
HXLINE( 575)			_hx_tmp4 = !(needsHeight);
            		}
            		else {
HXLINE( 575)			_hx_tmp4 = false;
            		}
HXDLIN( 575)		if (_hx_tmp4) {
HXLINE( 575)			_hx_tmp3 = !(needsMinWidth);
            		}
            		else {
HXLINE( 575)			_hx_tmp3 = false;
            		}
HXDLIN( 575)		if (_hx_tmp3) {
HXLINE( 575)			_hx_tmp2 = !(needsMinHeight);
            		}
            		else {
HXLINE( 575)			_hx_tmp2 = false;
            		}
HXDLIN( 575)		if (_hx_tmp2) {
HXLINE( 575)			_hx_tmp1 = !(needsMaxWidth);
            		}
            		else {
HXLINE( 575)			_hx_tmp1 = false;
            		}
HXDLIN( 575)		if (_hx_tmp1) {
HXLINE( 575)			_hx_tmp = !(needsMaxHeight);
            		}
            		else {
HXLINE( 575)			_hx_tmp = false;
            		}
HXDLIN( 575)		if (_hx_tmp) {
HXLINE( 576)			return false;
            		}
HXLINE( 579)		if (::hx::IsNotNull( this->_backgroundSkinMeasurements )) {
HXLINE( 580)			::feathers::utils::MeasurementsUtil_obj::resetFluidlyWithParent(this->_backgroundSkinMeasurements,this->_currentBackgroundSkin,::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 583)		::Dynamic measureSkin = null();
HXLINE( 584)		if (::Std_obj::isOfType(this->_currentBackgroundSkin,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IMeasureObject >()) ))) {
HXLINE( 585)			measureSkin =  ::hx::interface_check(this->_currentBackgroundSkin,0xcfc32883);
            		}
HXLINE( 588)		if (::Std_obj::isOfType(this->_currentBackgroundSkin,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IValidating >()) ))) {
HXLINE( 589)			::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->_currentBackgroundSkin,0x64d4b3cd));
            		}
HXLINE( 592)		 ::Dynamic newWidth = this->get_explicitWidth();
HXLINE( 593)		if (needsWidth) {
HXLINE( 594)			if (::hx::IsNotNull( this->_currentBackgroundSkin )) {
HXLINE( 595)				newWidth = this->_currentBackgroundSkin->get_width();
            			}
            			else {
HXLINE( 597)				newWidth = ((Float)0.0);
            			}
            		}
HXLINE( 601)		 ::Dynamic newHeight = this->get_explicitHeight();
HXLINE( 602)		if (needsHeight) {
HXLINE( 603)			newHeight = ((this->_textMeasuredHeight + this->paddingTop) + this->paddingBottom);
HXLINE( 604)			if (::hx::IsNotNull( this->_currentBackgroundSkin )) {
HXLINE( 605)				newHeight = ::Math_obj::max(this->_currentBackgroundSkin->get_height(),( (Float)(newHeight) ));
            			}
            		}
HXLINE( 609)		 ::Dynamic newMinWidth = this->get_explicitMinWidth();
HXLINE( 610)		if (needsMinWidth) {
HXLINE( 611)			if (::hx::IsNotNull( measureSkin )) {
HXLINE( 612)				newMinWidth = ::feathers::core::IMeasureObject_obj::get_minWidth(measureSkin);
            			}
            			else {
HXLINE( 613)				if (::hx::IsNotNull( this->_backgroundSkinMeasurements )) {
HXLINE( 614)					newMinWidth = this->_backgroundSkinMeasurements->minWidth;
            				}
            				else {
HXLINE( 616)					newMinWidth = ((Float)0.0);
            				}
            			}
            		}
HXLINE( 620)		 ::Dynamic newMinHeight = this->get_explicitMinHeight();
HXLINE( 621)		if (needsMinHeight) {
HXLINE( 622)			newMinHeight = ((this->_textMeasuredHeight + this->paddingTop) + this->paddingBottom);
HXLINE( 623)			if (::hx::IsNotNull( measureSkin )) {
HXLINE( 624)				newMinHeight = ::Math_obj::max(::feathers::core::IMeasureObject_obj::get_minHeight(measureSkin),( (Float)(newMinHeight) ));
            			}
            			else {
HXLINE( 625)				if (::hx::IsNotNull( this->_backgroundSkinMeasurements )) {
HXLINE( 626)					newMinHeight = ::Math_obj::max(( (Float)(this->_backgroundSkinMeasurements->minHeight) ),( (Float)(newMinHeight) ));
            				}
            			}
            		}
HXLINE( 629)		 ::Dynamic newMaxWidth = this->get_explicitMaxWidth();
HXLINE( 630)		if (needsMaxWidth) {
HXLINE( 631)			if (::hx::IsNotNull( measureSkin )) {
HXLINE( 632)				newMaxWidth = ::feathers::core::IMeasureObject_obj::get_maxWidth(measureSkin);
            			}
            			else {
HXLINE( 633)				if (::hx::IsNotNull( this->_backgroundSkinMeasurements )) {
HXLINE( 634)					newMaxWidth = this->_backgroundSkinMeasurements->maxWidth;
            				}
            				else {
HXLINE( 636)					newMaxWidth = ::Math_obj::POSITIVE_INFINITY;
            				}
            			}
            		}
HXLINE( 640)		 ::Dynamic newMaxHeight = this->get_explicitMaxHeight();
HXLINE( 641)		if (needsMaxHeight) {
HXLINE( 642)			if (::hx::IsNotNull( measureSkin )) {
HXLINE( 643)				newMaxHeight = ::feathers::core::IMeasureObject_obj::get_maxHeight(measureSkin);
            			}
            			else {
HXLINE( 644)				if (::hx::IsNotNull( this->_backgroundSkinMeasurements )) {
HXLINE( 645)					newMaxHeight = this->_backgroundSkinMeasurements->maxHeight;
            				}
            				else {
HXLINE( 647)					newMaxHeight = ::Math_obj::POSITIVE_INFINITY;
            				}
            			}
            		}
HXLINE( 651)		return this->saveMeasurements(( (Float)(newWidth) ),( (Float)(newHeight) ),newMinWidth,newMinHeight,newMaxWidth,newMaxHeight);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,measure,return )

void TextInput_obj::refreshTextStyles(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_654_refreshTextStyles)
HXLINE( 655)		bool _hx_tmp;
HXDLIN( 655)		if (this->get_enabled()) {
HXLINE( 655)			_hx_tmp = ::hx::IsNotEq( this->textField->get_type(),1 );
            		}
            		else {
HXLINE( 655)			_hx_tmp = false;
            		}
HXDLIN( 655)		if (_hx_tmp) {
HXLINE( 656)			this->textField->set_type(1);
            		}
            		else {
HXLINE( 657)			bool _hx_tmp;
HXDLIN( 657)			if (!(this->get_enabled())) {
HXLINE( 657)				_hx_tmp = ::hx::IsEq( this->textField->get_type(),1 );
            			}
            			else {
HXLINE( 657)				_hx_tmp = false;
            			}
HXDLIN( 657)			if (_hx_tmp) {
HXLINE( 658)				this->textField->set_type(0);
            			}
            		}
HXLINE( 660)		bool _hx_tmp1 = this->textField->get_embedFonts();
HXDLIN( 660)		if ((_hx_tmp1 != this->embedFonts)) {
HXLINE( 661)			this->textField->set_embedFonts(this->embedFonts);
HXLINE( 662)			this->_updatedTextStyles = true;
            		}
HXLINE( 664)		bool _hx_tmp2 = this->textField->get_displayAsPassword();
HXDLIN( 664)		if ((_hx_tmp2 != this->displayAsPassword)) {
HXLINE( 665)			this->textField->set_displayAsPassword(this->displayAsPassword);
HXLINE( 666)			this->_updatedTextStyles = true;
            		}
HXLINE( 668)		 ::openfl::text::TextFormat textFormat = this->getCurrentTextFormat();
HXLINE( 669)		if (::hx::IsEq( textFormat,this->_previousTextFormat )) {
HXLINE( 671)			return;
            		}
HXLINE( 673)		if (::hx::IsNotNull( textFormat )) {
HXLINE( 674)			this->textField->set_defaultTextFormat(textFormat);
HXLINE( 675)			this->_updatedTextStyles = true;
HXLINE( 676)			this->_previousTextFormat = textFormat;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,refreshTextStyles,(void))

void TextInput_obj::refreshText(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_680_refreshText)
HXLINE( 681)		this->textField->set_restrict(this->restrict);
HXLINE( 682)		bool _hx_tmp;
HXDLIN( 682)		::String _hx_tmp1 = this->get_text();
HXDLIN( 682)		if ((_hx_tmp1 == this->_previousText)) {
HXLINE( 682)			_hx_tmp = !(this->_updatedTextStyles);
            		}
            		else {
HXLINE( 682)			_hx_tmp = false;
            		}
HXDLIN( 682)		if (_hx_tmp) {
HXLINE( 684)			return;
            		}
HXLINE( 686)		bool hasText;
HXDLIN( 686)		if (::hx::IsNotNull( this->get_text() )) {
HXLINE( 686)			hasText = (this->get_text().length > 0);
            		}
            		else {
HXLINE( 686)			hasText = false;
            		}
HXLINE( 687)		if (hasText) {
HXLINE( 688)			 ::openfl::text::TextField _hx_tmp = this->textField;
HXDLIN( 688)			_hx_tmp->set_text(this->get_text());
            		}
            		else {
HXLINE( 690)			this->textField->set_text(HX_W(u"\u8203",81e3,00b0));
            		}
HXLINE( 692)		this->textField->set_autoSize(1);
HXLINE( 693)		this->_textMeasuredWidth = this->textField->get_width();
HXLINE( 694)		this->_textMeasuredHeight = this->textField->get_height();
HXLINE( 695)		this->textField->set_autoSize(2);
HXLINE( 696)		if (!(hasText)) {
HXLINE( 697)			this->textField->set_text(HX_("",00,00,00,00));
            		}
HXLINE( 699)		this->_previousText = this->get_text();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,refreshText,(void))

void TextInput_obj::refreshScrollPosition(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_703_refreshScrollPosition)
HXDLIN( 703)		this->textField->set_scrollH(::Math_obj::round(this->scrollX));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,refreshScrollPosition,(void))

 ::openfl::text::TextFormat TextInput_obj::getCurrentTextFormat(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_706_getCurrentTextFormat)
HXLINE( 707)		::Dynamic this1 = this->_stateToTextFormat;
HXDLIN( 707)		 ::openfl::text::TextFormat result = ( ( ::haxe::ds::EnumValueMap)(this1) )->get(this->get_currentState()).StaticCast<  ::openfl::text::TextFormat >();
HXLINE( 708)		if (::hx::IsNotNull( result )) {
HXLINE( 709)			return result;
            		}
HXLINE( 711)		return this->textFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,getCurrentTextFormat,return )

void TextInput_obj::layoutContent(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_714_layoutContent)
HXLINE( 715)		this->layoutBackgroundSkin();
HXLINE( 717)		this->textField->set_x(this->paddingLeft);
HXLINE( 718)		this->textField->set_width(((this->actualWidth - this->paddingLeft) - this->paddingRight));
HXLINE( 720)		Float maxHeight = ((this->actualHeight - this->paddingTop) - this->paddingBottom);
HXLINE( 721)		if ((this->_textMeasuredHeight > maxHeight)) {
HXLINE( 722)			this->textField->set_height(maxHeight);
            		}
            		else {
HXLINE( 724)			this->textField->set_height(this->_textMeasuredHeight);
            		}
HXLINE( 726)		switch((int)(this->verticalAlign->_hx_getIndex())){
            			case (int)0: {
HXLINE( 728)				this->textField->set_y(this->paddingTop);
HXLINE( 729)				 ::openfl::text::TextField _hx_tmp = this->textField;
HXDLIN( 729)				_hx_tmp->set_height(::Math_obj::min(maxHeight,this->textField->get_height()));
            			}
            			break;
            			case (int)2: {
HXLINE( 731)				 ::openfl::text::TextField _hx_tmp = this->textField;
HXDLIN( 731)				Float _hx_tmp1 = (this->actualHeight - this->paddingBottom);
HXDLIN( 731)				_hx_tmp->set_y((_hx_tmp1 - this->textField->get_height()));
HXLINE( 732)				 ::openfl::text::TextField _hx_tmp2 = this->textField;
HXDLIN( 732)				_hx_tmp2->set_height(::Math_obj::min(maxHeight,this->textField->get_height()));
            			}
            			break;
            			case (int)3: {
HXLINE( 734)				this->textField->set_y(this->paddingTop);
HXLINE( 735)				this->textField->set_height(maxHeight);
            			}
            			break;
            			default:{
HXLINE( 737)				 ::openfl::text::TextField _hx_tmp = this->textField;
HXDLIN( 737)				Float _hx_tmp1 = this->paddingTop;
HXDLIN( 737)				_hx_tmp->set_y((_hx_tmp1 + ((maxHeight - this->textField->get_height()) / ((Float)2.0))));
HXLINE( 738)				 ::openfl::text::TextField _hx_tmp2 = this->textField;
HXDLIN( 738)				_hx_tmp2->set_height(::Math_obj::min(maxHeight,this->textField->get_height()));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,layoutContent,(void))

void TextInput_obj::layoutBackgroundSkin(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_742_layoutBackgroundSkin)
HXLINE( 743)		if (::hx::IsNull( this->_currentBackgroundSkin )) {
HXLINE( 744)			return;
            		}
HXLINE( 746)		this->_currentBackgroundSkin->set_x(((Float)0.0));
HXLINE( 747)		this->_currentBackgroundSkin->set_y(((Float)0.0));
HXLINE( 752)		Float _hx_tmp = this->_currentBackgroundSkin->get_width();
HXDLIN( 752)		if ((_hx_tmp != this->actualWidth)) {
HXLINE( 753)			this->_currentBackgroundSkin->set_width(this->actualWidth);
            		}
HXLINE( 755)		Float _hx_tmp1 = this->_currentBackgroundSkin->get_height();
HXDLIN( 755)		if ((_hx_tmp1 != this->actualHeight)) {
HXLINE( 756)			this->_currentBackgroundSkin->set_height(this->actualHeight);
            		}
HXLINE( 758)		if (::Std_obj::isOfType(this->_currentBackgroundSkin,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IValidating >()) ))) {
HXLINE( 759)			::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->_currentBackgroundSkin,0x64d4b3cd));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,layoutBackgroundSkin,(void))

void TextInput_obj::changeState( ::feathers::controls::TextInputState state){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_763_changeState)
HXLINE( 764)		if (!(this->get_enabled())) {
HXLINE( 765)			state = ::feathers::controls::TextInputState_obj::DISABLED_dyn();
            		}
HXLINE( 767)		if (::hx::IsEq( this->get_currentState(),state )) {
HXLINE( 768)			return;
            		}
HXLINE( 770)		this->currentState = state;
HXLINE( 771)		this->setInvalid(HX_("state",11,76,0b,84));
HXLINE( 772)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("stateChange",61,de,fb,31),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,changeState,(void))

void TextInput_obj::textField_changeHandler( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_775_textField_changeHandler)
HXLINE( 778)		event->stopPropagation();
HXLINE( 781)		this->text = this->textField->get_text();
HXLINE( 783)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,textField_changeHandler,(void))

void TextInput_obj::textField_scrollHandler( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_786_textField_scrollHandler)
HXLINE( 788)		this->scrollX = ( (Float)(this->textField->get_scrollH()) );
HXLINE( 790)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("scroll",0d,d8,64,47),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,textField_scrollHandler,(void))

void TextInput_obj::textInput_focusInHandler( ::openfl::events::FocusEvent event){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_794_textInput_focusInHandler)
HXDLIN( 794)		if ((::Reflect_obj::compare(event->target,::hx::ObjectPtr<OBJ_>(this)) == 0)) {
HXLINE( 795)			this->stage->set_focus(this->textField);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,textInput_focusInHandler,(void))

void TextInput_obj::textField_focusInHandler( ::openfl::events::FocusEvent event){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_800_textField_focusInHandler)
HXDLIN( 800)		this->changeState(::feathers::controls::TextInputState_obj::FOCUSED_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,textField_focusInHandler,(void))

void TextInput_obj::textField_focusOutHandler( ::openfl::events::FocusEvent event){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_804_textField_focusOutHandler)
HXDLIN( 804)		this->changeState(::feathers::controls::TextInputState_obj::ENABLED_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,textField_focusOutHandler,(void))

 ::openfl::display::DisplayObject TextInput_obj::set_backgroundSkin( ::openfl::display::DisplayObject value){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_68_set_backgroundSkin)
HXLINE(  69)		if (!(this->setStyle(HX_("backgroundSkin",8b,65,6f,20),null()))) {
HXLINE(  70)			return this->backgroundSkin;
            		}
HXLINE(  72)		if (::hx::IsEq( this->backgroundSkin,value )) {
HXLINE(  73)			return this->backgroundSkin;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_backgroundSkin_dyn();
HXLINE(  79)		this->backgroundSkin = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->backgroundSkin;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,set_backgroundSkin,return )

 ::openfl::display::DisplayObject TextInput_obj::clearStyle_backgroundSkin(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_94_clearStyle_backgroundSkin)
HXLINE(  95)		this->set_backgroundSkin(null());
HXLINE(  96)		return this->backgroundSkin;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,clearStyle_backgroundSkin,return )

 ::openfl::text::TextFormat TextInput_obj::set_textFormat( ::openfl::text::TextFormat value){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_68_set_textFormat)
HXLINE(  69)		if (!(this->setStyle(HX_("textFormat",c4,0f,7f,34),null()))) {
HXLINE(  70)			return this->textFormat;
            		}
HXLINE(  72)		if (::hx::IsEq( this->textFormat,value )) {
HXLINE(  73)			return this->textFormat;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_textFormat_dyn();
HXLINE(  79)		this->textFormat = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->textFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,set_textFormat,return )

 ::openfl::text::TextFormat TextInput_obj::clearStyle_textFormat(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_94_clearStyle_textFormat)
HXLINE(  95)		this->set_textFormat(null());
HXLINE(  96)		return this->textFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,clearStyle_textFormat,return )

bool TextInput_obj::set_embedFonts(bool value){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_68_set_embedFonts)
HXLINE(  69)		if (!(this->setStyle(HX_("embedFonts",2b,c7,e1,8e),null()))) {
HXLINE(  70)			return this->embedFonts;
            		}
HXLINE(  72)		if ((this->embedFonts == value)) {
HXLINE(  73)			return this->embedFonts;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_embedFonts_dyn();
HXLINE(  79)		this->embedFonts = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->embedFonts;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,set_embedFonts,return )

bool TextInput_obj::clearStyle_embedFonts(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_94_clearStyle_embedFonts)
HXLINE(  95)		this->set_embedFonts(false);
HXLINE(  96)		return this->embedFonts;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,clearStyle_embedFonts,return )

Float TextInput_obj::set_paddingTop(Float value){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_68_set_paddingTop)
HXLINE(  69)		if (!(this->setStyle(HX_("paddingTop",44,fd,05,3a),null()))) {
HXLINE(  70)			return this->paddingTop;
            		}
HXLINE(  72)		if ((this->paddingTop == value)) {
HXLINE(  73)			return this->paddingTop;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_paddingTop_dyn();
HXLINE(  79)		this->paddingTop = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->paddingTop;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,set_paddingTop,return )

Float TextInput_obj::clearStyle_paddingTop(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_94_clearStyle_paddingTop)
HXLINE(  95)		this->set_paddingTop(((Float)0.0));
HXLINE(  96)		return this->paddingTop;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,clearStyle_paddingTop,return )

Float TextInput_obj::set_paddingRight(Float value){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_68_set_paddingRight)
HXLINE(  69)		if (!(this->setStyle(HX_("paddingRight",4b,ec,a7,1a),null()))) {
HXLINE(  70)			return this->paddingRight;
            		}
HXLINE(  72)		if ((this->paddingRight == value)) {
HXLINE(  73)			return this->paddingRight;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_paddingRight_dyn();
HXLINE(  79)		this->paddingRight = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->paddingRight;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,set_paddingRight,return )

Float TextInput_obj::clearStyle_paddingRight(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_94_clearStyle_paddingRight)
HXLINE(  95)		this->set_paddingRight(((Float)0.0));
HXLINE(  96)		return this->paddingRight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,clearStyle_paddingRight,return )

Float TextInput_obj::set_paddingBottom(Float value){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_68_set_paddingBottom)
HXLINE(  69)		if (!(this->setStyle(HX_("paddingBottom",9c,67,99,4f),null()))) {
HXLINE(  70)			return this->paddingBottom;
            		}
HXLINE(  72)		if ((this->paddingBottom == value)) {
HXLINE(  73)			return this->paddingBottom;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_paddingBottom_dyn();
HXLINE(  79)		this->paddingBottom = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->paddingBottom;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,set_paddingBottom,return )

Float TextInput_obj::clearStyle_paddingBottom(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_94_clearStyle_paddingBottom)
HXLINE(  95)		this->set_paddingBottom(((Float)0.0));
HXLINE(  96)		return this->paddingBottom;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,clearStyle_paddingBottom,return )

Float TextInput_obj::set_paddingLeft(Float value){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_68_set_paddingLeft)
HXLINE(  69)		if (!(this->setStyle(HX_("paddingLeft",78,4a,e6,85),null()))) {
HXLINE(  70)			return this->paddingLeft;
            		}
HXLINE(  72)		if ((this->paddingLeft == value)) {
HXLINE(  73)			return this->paddingLeft;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_paddingLeft_dyn();
HXLINE(  79)		this->paddingLeft = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->paddingLeft;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,set_paddingLeft,return )

Float TextInput_obj::clearStyle_paddingLeft(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_94_clearStyle_paddingLeft)
HXLINE(  95)		this->set_paddingLeft(((Float)0.0));
HXLINE(  96)		return this->paddingLeft;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,clearStyle_paddingLeft,return )

 ::feathers::layout::VerticalAlign TextInput_obj::set_verticalAlign( ::feathers::layout::VerticalAlign value){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_68_set_verticalAlign)
HXLINE(  69)		if (!(this->setStyle(HX_("verticalAlign",6f,1e,7c,e4),null()))) {
HXLINE(  70)			return this->verticalAlign;
            		}
HXLINE(  72)		if (::hx::IsEq( this->verticalAlign,value )) {
HXLINE(  73)			return this->verticalAlign;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_verticalAlign_dyn();
HXLINE(  79)		this->verticalAlign = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->verticalAlign;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,set_verticalAlign,return )

 ::feathers::layout::VerticalAlign TextInput_obj::clearStyle_verticalAlign(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_94_clearStyle_verticalAlign)
HXLINE(  95)		this->set_verticalAlign(::feathers::layout::VerticalAlign_obj::MIDDLE_dyn());
HXLINE(  96)		return this->verticalAlign;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,clearStyle_verticalAlign,return )

::hx::Class TextInput_obj::get_styleContext(){
            	HX_STACKFRAME(&_hx_pos_5924568a4aeee60f_42_get_styleContext)
HXDLIN(  42)		return ::hx::ClassOf< ::feathers::controls::TextInput >();
            	}



::hx::ObjectPtr< TextInput_obj > TextInput_obj::__new() {
	::hx::ObjectPtr< TextInput_obj > __this = new TextInput_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< TextInput_obj > TextInput_obj::__alloc(::hx::Ctx *_hx_ctx) {
	TextInput_obj *__this = (TextInput_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TextInput_obj), true, "feathers.controls.TextInput"));
	*(void **)__this = TextInput_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TextInput_obj::TextInput_obj()
{
}

void TextInput_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextInput);
	HX_MARK_MEMBER_NAME(currentState,"currentState");
	HX_MARK_MEMBER_NAME(_backgroundSkinMeasurements,"_backgroundSkinMeasurements");
	HX_MARK_MEMBER_NAME(_currentBackgroundSkin,"_currentBackgroundSkin");
	HX_MARK_MEMBER_NAME(backgroundSkin,"backgroundSkin");
	HX_MARK_MEMBER_NAME(_stateToSkin,"_stateToSkin");
	HX_MARK_MEMBER_NAME(textField,"textField");
	HX_MARK_MEMBER_NAME(_previousText,"_previousText");
	HX_MARK_MEMBER_NAME(_previousTextFormat,"_previousTextFormat");
	HX_MARK_MEMBER_NAME(_updatedTextStyles,"_updatedTextStyles");
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(restrict,"restrict");
	HX_MARK_MEMBER_NAME(displayAsPassword,"displayAsPassword");
	HX_MARK_MEMBER_NAME(textFormat,"textFormat");
	HX_MARK_MEMBER_NAME(embedFonts,"embedFonts");
	HX_MARK_MEMBER_NAME(_stateToTextFormat,"_stateToTextFormat");
	HX_MARK_MEMBER_NAME(paddingTop,"paddingTop");
	HX_MARK_MEMBER_NAME(paddingRight,"paddingRight");
	HX_MARK_MEMBER_NAME(paddingBottom,"paddingBottom");
	HX_MARK_MEMBER_NAME(paddingLeft,"paddingLeft");
	HX_MARK_MEMBER_NAME(verticalAlign,"verticalAlign");
	HX_MARK_MEMBER_NAME(scrollX,"scrollX");
	HX_MARK_MEMBER_NAME(_textMeasuredWidth,"_textMeasuredWidth");
	HX_MARK_MEMBER_NAME(_textMeasuredHeight,"_textMeasuredHeight");
	 ::feathers::core::FeathersControl_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TextInput_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(currentState,"currentState");
	HX_VISIT_MEMBER_NAME(_backgroundSkinMeasurements,"_backgroundSkinMeasurements");
	HX_VISIT_MEMBER_NAME(_currentBackgroundSkin,"_currentBackgroundSkin");
	HX_VISIT_MEMBER_NAME(backgroundSkin,"backgroundSkin");
	HX_VISIT_MEMBER_NAME(_stateToSkin,"_stateToSkin");
	HX_VISIT_MEMBER_NAME(textField,"textField");
	HX_VISIT_MEMBER_NAME(_previousText,"_previousText");
	HX_VISIT_MEMBER_NAME(_previousTextFormat,"_previousTextFormat");
	HX_VISIT_MEMBER_NAME(_updatedTextStyles,"_updatedTextStyles");
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(restrict,"restrict");
	HX_VISIT_MEMBER_NAME(displayAsPassword,"displayAsPassword");
	HX_VISIT_MEMBER_NAME(textFormat,"textFormat");
	HX_VISIT_MEMBER_NAME(embedFonts,"embedFonts");
	HX_VISIT_MEMBER_NAME(_stateToTextFormat,"_stateToTextFormat");
	HX_VISIT_MEMBER_NAME(paddingTop,"paddingTop");
	HX_VISIT_MEMBER_NAME(paddingRight,"paddingRight");
	HX_VISIT_MEMBER_NAME(paddingBottom,"paddingBottom");
	HX_VISIT_MEMBER_NAME(paddingLeft,"paddingLeft");
	HX_VISIT_MEMBER_NAME(verticalAlign,"verticalAlign");
	HX_VISIT_MEMBER_NAME(scrollX,"scrollX");
	HX_VISIT_MEMBER_NAME(_textMeasuredWidth,"_textMeasuredWidth");
	HX_VISIT_MEMBER_NAME(_textMeasuredHeight,"_textMeasuredHeight");
	 ::feathers::core::FeathersControl_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val TextInput_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_text() : text ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollX") ) { return ::hx::Val( scrollX ); }
		if (HX_FIELD_EQ(inName,"measure") ) { return ::hx::Val( measure_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_text") ) { return ::hx::Val( get_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return ::hx::Val( set_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"restrict") ) { return ::hx::Val( restrict ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"textField") ) { return ::hx::Val( textField ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"textFormat") ) { return ::hx::Val( textFormat ); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { return ::hx::Val( embedFonts ); }
		if (HX_FIELD_EQ(inName,"paddingTop") ) { return ::hx::Val( paddingTop ); }
		if (HX_FIELD_EQ(inName,"initialize") ) { return ::hx::Val( initialize_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"set_enabled") ) { return ::hx::Val( set_enabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"paddingLeft") ) { return ::hx::Val( paddingLeft ); }
		if (HX_FIELD_EQ(inName,"set_scrollX") ) { return ::hx::Val( set_scrollX_dyn() ); }
		if (HX_FIELD_EQ(inName,"refreshText") ) { return ::hx::Val( refreshText_dyn() ); }
		if (HX_FIELD_EQ(inName,"changeState") ) { return ::hx::Val( changeState_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"currentState") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_currentState() : currentState ); }
		if (HX_FIELD_EQ(inName,"_stateToSkin") ) { return ::hx::Val( _stateToSkin ); }
		if (HX_FIELD_EQ(inName,"set_restrict") ) { return ::hx::Val( set_restrict_dyn() ); }
		if (HX_FIELD_EQ(inName,"paddingRight") ) { return ::hx::Val( paddingRight ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_previousText") ) { return ::hx::Val( _previousText ); }
		if (HX_FIELD_EQ(inName,"paddingBottom") ) { return ::hx::Val( paddingBottom ); }
		if (HX_FIELD_EQ(inName,"verticalAlign") ) { return ::hx::Val( verticalAlign ); }
		if (HX_FIELD_EQ(inName,"layoutContent") ) { return ::hx::Val( layoutContent_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"backgroundSkin") ) { return ::hx::Val( backgroundSkin ); }
		if (HX_FIELD_EQ(inName,"set_textFormat") ) { return ::hx::Val( set_textFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_embedFonts") ) { return ::hx::Val( set_embedFonts_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingTop") ) { return ::hx::Val( set_paddingTop_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getSkinForState") ) { return ::hx::Val( getSkinForState_dyn() ); }
		if (HX_FIELD_EQ(inName,"setSkinForState") ) { return ::hx::Val( setSkinForState_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingLeft") ) { return ::hx::Val( set_paddingLeft_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_currentState") ) { return ::hx::Val( get_currentState_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingRight") ) { return ::hx::Val( set_paddingRight_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_styleContext") ) { return ::hx::Val( get_styleContext_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"displayAsPassword") ) { return ::hx::Val( displayAsPassword ); }
		if (HX_FIELD_EQ(inName,"refreshTextStyles") ) { return ::hx::Val( refreshTextStyles_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingBottom") ) { return ::hx::Val( set_paddingBottom_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_verticalAlign") ) { return ::hx::Val( set_verticalAlign_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_updatedTextStyles") ) { return ::hx::Val( _updatedTextStyles ); }
		if (HX_FIELD_EQ(inName,"_stateToTextFormat") ) { return ::hx::Val( _stateToTextFormat ); }
		if (HX_FIELD_EQ(inName,"_textMeasuredWidth") ) { return ::hx::Val( _textMeasuredWidth ); }
		if (HX_FIELD_EQ(inName,"set_backgroundSkin") ) { return ::hx::Val( set_backgroundSkin_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_previousTextFormat") ) { return ::hx::Val( _previousTextFormat ); }
		if (HX_FIELD_EQ(inName,"_textMeasuredHeight") ) { return ::hx::Val( _textMeasuredHeight ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getCurrentTextFormat") ) { return ::hx::Val( getCurrentTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"layoutBackgroundSkin") ) { return ::hx::Val( layoutBackgroundSkin_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"set_displayAsPassword") ) { return ::hx::Val( set_displayAsPassword_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTextFormatForState") ) { return ::hx::Val( getTextFormatForState_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTextFormatForState") ) { return ::hx::Val( setTextFormatForState_dyn() ); }
		if (HX_FIELD_EQ(inName,"refreshBackgroundSkin") ) { return ::hx::Val( refreshBackgroundSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"refreshScrollPosition") ) { return ::hx::Val( refreshScrollPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_textFormat") ) { return ::hx::Val( clearStyle_textFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_embedFonts") ) { return ::hx::Val( clearStyle_embedFonts_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_paddingTop") ) { return ::hx::Val( clearStyle_paddingTop_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_currentBackgroundSkin") ) { return ::hx::Val( _currentBackgroundSkin ); }
		if (HX_FIELD_EQ(inName,"clearStyle_paddingLeft") ) { return ::hx::Val( clearStyle_paddingLeft_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"textField_changeHandler") ) { return ::hx::Val( textField_changeHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"textField_scrollHandler") ) { return ::hx::Val( textField_scrollHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_paddingRight") ) { return ::hx::Val( clearStyle_paddingRight_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"initializeTextInputTheme") ) { return ::hx::Val( initializeTextInputTheme_dyn() ); }
		if (HX_FIELD_EQ(inName,"getCurrentBackgroundSkin") ) { return ::hx::Val( getCurrentBackgroundSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"textInput_focusInHandler") ) { return ::hx::Val( textInput_focusInHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"textField_focusInHandler") ) { return ::hx::Val( textField_focusInHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_paddingBottom") ) { return ::hx::Val( clearStyle_paddingBottom_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_verticalAlign") ) { return ::hx::Val( clearStyle_verticalAlign_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"textField_focusOutHandler") ) { return ::hx::Val( textField_focusOutHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_backgroundSkin") ) { return ::hx::Val( clearStyle_backgroundSkin_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"_backgroundSkinMeasurements") ) { return ::hx::Val( _backgroundSkinMeasurements ); }
		if (HX_FIELD_EQ(inName,"removeCurrentBackgroundSkin") ) { return ::hx::Val( removeCurrentBackgroundSkin_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TextInput_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_text(inValue.Cast< ::String >()) );text=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollX") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scrollX(inValue.Cast< Float >()) );scrollX=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_restrict(inValue.Cast< ::String >()) );restrict=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"textField") ) { textField=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"textFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_textFormat(inValue.Cast<  ::openfl::text::TextFormat >()) );textFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_embedFonts(inValue.Cast< bool >()) );embedFonts=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paddingTop") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingTop(inValue.Cast< Float >()) );paddingTop=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"paddingLeft") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingLeft(inValue.Cast< Float >()) );paddingLeft=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"currentState") ) { currentState=inValue.Cast<  ::feathers::controls::TextInputState >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_stateToSkin") ) { _stateToSkin=inValue.Cast<  ::haxe::ds::EnumValueMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paddingRight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingRight(inValue.Cast< Float >()) );paddingRight=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_previousText") ) { _previousText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paddingBottom") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingBottom(inValue.Cast< Float >()) );paddingBottom=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"verticalAlign") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_verticalAlign(inValue.Cast<  ::feathers::layout::VerticalAlign >()) );verticalAlign=inValue.Cast<  ::feathers::layout::VerticalAlign >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"backgroundSkin") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_backgroundSkin(inValue.Cast<  ::openfl::display::DisplayObject >()) );backgroundSkin=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"displayAsPassword") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_displayAsPassword(inValue.Cast< bool >()) );displayAsPassword=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_updatedTextStyles") ) { _updatedTextStyles=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_stateToTextFormat") ) { _stateToTextFormat=inValue.Cast<  ::haxe::ds::EnumValueMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_textMeasuredWidth") ) { _textMeasuredWidth=inValue.Cast< Float >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_previousTextFormat") ) { _previousTextFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_textMeasuredHeight") ) { _textMeasuredHeight=inValue.Cast< Float >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_currentBackgroundSkin") ) { _currentBackgroundSkin=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"_backgroundSkinMeasurements") ) { _backgroundSkinMeasurements=inValue.Cast<  ::feathers::layout::Measurements >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TextInput_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("currentState",18,5b,17,cb));
	outFields->push(HX_("_backgroundSkinMeasurements",41,46,9b,f8));
	outFields->push(HX_("_currentBackgroundSkin",e5,c0,55,58));
	outFields->push(HX_("backgroundSkin",8b,65,6f,20));
	outFields->push(HX_("_stateToSkin",8a,7c,a1,62));
	outFields->push(HX_("textField",cd,24,81,99));
	outFields->push(HX_("_previousText",63,2f,0a,d6));
	outFields->push(HX_("_previousTextFormat",fa,5e,47,b1));
	outFields->push(HX_("_updatedTextStyles",8b,09,a3,ed));
	outFields->push(HX_("text",ad,cc,f9,4c));
	outFields->push(HX_("restrict",3c,cb,9e,f1));
	outFields->push(HX_("displayAsPassword",0f,cb,96,ea));
	outFields->push(HX_("textFormat",c4,0f,7f,34));
	outFields->push(HX_("embedFonts",2b,c7,e1,8e));
	outFields->push(HX_("_stateToTextFormat",91,fd,b2,b5));
	outFields->push(HX_("paddingTop",44,fd,05,3a));
	outFields->push(HX_("paddingRight",4b,ec,a7,1a));
	outFields->push(HX_("paddingBottom",9c,67,99,4f));
	outFields->push(HX_("paddingLeft",78,4a,e6,85));
	outFields->push(HX_("verticalAlign",6f,1e,7c,e4));
	outFields->push(HX_("scrollX",ab,33,d8,30));
	outFields->push(HX_("_textMeasuredWidth",b4,10,38,8f));
	outFields->push(HX_("_textMeasuredHeight",79,05,26,78));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TextInput_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::feathers::controls::TextInputState */ ,(int)offsetof(TextInput_obj,currentState),HX_("currentState",18,5b,17,cb)},
	{::hx::fsObject /*  ::feathers::layout::Measurements */ ,(int)offsetof(TextInput_obj,_backgroundSkinMeasurements),HX_("_backgroundSkinMeasurements",41,46,9b,f8)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(TextInput_obj,_currentBackgroundSkin),HX_("_currentBackgroundSkin",e5,c0,55,58)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(TextInput_obj,backgroundSkin),HX_("backgroundSkin",8b,65,6f,20)},
	{::hx::fsObject /*  ::haxe::ds::EnumValueMap */ ,(int)offsetof(TextInput_obj,_stateToSkin),HX_("_stateToSkin",8a,7c,a1,62)},
	{::hx::fsObject /*  ::openfl::text::TextField */ ,(int)offsetof(TextInput_obj,textField),HX_("textField",cd,24,81,99)},
	{::hx::fsString,(int)offsetof(TextInput_obj,_previousText),HX_("_previousText",63,2f,0a,d6)},
	{::hx::fsObject /*  ::openfl::text::TextFormat */ ,(int)offsetof(TextInput_obj,_previousTextFormat),HX_("_previousTextFormat",fa,5e,47,b1)},
	{::hx::fsBool,(int)offsetof(TextInput_obj,_updatedTextStyles),HX_("_updatedTextStyles",8b,09,a3,ed)},
	{::hx::fsString,(int)offsetof(TextInput_obj,text),HX_("text",ad,cc,f9,4c)},
	{::hx::fsString,(int)offsetof(TextInput_obj,restrict),HX_("restrict",3c,cb,9e,f1)},
	{::hx::fsBool,(int)offsetof(TextInput_obj,displayAsPassword),HX_("displayAsPassword",0f,cb,96,ea)},
	{::hx::fsObject /*  ::openfl::text::TextFormat */ ,(int)offsetof(TextInput_obj,textFormat),HX_("textFormat",c4,0f,7f,34)},
	{::hx::fsBool,(int)offsetof(TextInput_obj,embedFonts),HX_("embedFonts",2b,c7,e1,8e)},
	{::hx::fsObject /*  ::haxe::ds::EnumValueMap */ ,(int)offsetof(TextInput_obj,_stateToTextFormat),HX_("_stateToTextFormat",91,fd,b2,b5)},
	{::hx::fsFloat,(int)offsetof(TextInput_obj,paddingTop),HX_("paddingTop",44,fd,05,3a)},
	{::hx::fsFloat,(int)offsetof(TextInput_obj,paddingRight),HX_("paddingRight",4b,ec,a7,1a)},
	{::hx::fsFloat,(int)offsetof(TextInput_obj,paddingBottom),HX_("paddingBottom",9c,67,99,4f)},
	{::hx::fsFloat,(int)offsetof(TextInput_obj,paddingLeft),HX_("paddingLeft",78,4a,e6,85)},
	{::hx::fsObject /*  ::feathers::layout::VerticalAlign */ ,(int)offsetof(TextInput_obj,verticalAlign),HX_("verticalAlign",6f,1e,7c,e4)},
	{::hx::fsFloat,(int)offsetof(TextInput_obj,scrollX),HX_("scrollX",ab,33,d8,30)},
	{::hx::fsFloat,(int)offsetof(TextInput_obj,_textMeasuredWidth),HX_("_textMeasuredWidth",b4,10,38,8f)},
	{::hx::fsFloat,(int)offsetof(TextInput_obj,_textMeasuredHeight),HX_("_textMeasuredHeight",79,05,26,78)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TextInput_obj_sStaticStorageInfo = 0;
#endif

static ::String TextInput_obj_sMemberFields[] = {
	HX_("currentState",18,5b,17,cb),
	HX_("get_currentState",a1,47,b6,cf),
	HX_("set_enabled",a4,6b,98,0e),
	HX_("_backgroundSkinMeasurements",41,46,9b,f8),
	HX_("_currentBackgroundSkin",e5,c0,55,58),
	HX_("backgroundSkin",8b,65,6f,20),
	HX_("_stateToSkin",8a,7c,a1,62),
	HX_("textField",cd,24,81,99),
	HX_("_previousText",63,2f,0a,d6),
	HX_("_previousTextFormat",fa,5e,47,b1),
	HX_("_updatedTextStyles",8b,09,a3,ed),
	HX_("text",ad,cc,f9,4c),
	HX_("get_text",36,88,b4,cc),
	HX_("set_text",aa,e1,11,7b),
	HX_("restrict",3c,cb,9e,f1),
	HX_("set_restrict",b9,a2,b1,bb),
	HX_("displayAsPassword",0f,cb,96,ea),
	HX_("set_displayAsPassword",f2,9b,4d,bd),
	HX_("textFormat",c4,0f,7f,34),
	HX_("embedFonts",2b,c7,e1,8e),
	HX_("_stateToTextFormat",91,fd,b2,b5),
	HX_("paddingTop",44,fd,05,3a),
	HX_("paddingRight",4b,ec,a7,1a),
	HX_("paddingBottom",9c,67,99,4f),
	HX_("paddingLeft",78,4a,e6,85),
	HX_("verticalAlign",6f,1e,7c,e4),
	HX_("scrollX",ab,33,d8,30),
	HX_("set_scrollX",ce,9a,3f,c1),
	HX_("_textMeasuredWidth",b4,10,38,8f),
	HX_("_textMeasuredHeight",79,05,26,78),
	HX_("getSkinForState",9b,6b,a7,62),
	HX_("setSkinForState",a7,e8,72,5e),
	HX_("getTextFormatForState",62,b0,16,a8),
	HX_("setTextFormatForState",6e,7e,1f,fc),
	HX_("initializeTextInputTheme",1c,02,f8,76),
	HX_("initialize",50,31,bb,ec),
	HX_("update",09,86,05,87),
	HX_("refreshBackgroundSkin",c6,3c,91,2d),
	HX_("getCurrentBackgroundSkin",2e,6b,dc,9d),
	HX_("removeCurrentBackgroundSkin",c0,fc,70,a2),
	HX_("measure",5e,fb,e9,3c),
	HX_("refreshTextStyles",6a,44,c4,9f),
	HX_("refreshText",28,5c,95,41),
	HX_("refreshScrollPosition",11,61,0d,64),
	HX_("getCurrentTextFormat",e7,c7,29,33),
	HX_("layoutContent",af,8f,21,da),
	HX_("layoutBackgroundSkin",d5,3d,2a,eb),
	HX_("changeState",81,1e,d1,a9),
	HX_("textField_changeHandler",08,56,33,6e),
	HX_("textField_scrollHandler",0b,cd,a5,7f),
	HX_("textInput_focusInHandler",8f,d4,fa,45),
	HX_("textField_focusInHandler",df,49,ab,21),
	HX_("textField_focusOutHandler",22,b8,ba,e9),
	HX_("set_backgroundSkin",c8,78,b8,98),
	HX_("clearStyle_backgroundSkin",46,5a,f8,27),
	HX_("set_textFormat",81,80,94,ca),
	HX_("clearStyle_textFormat",ff,4a,aa,2d),
	HX_("set_embedFonts",e8,37,f7,24),
	HX_("clearStyle_embedFonts",66,02,0d,88),
	HX_("set_paddingTop",01,6e,1b,d0),
	HX_("clearStyle_paddingTop",7f,38,31,33),
	HX_("set_paddingRight",48,c6,88,75),
	HX_("clearStyle_paddingRight",46,ac,84,21),
	HX_("set_paddingBottom",ff,4a,77,79),
	HX_("clearStyle_paddingBottom",41,a3,e4,49),
	HX_("set_paddingLeft",1b,7f,93,42),
	HX_("clearStyle_paddingLeft",dd,e2,8e,92),
	HX_("set_verticalAlign",d2,01,5a,0e),
	HX_("clearStyle_verticalAlign",14,5a,c7,de),
	HX_("get_styleContext",47,7d,20,4b),
	::String(null()) };

::hx::Class TextInput_obj::__mClass;

void TextInput_obj::__register()
{
	TextInput_obj _hx_dummy;
	TextInput_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("feathers.controls.TextInput",c3,d8,97,9d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TextInput_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TextInput_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextInput_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextInput_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextInput_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_53_boot)
HXDLIN(  53)		__mClass->__meta__ =  ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("fields",79,8e,8e,80), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("setTextFormatForState",6e,7e,1f,fc), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("style",31,a5,1d,84),null())))
            				->setFixed(1,HX_("setSkinForState",a7,e8,72,5e), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("style",31,a5,1d,84),null()))))));
            	}
}

} // end namespace feathers
} // end namespace controls
