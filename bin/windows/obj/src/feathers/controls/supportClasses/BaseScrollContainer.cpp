// Generated by Haxe 4.1.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_feathers_controls_HScrollBar
#include <feathers/controls/HScrollBar.h>
#endif
#ifndef INCLUDED_feathers_controls_IRange
#include <feathers/controls/IRange.h>
#endif
#ifndef INCLUDED_feathers_controls_IScrollBar
#include <feathers/controls/IScrollBar.h>
#endif
#ifndef INCLUDED_feathers_controls_ScrollPolicy
#include <feathers/controls/ScrollPolicy.h>
#endif
#ifndef INCLUDED_feathers_controls_VScrollBar
#include <feathers/controls/VScrollBar.h>
#endif
#ifndef INCLUDED_feathers_controls_supportClasses_BaseScrollBar
#include <feathers/controls/supportClasses/BaseScrollBar.h>
#endif
#ifndef INCLUDED_feathers_controls_supportClasses_BaseScrollContainer
#include <feathers/controls/supportClasses/BaseScrollContainer.h>
#endif
#ifndef INCLUDED_feathers_controls_supportClasses_IViewPort
#include <feathers/controls/supportClasses/IViewPort.h>
#endif
#ifndef INCLUDED_feathers_core_FeathersControl
#include <feathers/core/FeathersControl.h>
#endif
#ifndef INCLUDED_feathers_core_IDisplayObject
#include <feathers/core/IDisplayObject.h>
#endif
#ifndef INCLUDED_feathers_core_IFocusObject
#include <feathers/core/IFocusObject.h>
#endif
#ifndef INCLUDED_feathers_core_IMeasureObject
#include <feathers/core/IMeasureObject.h>
#endif
#ifndef INCLUDED_feathers_core_IStateContext
#include <feathers/core/IStateContext.h>
#endif
#ifndef INCLUDED_feathers_core_IStateObserver
#include <feathers/core/IStateObserver.h>
#endif
#ifndef INCLUDED_feathers_core_IUIControl
#include <feathers/core/IUIControl.h>
#endif
#ifndef INCLUDED_feathers_core_IValidating
#include <feathers/core/IValidating.h>
#endif
#ifndef INCLUDED_feathers_core_MeasureSprite
#include <feathers/core/MeasureSprite.h>
#endif
#ifndef INCLUDED_feathers_core_ValidatingSprite
#include <feathers/core/ValidatingSprite.h>
#endif
#ifndef INCLUDED_feathers_events_ScrollEvent
#include <feathers/events/ScrollEvent.h>
#endif
#ifndef INCLUDED_feathers_layout_Direction
#include <feathers/layout/Direction.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayoutObject
#include <feathers/layout/ILayoutObject.h>
#endif
#ifndef INCLUDED_feathers_layout_Measurements
#include <feathers/layout/Measurements.h>
#endif
#ifndef INCLUDED_feathers_layout_RelativePosition
#include <feathers/layout/RelativePosition.h>
#endif
#ifndef INCLUDED_feathers_style_IStyleObject
#include <feathers/style/IStyleObject.h>
#endif
#ifndef INCLUDED_feathers_style_IVariantStyleObject
#include <feathers/style/IVariantStyleObject.h>
#endif
#ifndef INCLUDED_feathers_utils_MeasurementsUtil
#include <feathers/utils/MeasurementsUtil.h>
#endif
#ifndef INCLUDED_feathers_utils_Scroller
#include <feathers/utils/Scroller.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_motion_Actuate
#include <motion/Actuate.h>
#endif
#ifndef INCLUDED_motion_actuators_GenericActuator
#include <motion/actuators/GenericActuator.h>
#endif
#ifndef INCLUDED_motion_actuators_IGenericActuator
#include <motion/actuators/IGenericActuator.h>
#endif
#ifndef INCLUDED_motion_actuators_SimpleActuator
#include <motion/actuators/SimpleActuator.h>
#endif
#ifndef INCLUDED_motion_easing_IEasing
#include <motion/easing/IEasing.h>
#endif
#ifndef INCLUDED_motion_easing_Quart
#include <motion/easing/Quart.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IllegalOperationError
#include <openfl/errors/IllegalOperationError.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4200ed2106c74172_42_new,"feathers.controls.supportClasses.BaseScrollContainer","new",0xb89dbd18,"feathers.controls.supportClasses.BaseScrollContainer.new","feathers/controls/supportClasses/BaseScrollContainer.hx",42,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_66_set_viewPort,"feathers.controls.supportClasses.BaseScrollContainer","set_viewPort",0xa4300c4b,"feathers.controls.supportClasses.BaseScrollContainer.set_viewPort","feathers/controls/supportClasses/BaseScrollContainer.hx",66,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_268_set_scrollBarXFactory,"feathers.controls.supportClasses.BaseScrollContainer","set_scrollBarXFactory",0xeb3558b3,"feathers.controls.supportClasses.BaseScrollContainer.set_scrollBarXFactory","feathers/controls/supportClasses/BaseScrollContainer.hx",268,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_298_set_scrollBarYFactory,"feathers.controls.supportClasses.BaseScrollContainer","set_scrollBarYFactory",0x2467cad2,"feathers.controls.supportClasses.BaseScrollContainer.set_scrollBarYFactory","feathers/controls/supportClasses/BaseScrollContainer.hx",298,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_330_get_scrollX,"feathers.controls.supportClasses.BaseScrollContainer","get_scrollX",0x8a6bf87a,"feathers.controls.supportClasses.BaseScrollContainer.get_scrollX","feathers/controls/supportClasses/BaseScrollContainer.hx",330,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_337_set_scrollX,"feathers.controls.supportClasses.BaseScrollContainer","set_scrollX",0x94d8ff86,"feathers.controls.supportClasses.BaseScrollContainer.set_scrollX","feathers/controls/supportClasses/BaseScrollContainer.hx",337,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_365_get_scrollY,"feathers.controls.supportClasses.BaseScrollContainer","get_scrollY",0x8a6bf87b,"feathers.controls.supportClasses.BaseScrollContainer.get_scrollY","feathers/controls/supportClasses/BaseScrollContainer.hx",365,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_372_set_scrollY,"feathers.controls.supportClasses.BaseScrollContainer","set_scrollY",0x94d8ff87,"feathers.controls.supportClasses.BaseScrollContainer.set_scrollY","feathers/controls/supportClasses/BaseScrollContainer.hx",372,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_394_get_minScrollX,"feathers.controls.supportClasses.BaseScrollContainer","get_minScrollX",0xb18166ca,"feathers.controls.supportClasses.BaseScrollContainer.get_minScrollX","feathers/controls/supportClasses/BaseScrollContainer.hx",394,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_418_get_minScrollY,"feathers.controls.supportClasses.BaseScrollContainer","get_minScrollY",0xb18166cb,"feathers.controls.supportClasses.BaseScrollContainer.get_minScrollY","feathers/controls/supportClasses/BaseScrollContainer.hx",418,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_442_get_maxScrollX,"feathers.controls.supportClasses.BaseScrollContainer","get_maxScrollX",0x55ee93f8,"feathers.controls.supportClasses.BaseScrollContainer.get_maxScrollX","feathers/controls/supportClasses/BaseScrollContainer.hx",442,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_466_get_maxScrollY,"feathers.controls.supportClasses.BaseScrollContainer","get_maxScrollY",0x55ee93f9,"feathers.controls.supportClasses.BaseScrollContainer.get_maxScrollY","feathers/controls/supportClasses/BaseScrollContainer.hx",466,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_489_set_scrollPolicyX,"feathers.controls.supportClasses.BaseScrollContainer","set_scrollPolicyX",0xf64955b4,"feathers.controls.supportClasses.BaseScrollContainer.set_scrollPolicyX","feathers/controls/supportClasses/BaseScrollContainer.hx",489,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_514_set_scrollPolicyY,"feathers.controls.supportClasses.BaseScrollContainer","set_scrollPolicyY",0xf64955b5,"feathers.controls.supportClasses.BaseScrollContainer.set_scrollPolicyY","feathers/controls/supportClasses/BaseScrollContainer.hx",514,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_640_get_measureViewPort,"feathers.controls.supportClasses.BaseScrollContainer","get_measureViewPort",0x5fdd69d3,"feathers.controls.supportClasses.BaseScrollContainer.get_measureViewPort","feathers/controls/supportClasses/BaseScrollContainer.hx",640,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_646_get_primaryDirection,"feathers.controls.supportClasses.BaseScrollContainer","get_primaryDirection",0xc710a36e,"feathers.controls.supportClasses.BaseScrollContainer.get_primaryDirection","feathers/controls/supportClasses/BaseScrollContainer.hx",646,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_649_initialize,"feathers.controls.supportClasses.BaseScrollContainer","initialize",0x5d08cb98,"feathers.controls.supportClasses.BaseScrollContainer.initialize","feathers/controls/supportClasses/BaseScrollContainer.hx",649,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_659_update,"feathers.controls.supportClasses.BaseScrollContainer","update",0xda565c51,"feathers.controls.supportClasses.BaseScrollContainer.update","feathers/controls/supportClasses/BaseScrollContainer.hx",659,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_689_needsMeasurement,"feathers.controls.supportClasses.BaseScrollContainer","needsMeasurement",0xfd493be7,"feathers.controls.supportClasses.BaseScrollContainer.needsMeasurement","feathers/controls/supportClasses/BaseScrollContainer.hx",689,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_698_createScrollBars,"feathers.controls.supportClasses.BaseScrollContainer","createScrollBars",0xf7847451,"feathers.controls.supportClasses.BaseScrollContainer.createScrollBars","feathers/controls/supportClasses/BaseScrollContainer.hx",698,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_748_refreshEnabled,"feathers.controls.supportClasses.BaseScrollContainer","refreshEnabled",0x3842722e,"feathers.controls.supportClasses.BaseScrollContainer.refreshEnabled","feathers/controls/supportClasses/BaseScrollContainer.hx",748,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_758_refreshViewPort,"feathers.controls.supportClasses.BaseScrollContainer","refreshViewPort",0x9cad0239,"feathers.controls.supportClasses.BaseScrollContainer.refreshViewPort","feathers/controls/supportClasses/BaseScrollContainer.hx",758,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_811_calculateViewPortOffsets,"feathers.controls.supportClasses.BaseScrollContainer","calculateViewPortOffsets",0xe84bf31c,"feathers.controls.supportClasses.BaseScrollContainer.calculateViewPortOffsets","feathers/controls/supportClasses/BaseScrollContainer.hx",811,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_836_calculateViewPortOffsetsForFixedScrollBarX,"feathers.controls.supportClasses.BaseScrollContainer","calculateViewPortOffsetsForFixedScrollBarX",0xd639ed99,"feathers.controls.supportClasses.BaseScrollContainer.calculateViewPortOffsetsForFixedScrollBarX","feathers/controls/supportClasses/BaseScrollContainer.hx",836,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_865_calculateViewPortOffsetsForFixedScrollBarY,"feathers.controls.supportClasses.BaseScrollContainer","calculateViewPortOffsetsForFixedScrollBarY",0xd639ed9a,"feathers.controls.supportClasses.BaseScrollContainer.calculateViewPortOffsetsForFixedScrollBarY","feathers/controls/supportClasses/BaseScrollContainer.hx",865,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_893_refreshViewPortBoundsForMeasurement,"feathers.controls.supportClasses.BaseScrollContainer","refreshViewPortBoundsForMeasurement",0x4c5f31a1,"feathers.controls.supportClasses.BaseScrollContainer.refreshViewPortBoundsForMeasurement","feathers/controls/supportClasses/BaseScrollContainer.hx",893,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_943_refreshViewPortBoundsForLayout,"feathers.controls.supportClasses.BaseScrollContainer","refreshViewPortBoundsForLayout",0xa0532725,"feathers.controls.supportClasses.BaseScrollContainer.refreshViewPortBoundsForLayout","feathers/controls/supportClasses/BaseScrollContainer.hx",943,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_969_refreshScrollerValues,"feathers.controls.supportClasses.BaseScrollContainer","refreshScrollerValues",0x87bddf2f,"feathers.controls.supportClasses.BaseScrollContainer.refreshScrollerValues","feathers/controls/supportClasses/BaseScrollContainer.hx",969,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_980_refreshScrollBarValues,"feathers.controls.supportClasses.BaseScrollContainer","refreshScrollBarValues",0x66274af5,"feathers.controls.supportClasses.BaseScrollContainer.refreshScrollBarValues","feathers/controls/supportClasses/BaseScrollContainer.hx",980,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_1011_measure,"feathers.controls.supportClasses.BaseScrollContainer","measure",0xd054a416,"feathers.controls.supportClasses.BaseScrollContainer.measure","feathers/controls/supportClasses/BaseScrollContainer.hx",1011,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_1137_refreshBackgroundSkin,"feathers.controls.supportClasses.BaseScrollContainer","refreshBackgroundSkin",0x5c2cb77e,"feathers.controls.supportClasses.BaseScrollContainer.refreshBackgroundSkin","feathers/controls/supportClasses/BaseScrollContainer.hx",1137,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_1162_getCurrentBackgroundSkin,"feathers.controls.supportClasses.BaseScrollContainer","getCurrentBackgroundSkin",0x5fc87376,"feathers.controls.supportClasses.BaseScrollContainer.getCurrentBackgroundSkin","feathers/controls/supportClasses/BaseScrollContainer.hx",1162,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_1169_removeCurrentBackgroundSkin,"feathers.controls.supportClasses.BaseScrollContainer","removeCurrentBackgroundSkin",0x55515178,"feathers.controls.supportClasses.BaseScrollContainer.removeCurrentBackgroundSkin","feathers/controls/supportClasses/BaseScrollContainer.hx",1169,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_1184_layoutChildren,"feathers.controls.supportClasses.BaseScrollContainer","layoutChildren",0x897e9c51,"feathers.controls.supportClasses.BaseScrollContainer.layoutChildren","feathers/controls/supportClasses/BaseScrollContainer.hx",1184,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_1189_layoutBackgroundSkin,"feathers.controls.supportClasses.BaseScrollContainer","layoutBackgroundSkin",0xa8ca821d,"feathers.controls.supportClasses.BaseScrollContainer.layoutBackgroundSkin","feathers/controls/supportClasses/BaseScrollContainer.hx",1189,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_1210_layoutScrollBars,"feathers.controls.supportClasses.BaseScrollContainer","layoutScrollBars",0xe859617f,"feathers.controls.supportClasses.BaseScrollContainer.layoutScrollBars","feathers/controls/supportClasses/BaseScrollContainer.hx",1210,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_1261_refreshScrollRect,"feathers.controls.supportClasses.BaseScrollContainer","refreshScrollRect",0xae917844,"feathers.controls.supportClasses.BaseScrollContainer.refreshScrollRect","feathers/controls/supportClasses/BaseScrollContainer.hx",1261,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_1284_revealScrollBarX,"feathers.controls.supportClasses.BaseScrollContainer","revealScrollBarX",0xbbf40b87,"feathers.controls.supportClasses.BaseScrollContainer.revealScrollBarX","feathers/controls/supportClasses/BaseScrollContainer.hx",1284,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_1294_revealScrollBarY,"feathers.controls.supportClasses.BaseScrollContainer","revealScrollBarY",0xbbf40b88,"feathers.controls.supportClasses.BaseScrollContainer.revealScrollBarY","feathers/controls/supportClasses/BaseScrollContainer.hx",1294,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_1316_hideScrollBarX,"feathers.controls.supportClasses.BaseScrollContainer","hideScrollBarX",0x7362537c,"feathers.controls.supportClasses.BaseScrollContainer.hideScrollBarX","feathers/controls/supportClasses/BaseScrollContainer.hx",1316,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_1304_hideScrollBarX,"feathers.controls.supportClasses.BaseScrollContainer","hideScrollBarX",0x7362537c,"feathers.controls.supportClasses.BaseScrollContainer.hideScrollBarX","feathers/controls/supportClasses/BaseScrollContainer.hx",1304,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_1337_hideScrollBarY,"feathers.controls.supportClasses.BaseScrollContainer","hideScrollBarY",0x7362537d,"feathers.controls.supportClasses.BaseScrollContainer.hideScrollBarY","feathers/controls/supportClasses/BaseScrollContainer.hx",1337,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_1325_hideScrollBarY,"feathers.controls.supportClasses.BaseScrollContainer","hideScrollBarY",0x7362537d,"feathers.controls.supportClasses.BaseScrollContainer.hideScrollBarY","feathers/controls/supportClasses/BaseScrollContainer.hx",1325,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_1346_checkForRevealScrollBars,"feathers.controls.supportClasses.BaseScrollContainer","checkForRevealScrollBars",0x243914e3,"feathers.controls.supportClasses.BaseScrollContainer.checkForRevealScrollBars","feathers/controls/supportClasses/BaseScrollContainer.hx",1346,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_1357_scroller_scrollStartHandler,"feathers.controls.supportClasses.BaseScrollContainer","scroller_scrollStartHandler",0xf2a49e92,"feathers.controls.supportClasses.BaseScrollContainer.scroller_scrollStartHandler","feathers/controls/supportClasses/BaseScrollContainer.hx",1357,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_1364_scroller_scrollHandler,"feathers.controls.supportClasses.BaseScrollContainer","scroller_scrollHandler",0x2ce28100,"feathers.controls.supportClasses.BaseScrollContainer.scroller_scrollHandler","feathers/controls/supportClasses/BaseScrollContainer.hx",1364,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_1378_scroller_scrollCompleteHandler,"feathers.controls.supportClasses.BaseScrollContainer","scroller_scrollCompleteHandler",0x5a854747,"feathers.controls.supportClasses.BaseScrollContainer.scroller_scrollCompleteHandler","feathers/controls/supportClasses/BaseScrollContainer.hx",1378,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_1391_scrollBarX_changeHandler,"feathers.controls.supportClasses.BaseScrollContainer","scrollBarX_changeHandler",0x28248e15,"feathers.controls.supportClasses.BaseScrollContainer.scrollBarX_changeHandler","feathers/controls/supportClasses/BaseScrollContainer.hx",1391,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_1395_scrollBarY_changeHandler,"feathers.controls.supportClasses.BaseScrollContainer","scrollBarY_changeHandler",0xbd202dd6,"feathers.controls.supportClasses.BaseScrollContainer.scrollBarY_changeHandler","feathers/controls/supportClasses/BaseScrollContainer.hx",1395,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_1398_scrollBarX_rollOverHandler,"feathers.controls.supportClasses.BaseScrollContainer","scrollBarX_rollOverHandler",0x96de92f4,"feathers.controls.supportClasses.BaseScrollContainer.scrollBarX_rollOverHandler","feathers/controls/supportClasses/BaseScrollContainer.hx",1398,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_1403_scrollBarX_rollOutHandler,"feathers.controls.supportClasses.BaseScrollContainer","scrollBarX_rollOutHandler",0x9107f87e,"feathers.controls.supportClasses.BaseScrollContainer.scrollBarX_rollOutHandler","feathers/controls/supportClasses/BaseScrollContainer.hx",1403,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_1413_scrollBarY_rollOverHandler,"feathers.controls.supportClasses.BaseScrollContainer","scrollBarY_rollOverHandler",0x19d264f5,"feathers.controls.supportClasses.BaseScrollContainer.scrollBarY_rollOverHandler","feathers/controls/supportClasses/BaseScrollContainer.hx",1413,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_1418_scrollBarY_rollOutHandler,"feathers.controls.supportClasses.BaseScrollContainer","scrollBarY_rollOutHandler",0x5838219d,"feathers.controls.supportClasses.BaseScrollContainer.scrollBarY_rollOutHandler","feathers/controls/supportClasses/BaseScrollContainer.hx",1418,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_1428_scrollBarX_scrollStartHandler,"feathers.controls.supportClasses.BaseScrollContainer","scrollBarX_scrollStartHandler",0x0da2437a,"feathers.controls.supportClasses.BaseScrollContainer.scrollBarX_scrollStartHandler","feathers/controls/supportClasses/BaseScrollContainer.hx",1428,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_1434_scrollBarX_scrollCompleteHandler,"feathers.controls.supportClasses.BaseScrollContainer","scrollBarX_scrollCompleteHandler",0x7bffa35f,"feathers.controls.supportClasses.BaseScrollContainer.scrollBarX_scrollCompleteHandler","feathers/controls/supportClasses/BaseScrollContainer.hx",1434,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_1442_scrollBarY_scrollStartHandler,"feathers.controls.supportClasses.BaseScrollContainer","scrollBarY_scrollStartHandler",0x7406e819,"feathers.controls.supportClasses.BaseScrollContainer.scrollBarY_scrollStartHandler","feathers/controls/supportClasses/BaseScrollContainer.hx",1442,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_1448_scrollBarY_scrollCompleteHandler,"feathers.controls.supportClasses.BaseScrollContainer","scrollBarY_scrollCompleteHandler",0xfc326c20,"feathers.controls.supportClasses.BaseScrollContainer.scrollBarY_scrollCompleteHandler","feathers/controls/supportClasses/BaseScrollContainer.hx",1448,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_1457_hideScrollBarX_onComplete,"feathers.controls.supportClasses.BaseScrollContainer","hideScrollBarX_onComplete",0x7d2a481b,"feathers.controls.supportClasses.BaseScrollContainer.hideScrollBarX_onComplete","feathers/controls/supportClasses/BaseScrollContainer.hx",1457,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_1461_hideScrollBarY_onComplete,"feathers.controls.supportClasses.BaseScrollContainer","hideScrollBarY_onComplete",0xbee9b5ba,"feathers.controls.supportClasses.BaseScrollContainer.hideScrollBarY_onComplete","feathers/controls/supportClasses/BaseScrollContainer.hx",1461,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_1464_viewPort_resizeHandler,"feathers.controls.supportClasses.BaseScrollContainer","viewPort_resizeHandler",0x1c2551c5,"feathers.controls.supportClasses.BaseScrollContainer.viewPort_resizeHandler","feathers/controls/supportClasses/BaseScrollContainer.hx",1464,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_c57e7e519d634598_68_set_paddingTop,"feathers.controls.supportClasses.BaseScrollContainer","set_paddingTop",0x1517cc49,"feathers.controls.supportClasses.BaseScrollContainer.set_paddingTop","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_c57e7e519d634598_94_clearStyle_paddingTop,"feathers.controls.supportClasses.BaseScrollContainer","clearStyle_paddingTop",0x61ccb337,"feathers.controls.supportClasses.BaseScrollContainer.clearStyle_paddingTop","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_c57e7e519d634598_68_set_paddingRight,"feathers.controls.supportClasses.BaseScrollContainer","set_paddingRight",0x390f4690,"feathers.controls.supportClasses.BaseScrollContainer.set_paddingRight","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_c57e7e519d634598_94_clearStyle_paddingRight,"feathers.controls.supportClasses.BaseScrollContainer","clearStyle_paddingRight",0xc9fe44fe,"feathers.controls.supportClasses.BaseScrollContainer.clearStyle_paddingRight","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_c57e7e519d634598_68_set_paddingBottom,"feathers.controls.supportClasses.BaseScrollContainer","set_paddingBottom",0xcba109b7,"feathers.controls.supportClasses.BaseScrollContainer.set_paddingBottom","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_c57e7e519d634598_94_clearStyle_paddingBottom,"feathers.controls.supportClasses.BaseScrollContainer","clearStyle_paddingBottom",0x0bd0ab89,"feathers.controls.supportClasses.BaseScrollContainer.clearStyle_paddingBottom","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_c57e7e519d634598_68_set_paddingLeft,"feathers.controls.supportClasses.BaseScrollContainer","set_paddingLeft",0x5a699fd3,"feathers.controls.supportClasses.BaseScrollContainer.set_paddingLeft","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_c57e7e519d634598_94_clearStyle_paddingLeft,"feathers.controls.supportClasses.BaseScrollContainer","clearStyle_paddingLeft",0x2bfec925,"feathers.controls.supportClasses.BaseScrollContainer.clearStyle_paddingLeft","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_c57e7e519d634598_68_set_backgroundSkin,"feathers.controls.supportClasses.BaseScrollContainer","set_backgroundSkin",0x2b159b10,"feathers.controls.supportClasses.BaseScrollContainer.set_backgroundSkin","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_c57e7e519d634598_94_clearStyle_backgroundSkin,"feathers.controls.supportClasses.BaseScrollContainer","clearStyle_backgroundSkin",0x149390fe,"feathers.controls.supportClasses.BaseScrollContainer.clearStyle_backgroundSkin","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_c57e7e519d634598_68_set_disabledBackgroundSkin,"feathers.controls.supportClasses.BaseScrollContainer","set_disabledBackgroundSkin",0x86091eac,"feathers.controls.supportClasses.BaseScrollContainer.set_disabledBackgroundSkin","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_c57e7e519d634598_94_clearStyle_disabledBackgroundSkin,"feathers.controls.supportClasses.BaseScrollContainer","clearStyle_disabledBackgroundSkin",0xda73b29a,"feathers.controls.supportClasses.BaseScrollContainer.clearStyle_disabledBackgroundSkin","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_c57e7e519d634598_68_set_fixedScrollBars,"feathers.controls.supportClasses.BaseScrollContainer","set_fixedScrollBars",0x6b45eb5c,"feathers.controls.supportClasses.BaseScrollContainer.set_fixedScrollBars","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_c57e7e519d634598_94_clearStyle_fixedScrollBars,"feathers.controls.supportClasses.BaseScrollContainer","clearStyle_fixedScrollBars",0xcfff25ae,"feathers.controls.supportClasses.BaseScrollContainer.clearStyle_fixedScrollBars","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_c57e7e519d634598_68_set_autoHideScrollBars,"feathers.controls.supportClasses.BaseScrollContainer","set_autoHideScrollBars",0xaba4c923,"feathers.controls.supportClasses.BaseScrollContainer.set_autoHideScrollBars","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_c57e7e519d634598_94_clearStyle_autoHideScrollBars,"feathers.controls.supportClasses.BaseScrollContainer","clearStyle_autoHideScrollBars",0xcd1f4e11,"feathers.controls.supportClasses.BaseScrollContainer.clearStyle_autoHideScrollBars","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_c57e7e519d634598_68_set_simulateTouch,"feathers.controls.supportClasses.BaseScrollContainer","set_simulateTouch",0x14dbbf96,"feathers.controls.supportClasses.BaseScrollContainer.set_simulateTouch","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_c57e7e519d634598_94_clearStyle_simulateTouch,"feathers.controls.supportClasses.BaseScrollContainer","clearStyle_simulateTouch",0x550b6168,"feathers.controls.supportClasses.BaseScrollContainer.clearStyle_simulateTouch","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_c57e7e519d634598_68_set_elasticEdges,"feathers.controls.supportClasses.BaseScrollContainer","set_elasticEdges",0x96f871c6,"feathers.controls.supportClasses.BaseScrollContainer.set_elasticEdges","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_c57e7e519d634598_94_clearStyle_elasticEdges,"feathers.controls.supportClasses.BaseScrollContainer","clearStyle_elasticEdges",0x27e77034,"feathers.controls.supportClasses.BaseScrollContainer.clearStyle_elasticEdges","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_c57e7e519d634598_68_set_scrollBarXPosition,"feathers.controls.supportClasses.BaseScrollContainer","set_scrollBarXPosition",0x7931d0a0,"feathers.controls.supportClasses.BaseScrollContainer.set_scrollBarXPosition","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_c57e7e519d634598_94_clearStyle_scrollBarXPosition,"feathers.controls.supportClasses.BaseScrollContainer","clearStyle_scrollBarXPosition",0x9aac558e,"feathers.controls.supportClasses.BaseScrollContainer.clearStyle_scrollBarXPosition","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_c57e7e519d634598_68_set_scrollBarYPosition,"feathers.controls.supportClasses.BaseScrollContainer","set_scrollBarYPosition",0x4c2339a1,"feathers.controls.supportClasses.BaseScrollContainer.set_scrollBarYPosition","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_c57e7e519d634598_94_clearStyle_scrollBarYPosition,"feathers.controls.supportClasses.BaseScrollContainer","clearStyle_scrollBarYPosition",0x6d9dbe8f,"feathers.controls.supportClasses.BaseScrollContainer.clearStyle_scrollBarYPosition","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_c57e7e519d634598_68_set_hideScrollBarDuration,"feathers.controls.supportClasses.BaseScrollContainer","set_hideScrollBarDuration",0x218a1f33,"feathers.controls.supportClasses.BaseScrollContainer.set_hideScrollBarDuration","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_c57e7e519d634598_94_clearStyle_hideScrollBarDuration,"feathers.controls.supportClasses.BaseScrollContainer","clearStyle_hideScrollBarDuration",0x85cae305,"feathers.controls.supportClasses.BaseScrollContainer.clearStyle_hideScrollBarDuration","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_c57e7e519d634598_68_set_hideScrollBarEase,"feathers.controls.supportClasses.BaseScrollContainer","set_hideScrollBarEase",0x276d804d,"feathers.controls.supportClasses.BaseScrollContainer.set_hideScrollBarEase","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_c57e7e519d634598_94_clearStyle_hideScrollBarEase,"feathers.controls.supportClasses.BaseScrollContainer","clearStyle_hideScrollBarEase",0x18a7731f,"feathers.controls.supportClasses.BaseScrollContainer.clearStyle_hideScrollBarEase","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_46_defaultScrollBarXFactory,"feathers.controls.supportClasses.BaseScrollContainer","defaultScrollBarXFactory",0x7515135f,"feathers.controls.supportClasses.BaseScrollContainer.defaultScrollBarXFactory","feathers/controls/supportClasses/BaseScrollContainer.hx",46,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_50_defaultScrollBarYFactory,"feathers.controls.supportClasses.BaseScrollContainer","defaultScrollBarYFactory",0xae47857e,"feathers.controls.supportClasses.BaseScrollContainer.defaultScrollBarYFactory","feathers/controls/supportClasses/BaseScrollContainer.hx",50,0xfb74b239)
HX_LOCAL_STACK_FRAME(_hx_pos_4200ed2106c74172_43_boot,"feathers.controls.supportClasses.BaseScrollContainer","boot",0xc980b87a,"feathers.controls.supportClasses.BaseScrollContainer.boot","feathers/controls/supportClasses/BaseScrollContainer.hx",43,0xfb74b239)
namespace feathers{
namespace controls{
namespace supportClasses{

void BaseScrollContainer_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_4200ed2106c74172_42_new)
HXLINE( 635)		this->_previousViewPortHeight = ((Float)0.0);
HXLINE( 634)		this->_previousViewPortWidth = ((Float)0.0);
HXLINE( 633)		this->_ignoreViewPortResizing = false;
HXLINE( 632)		this->_viewPortBoundsChanged = false;
HXLINE( 631)		this->_ignoreScrollerChanges = false;
HXLINE( 629)		this->_scrollRect2 =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 628)		this->_scrollRect1 =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 625)		this->hideScrollBarEase = ::motion::easing::Quart_obj::easeOut;
HXLINE( 610)		this->hideScrollBarDuration = ((Float)0.2);
HXLINE( 594)		this->_hideScrollBarY = null();
HXLINE( 593)		this->_hideScrollBarX = null();
HXLINE( 591)		this->scrollBarYPosition = ::feathers::layout::RelativePosition_obj::RIGHT_dyn();
HXLINE( 572)		this->scrollBarXPosition = ::feathers::layout::RelativePosition_obj::BOTTOM_dyn();
HXLINE( 553)		this->elasticEdges = true;
HXLINE( 538)		this->simulateTouch = false;
HXLINE( 512)		this->scrollPolicyY = ::feathers::controls::ScrollPolicy_obj::AUTO_dyn();
HXLINE( 487)		this->scrollPolicyX = ::feathers::controls::ScrollPolicy_obj::AUTO_dyn();
HXLINE( 296)		this->scrollBarYFactory = ::feathers::controls::supportClasses::BaseScrollContainer_obj::defaultScrollBarYFactory_dyn();
HXLINE( 266)		this->scrollBarXFactory = ::feathers::controls::supportClasses::BaseScrollContainer_obj::defaultScrollBarXFactory_dyn();
HXLINE( 245)		this->showScrollBarY = false;
HXLINE( 244)		this->showScrollBarX = false;
HXLINE( 242)		this->autoHideScrollBars = true;
HXLINE( 223)		this->fixedScrollBars = false;
HXLINE( 204)		this->disabledBackgroundSkin = null();
HXLINE( 185)		this->backgroundSkin = null();
HXLINE( 166)		this->paddingLeft = ((Float)0.0);
HXLINE( 150)		this->paddingBottom = ((Float)0.0);
HXLINE( 134)		this->paddingRight = ((Float)0.0);
HXLINE( 118)		this->paddingTop = ((Float)0.0);
HXLINE( 102)		this->chromeMeasuredMaxHeight = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 101)		this->chromeMeasuredMinHeight = ((Float)0.0);
HXLINE( 100)		this->chromeMeasuredHeight = ((Float)0.0);
HXLINE(  99)		this->chromeMeasuredMaxWidth = ::Math_obj::POSITIVE_INFINITY;
HXLINE(  98)		this->chromeMeasuredMinWidth = ((Float)0.0);
HXLINE(  97)		this->chromeMeasuredWidth = ((Float)0.0);
HXLINE(  96)		this->leftViewPortOffset = ((Float)0.0);
HXLINE(  95)		this->bottomViewPortOffset = ((Float)0.0);
HXLINE(  94)		this->rightViewPortOffset = ((Float)0.0);
HXLINE(  93)		this->topViewPortOffset = ((Float)0.0);
HXLINE(  91)		this->_backgroundSkinMeasurements = null();
HXLINE(  90)		this->_currentBackgroundSkin = null();
HXLINE(  88)		this->_scrollBarYHover = false;
HXLINE(  87)		this->_scrollBarXHover = false;
HXLINE(  86)		this->_scrollerDraggingY = false;
HXLINE(  85)		this->_scrollerDraggingX = false;
HXLINE(  54)		super::__construct();
            	}

Dynamic BaseScrollContainer_obj::__CreateEmpty() { return new BaseScrollContainer_obj; }

void *BaseScrollContainer_obj::_hx_vtable = 0;

Dynamic BaseScrollContainer_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BaseScrollContainer_obj > _hx_result = new BaseScrollContainer_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BaseScrollContainer_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x093ab78b) {
			if (inClassId<=(int)0x0498edf2) {
				if (inClassId<=(int)0x0330636f) {
					return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
				} else {
					return inClassId==(int)0x0498edf2;
				}
			} else {
				return inClassId==(int)0x093ab78b;
			}
		} else {
			return inClassId==(int)0x0c89e854 || inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x58123034) {
			if (inClassId<=(int)0x4af7dd8e) {
				return inClassId==(int)0x4033f4be || inClassId==(int)0x4af7dd8e;
			} else {
				return inClassId==(int)0x58123034;
			}
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

static ::openfl::events::IEventDispatcher_obj _hx_feathers_controls_supportClasses_BaseScrollContainer__hx_openfl_events_IEventDispatcher= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::supportClasses::BaseScrollContainer_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::supportClasses::BaseScrollContainer_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::BaseScrollContainer_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::supportClasses::BaseScrollContainer_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::BaseScrollContainer_obj::willTrigger,
};

static ::feathers::core::IFocusObject_obj _hx_feathers_controls_supportClasses_BaseScrollContainer__hx_feathers_core_IFocusObject= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::supportClasses::BaseScrollContainer_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::supportClasses::BaseScrollContainer_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::BaseScrollContainer_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::supportClasses::BaseScrollContainer_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::BaseScrollContainer_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::BaseScrollContainer_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::BaseScrollContainer_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::BaseScrollContainer_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::BaseScrollContainer_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::BaseScrollContainer_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::BaseScrollContainer_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::BaseScrollContainer_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::BaseScrollContainer_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::BaseScrollContainer_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::BaseScrollContainer_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::BaseScrollContainer_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::BaseScrollContainer_obj::set_scaleY,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::BaseScrollContainer_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::BaseScrollContainer_obj::set_alpha,
	( bool (::hx::Object::*)())&::feathers::controls::supportClasses::BaseScrollContainer_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::supportClasses::BaseScrollContainer_obj::set_visible,
	( ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::BaseScrollContainer_obj::get_focusManager,
	( ::Dynamic (::hx::Object::*)(::Dynamic))&::feathers::controls::supportClasses::BaseScrollContainer_obj::set_focusManager,
	( bool (::hx::Object::*)())&::feathers::controls::supportClasses::BaseScrollContainer_obj::get_focusEnabled,
	( bool (::hx::Object::*)(bool))&::feathers::controls::supportClasses::BaseScrollContainer_obj::set_focusEnabled,
	( void (::hx::Object::*)(bool))&::feathers::controls::supportClasses::BaseScrollContainer_obj::showFocus,
};

static ::feathers::core::IDisplayObject_obj _hx_feathers_controls_supportClasses_BaseScrollContainer__hx_feathers_core_IDisplayObject= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::supportClasses::BaseScrollContainer_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::supportClasses::BaseScrollContainer_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::BaseScrollContainer_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::supportClasses::BaseScrollContainer_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::BaseScrollContainer_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::BaseScrollContainer_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::BaseScrollContainer_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::BaseScrollContainer_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::BaseScrollContainer_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::BaseScrollContainer_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::BaseScrollContainer_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::BaseScrollContainer_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::BaseScrollContainer_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::BaseScrollContainer_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::BaseScrollContainer_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::BaseScrollContainer_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::BaseScrollContainer_obj::set_scaleY,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::BaseScrollContainer_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::BaseScrollContainer_obj::set_alpha,
	( bool (::hx::Object::*)())&::feathers::controls::supportClasses::BaseScrollContainer_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::supportClasses::BaseScrollContainer_obj::set_visible,
};

void *BaseScrollContainer_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x87530281: return &_hx_feathers_controls_supportClasses_BaseScrollContainer__hx_openfl_events_IEventDispatcher;
		case (int)0x701686fd: return &_hx_feathers_controls_supportClasses_BaseScrollContainer__hx_feathers_core_IFocusObject;
		case (int)0x3a979a67: return &_hx_feathers_controls_supportClasses_BaseScrollContainer__hx_feathers_core_IDisplayObject;
	}
	return super::_hx_getInterface(inHash);
}

::Dynamic BaseScrollContainer_obj::set_viewPort(::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_66_set_viewPort)
HXLINE(  67)		if (::hx::IsEq( this->viewPort,value )) {
HXLINE(  68)			return this->viewPort;
            		}
HXLINE(  70)		if (::hx::IsNotNull( this->viewPort )) {
HXLINE(  71)			::openfl::events::IEventDispatcher_obj::removeEventListener(this->viewPort,HX_("resize",f4,59,7b,08),this->viewPort_resizeHandler_dyn(),null());
            		}
HXLINE(  73)		this->viewPort = value;
HXLINE(  74)		if (::hx::IsNotNull( this->scroller )) {
HXLINE(  75)			this->scroller->set_target(::hx::TCast<  ::openfl::display::InteractiveObject >::cast(this->viewPort));
            		}
HXLINE(  77)		if (::hx::IsNotNull( this->viewPort )) {
HXLINE(  78)			::openfl::events::IEventDispatcher_obj::addEventListener(this->viewPort,HX_("resize",f4,59,7b,08),this->viewPort_resizeHandler_dyn(),null(),null(),null());
            		}
HXLINE(  80)		return this->viewPort;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseScrollContainer_obj,set_viewPort,return )

 ::Dynamic BaseScrollContainer_obj::set_scrollBarXFactory( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_268_set_scrollBarXFactory)
HXLINE( 269)		if (::hx::IsEq( this->scrollBarXFactory,value )) {
HXLINE( 270)			return this->scrollBarXFactory;
            		}
HXLINE( 272)		this->scrollBarXFactory = value;
HXLINE( 273)		this->setInvalid(::feathers::controls::supportClasses::BaseScrollContainer_obj::INVALIDATION_FLAG_SCROLL_BAR_FACTORY);
HXLINE( 274)		return this->scrollBarXFactory;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseScrollContainer_obj,set_scrollBarXFactory,return )

 ::Dynamic BaseScrollContainer_obj::set_scrollBarYFactory( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_298_set_scrollBarYFactory)
HXLINE( 299)		if (::hx::IsEq( this->scrollBarYFactory,value )) {
HXLINE( 300)			return this->scrollBarYFactory;
            		}
HXLINE( 302)		this->scrollBarYFactory = value;
HXLINE( 303)		this->setInvalid(::feathers::controls::supportClasses::BaseScrollContainer_obj::INVALIDATION_FLAG_SCROLL_BAR_FACTORY);
HXLINE( 304)		return this->scrollBarYFactory;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseScrollContainer_obj,set_scrollBarYFactory,return )

Float BaseScrollContainer_obj::get_scrollX(){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_330_get_scrollX)
HXLINE( 331)		if (::hx::IsNull( this->scroller )) {
HXLINE( 332)			return ((Float)0.0);
            		}
HXLINE( 334)		return this->scroller->scrollX;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,get_scrollX,return )

Float BaseScrollContainer_obj::set_scrollX(Float value){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_337_set_scrollX)
HXLINE( 338)		this->scroller->set_scrollX(value);
HXLINE( 339)		return this->scroller->scrollX;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseScrollContainer_obj,set_scrollX,return )

Float BaseScrollContainer_obj::get_scrollY(){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_365_get_scrollY)
HXLINE( 366)		if (::hx::IsNull( this->scroller )) {
HXLINE( 367)			return ((Float)0.0);
            		}
HXLINE( 369)		return this->scroller->scrollY;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,get_scrollY,return )

Float BaseScrollContainer_obj::set_scrollY(Float value){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_372_set_scrollY)
HXLINE( 373)		this->scroller->set_scrollY(value);
HXLINE( 374)		return this->scroller->scrollY;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseScrollContainer_obj,set_scrollY,return )

Float BaseScrollContainer_obj::get_minScrollX(){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_394_get_minScrollX)
HXLINE( 395)		if (::hx::IsNull( this->scroller )) {
HXLINE( 396)			return ((Float)0.0);
            		}
HXLINE( 398)		return this->scroller->minScrollX;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,get_minScrollX,return )

Float BaseScrollContainer_obj::get_minScrollY(){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_418_get_minScrollY)
HXLINE( 419)		if (::hx::IsNull( this->scroller )) {
HXLINE( 420)			return ((Float)0.0);
            		}
HXLINE( 422)		return this->scroller->minScrollY;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,get_minScrollY,return )

Float BaseScrollContainer_obj::get_maxScrollX(){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_442_get_maxScrollX)
HXLINE( 443)		if (::hx::IsNull( this->scroller )) {
HXLINE( 444)			return ((Float)0.0);
            		}
HXLINE( 446)		return this->scroller->maxScrollX;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,get_maxScrollX,return )

Float BaseScrollContainer_obj::get_maxScrollY(){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_466_get_maxScrollY)
HXLINE( 467)		if (::hx::IsNull( this->scroller )) {
HXLINE( 468)			return ((Float)0.0);
            		}
HXLINE( 470)		return this->scroller->maxScrollY;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,get_maxScrollY,return )

 ::feathers::controls::ScrollPolicy BaseScrollContainer_obj::set_scrollPolicyX( ::feathers::controls::ScrollPolicy value){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_489_set_scrollPolicyX)
HXLINE( 490)		if (::hx::IsEq( this->scrollPolicyX,value )) {
HXLINE( 491)			return this->scrollPolicyX;
            		}
HXLINE( 493)		this->scrollPolicyX = value;
HXLINE( 494)		this->setInvalid(HX_("scroll",0d,d8,64,47));
HXLINE( 495)		return this->scrollPolicyX;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseScrollContainer_obj,set_scrollPolicyX,return )

 ::feathers::controls::ScrollPolicy BaseScrollContainer_obj::set_scrollPolicyY( ::feathers::controls::ScrollPolicy value){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_514_set_scrollPolicyY)
HXLINE( 515)		if (::hx::IsEq( this->scrollPolicyY,value )) {
HXLINE( 516)			return this->scrollPolicyY;
            		}
HXLINE( 518)		this->scrollPolicyY = value;
HXLINE( 519)		this->setInvalid(HX_("scroll",0d,d8,64,47));
HXLINE( 520)		return this->scrollPolicyY;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseScrollContainer_obj,set_scrollPolicyY,return )

bool BaseScrollContainer_obj::get_measureViewPort(){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_640_get_measureViewPort)
HXDLIN( 640)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,get_measureViewPort,return )

 ::feathers::layout::Direction BaseScrollContainer_obj::get_primaryDirection(){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_646_get_primaryDirection)
HXDLIN( 646)		return ::feathers::layout::Direction_obj::NONE_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,get_primaryDirection,return )

void BaseScrollContainer_obj::initialize(){
            	HX_GC_STACKFRAME(&_hx_pos_4200ed2106c74172_649_initialize)
HXLINE( 650)		if (::hx::IsNull( this->scroller )) {
HXLINE( 651)			this->scroller =  ::feathers::utils::Scroller_obj::__alloc( HX_CTX ,null());
            		}
HXLINE( 653)		this->scroller->set_target(::hx::TCast<  ::openfl::display::InteractiveObject >::cast(this->viewPort));
HXLINE( 654)		this->scroller->addEventListener(HX_("scroll",0d,d8,64,47),this->scroller_scrollHandler_dyn(),null(),null(),null());
HXLINE( 655)		this->scroller->addEventListener(HX_("scrollStart",15,bd,e8,cd),this->scroller_scrollStartHandler_dyn(),null(),null(),null());
HXLINE( 656)		this->scroller->addEventListener(HX_("scrollComplete",e6,e9,b8,0b),this->scroller_scrollCompleteHandler_dyn(),null(),null(),null());
            	}


void BaseScrollContainer_obj::update(){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_659_update)
HXLINE( 660)		bool stylesInvalid = this->isInvalid(HX_("styles",22,e6,d2,15));
HXLINE( 661)		bool sizeInvalid = this->isInvalid(HX_("size",c1,a0,53,4c));
HXLINE( 662)		bool stateInvalid = this->isInvalid(HX_("state",11,76,0b,84));
HXLINE( 663)		bool scrollBarFactoryInvalid = this->isInvalid(::feathers::controls::supportClasses::BaseScrollContainer_obj::INVALIDATION_FLAG_SCROLL_BAR_FACTORY);
HXLINE( 665)		bool oldIgnoreScrollerChanges = this->_ignoreScrollerChanges;
HXLINE( 666)		this->_ignoreScrollerChanges = true;
HXLINE( 668)		bool _hx_tmp;
HXDLIN( 668)		if (!(stylesInvalid)) {
HXLINE( 668)			_hx_tmp = stateInvalid;
            		}
            		else {
HXLINE( 668)			_hx_tmp = true;
            		}
HXDLIN( 668)		if (_hx_tmp) {
HXLINE( 669)			this->refreshBackgroundSkin();
            		}
HXLINE( 672)		if (scrollBarFactoryInvalid) {
HXLINE( 673)			this->createScrollBars();
            		}
HXLINE( 676)		this->refreshEnabled();
HXLINE( 677)		this->refreshScrollerValues();
HXLINE( 679)		this->refreshViewPort();
HXLINE( 681)		this->refreshScrollRect();
HXLINE( 682)		this->refreshScrollBarValues();
HXLINE( 683)		this->layoutChildren();
HXLINE( 685)		this->_ignoreScrollerChanges = oldIgnoreScrollerChanges;
            	}


bool BaseScrollContainer_obj::needsMeasurement(){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_689_needsMeasurement)
HXDLIN( 689)		bool _hx_tmp;
HXDLIN( 689)		bool _hx_tmp1;
HXDLIN( 689)		bool _hx_tmp2;
HXDLIN( 689)		bool _hx_tmp3;
HXDLIN( 689)		bool _hx_tmp4;
HXDLIN( 689)		bool _hx_tmp5;
HXDLIN( 689)		if (this->isInvalid(HX_("scroll",0d,d8,64,47))) {
HXDLIN( 689)			_hx_tmp5 = ::feathers::controls::supportClasses::IViewPort_obj::get_requiresMeasurementOnScroll(this->viewPort);
            		}
            		else {
HXDLIN( 689)			_hx_tmp5 = false;
            		}
HXDLIN( 689)		if (!(_hx_tmp5)) {
HXDLIN( 689)			_hx_tmp4 = this->isInvalid(HX_("data",2a,56,63,42));
            		}
            		else {
HXDLIN( 689)			_hx_tmp4 = true;
            		}
HXDLIN( 689)		if (!(_hx_tmp4)) {
HXDLIN( 689)			_hx_tmp3 = this->isInvalid(HX_("size",c1,a0,53,4c));
            		}
            		else {
HXDLIN( 689)			_hx_tmp3 = true;
            		}
HXDLIN( 689)		if (!(_hx_tmp3)) {
HXDLIN( 689)			_hx_tmp2 = this->isInvalid(HX_("styles",22,e6,d2,15));
            		}
            		else {
HXDLIN( 689)			_hx_tmp2 = true;
            		}
HXDLIN( 689)		if (!(_hx_tmp2)) {
HXDLIN( 689)			_hx_tmp1 = this->isInvalid(::feathers::controls::supportClasses::BaseScrollContainer_obj::INVALIDATION_FLAG_SCROLL_BAR_FACTORY);
            		}
            		else {
HXDLIN( 689)			_hx_tmp1 = true;
            		}
HXDLIN( 689)		if (!(_hx_tmp1)) {
HXDLIN( 689)			_hx_tmp = this->isInvalid(HX_("state",11,76,0b,84));
            		}
            		else {
HXDLIN( 689)			_hx_tmp = true;
            		}
HXDLIN( 689)		if (!(_hx_tmp)) {
HXLINE( 695)			return this->isInvalid(HX_("layout",aa,ae,b8,58));
            		}
            		else {
HXDLIN( 689)			return true;
            		}
HXDLIN( 689)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,needsMeasurement,return )

void BaseScrollContainer_obj::createScrollBars(){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_698_createScrollBars)
HXLINE( 699)		if (::hx::IsNotNull( this->scrollBarX )) {
HXLINE( 700)			::openfl::events::IEventDispatcher_obj::removeEventListener(this->scrollBarX,HX_("change",70,91,72,b7),this->scrollBarX_changeHandler_dyn(),null());
HXLINE( 701)			::openfl::events::IEventDispatcher_obj::removeEventListener(this->scrollBarX,HX_("rollOver",71,ab,a8,12),this->scrollBarX_rollOverHandler_dyn(),null());
HXLINE( 702)			::openfl::events::IEventDispatcher_obj::removeEventListener(this->scrollBarX,HX_("rollOut",11,f9,11,5d),this->scrollBarX_rollOutHandler_dyn(),null());
HXLINE( 703)			::openfl::events::IEventDispatcher_obj::removeEventListener(this->scrollBarX,HX_("scrollStart",15,bd,e8,cd),this->scrollBarX_scrollStartHandler_dyn(),null());
HXLINE( 704)			::openfl::events::IEventDispatcher_obj::removeEventListener(this->scrollBarX,HX_("scrollComplete",e6,e9,b8,0b),this->scrollBarX_scrollCompleteHandler_dyn(),null());
HXLINE( 705)			this->removeChild(::hx::TCast<  ::openfl::display::DisplayObject >::cast(this->scrollBarX));
HXLINE( 706)			this->scrollBarX = null();
            		}
HXLINE( 708)		if (::hx::IsNotNull( this->scrollBarY )) {
HXLINE( 709)			::openfl::events::IEventDispatcher_obj::removeEventListener(this->scrollBarY,HX_("change",70,91,72,b7),this->scrollBarY_changeHandler_dyn(),null());
HXLINE( 710)			::openfl::events::IEventDispatcher_obj::removeEventListener(this->scrollBarY,HX_("rollOver",71,ab,a8,12),this->scrollBarY_rollOverHandler_dyn(),null());
HXLINE( 711)			::openfl::events::IEventDispatcher_obj::removeEventListener(this->scrollBarY,HX_("rollOut",11,f9,11,5d),this->scrollBarY_rollOutHandler_dyn(),null());
HXLINE( 712)			::openfl::events::IEventDispatcher_obj::removeEventListener(this->scrollBarY,HX_("scrollStart",15,bd,e8,cd),this->scrollBarY_scrollStartHandler_dyn(),null());
HXLINE( 713)			::openfl::events::IEventDispatcher_obj::removeEventListener(this->scrollBarY,HX_("scrollComplete",e6,e9,b8,0b),this->scrollBarY_scrollCompleteHandler_dyn(),null());
HXLINE( 714)			this->removeChild(::hx::TCast<  ::openfl::display::DisplayObject >::cast(this->scrollBarY));
HXLINE( 715)			this->scrollBarY = null();
            		}
HXLINE( 717)		 ::Dynamic scrollBarXFactory = this->scrollBarXFactory;
HXLINE( 718)		if (::hx::IsNull( scrollBarXFactory )) {
HXLINE( 719)			scrollBarXFactory = ::feathers::controls::supportClasses::BaseScrollContainer_obj::defaultScrollBarXFactory_dyn();
            		}
HXLINE( 721)		this->scrollBarX = scrollBarXFactory();
HXLINE( 722)		if (this->autoHideScrollBars) {
HXLINE( 723)			::feathers::core::IDisplayObject_obj::set_alpha(this->scrollBarX,((Float)0.0));
            		}
HXLINE( 725)		::openfl::events::IEventDispatcher_obj::addEventListener(this->scrollBarX,HX_("change",70,91,72,b7),this->scrollBarX_changeHandler_dyn(),null(),null(),null());
HXLINE( 726)		::openfl::events::IEventDispatcher_obj::addEventListener(this->scrollBarX,HX_("rollOver",71,ab,a8,12),this->scrollBarX_rollOverHandler_dyn(),null(),null(),null());
HXLINE( 727)		::openfl::events::IEventDispatcher_obj::addEventListener(this->scrollBarX,HX_("rollOut",11,f9,11,5d),this->scrollBarX_rollOutHandler_dyn(),null(),null(),null());
HXLINE( 728)		::openfl::events::IEventDispatcher_obj::addEventListener(this->scrollBarX,HX_("scrollStart",15,bd,e8,cd),this->scrollBarX_scrollStartHandler_dyn(),null(),null(),null());
HXLINE( 729)		::openfl::events::IEventDispatcher_obj::addEventListener(this->scrollBarX,HX_("scrollComplete",e6,e9,b8,0b),this->scrollBarX_scrollCompleteHandler_dyn(),null(),null(),null());
HXLINE( 730)		this->addChild(::hx::TCast<  ::openfl::display::DisplayObject >::cast(this->scrollBarX));
HXLINE( 732)		 ::Dynamic scrollBarYFactory = this->scrollBarYFactory;
HXLINE( 733)		if (::hx::IsNull( scrollBarYFactory )) {
HXLINE( 734)			scrollBarYFactory = ::feathers::controls::supportClasses::BaseScrollContainer_obj::defaultScrollBarYFactory_dyn();
            		}
HXLINE( 736)		this->scrollBarY = scrollBarYFactory();
HXLINE( 737)		if (this->autoHideScrollBars) {
HXLINE( 738)			::feathers::core::IDisplayObject_obj::set_alpha(this->scrollBarY,((Float)0.0));
            		}
HXLINE( 740)		::openfl::events::IEventDispatcher_obj::addEventListener(this->scrollBarY,HX_("change",70,91,72,b7),this->scrollBarY_changeHandler_dyn(),null(),null(),null());
HXLINE( 741)		::openfl::events::IEventDispatcher_obj::addEventListener(this->scrollBarY,HX_("rollOver",71,ab,a8,12),this->scrollBarY_rollOverHandler_dyn(),null(),null(),null());
HXLINE( 742)		::openfl::events::IEventDispatcher_obj::addEventListener(this->scrollBarY,HX_("rollOut",11,f9,11,5d),this->scrollBarY_rollOutHandler_dyn(),null(),null(),null());
HXLINE( 743)		::openfl::events::IEventDispatcher_obj::addEventListener(this->scrollBarY,HX_("scrollStart",15,bd,e8,cd),this->scrollBarY_scrollStartHandler_dyn(),null(),null(),null());
HXLINE( 744)		::openfl::events::IEventDispatcher_obj::addEventListener(this->scrollBarY,HX_("scrollComplete",e6,e9,b8,0b),this->scrollBarY_scrollCompleteHandler_dyn(),null(),null(),null());
HXLINE( 745)		this->addChild(::hx::TCast<  ::openfl::display::DisplayObject >::cast(this->scrollBarY));
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,createScrollBars,(void))

void BaseScrollContainer_obj::refreshEnabled(){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_748_refreshEnabled)
HXLINE( 749)		::Dynamic _hx_tmp = this->viewPort;
HXDLIN( 749)		::feathers::core::IUIControl_obj::set_enabled(_hx_tmp,this->get_enabled());
HXLINE( 750)		if (::hx::IsNotNull( this->scrollBarX )) {
HXLINE( 751)			::Dynamic _hx_tmp = this->scrollBarX;
HXDLIN( 751)			::feathers::core::IUIControl_obj::set_enabled(_hx_tmp,this->get_enabled());
            		}
HXLINE( 753)		if (::hx::IsNotNull( this->scrollBarY )) {
HXLINE( 754)			::Dynamic _hx_tmp = this->scrollBarY;
HXDLIN( 754)			::feathers::core::IUIControl_obj::set_enabled(_hx_tmp,this->get_enabled());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,refreshEnabled,(void))

void BaseScrollContainer_obj::refreshViewPort(){
            	HX_GC_STACKFRAME(&_hx_pos_4200ed2106c74172_758_refreshViewPort)
HXLINE( 759)		if (::Std_obj::isOfType(this->scrollBarX,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IValidating >()) ))) {
HXLINE( 760)			::feathers::core::IValidating_obj::validateNow(this->scrollBarX);
            		}
HXLINE( 762)		if (::Std_obj::isOfType(this->scrollBarY,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IValidating >()) ))) {
HXLINE( 763)			::feathers::core::IValidating_obj::validateNow(this->scrollBarY);
            		}
HXLINE( 766)		::Dynamic _hx_tmp = this->viewPort;
HXDLIN( 766)		::feathers::controls::supportClasses::IViewPort_obj::set_scrollX(_hx_tmp,this->get_scrollX());
HXLINE( 767)		::Dynamic _hx_tmp1 = this->viewPort;
HXDLIN( 767)		::feathers::controls::supportClasses::IViewPort_obj::set_scrollY(_hx_tmp1,this->get_scrollY());
HXLINE( 769)		if (!(this->needsMeasurement())) {
HXLINE( 770)			::feathers::core::IValidating_obj::validateNow(this->viewPort);
HXLINE( 771)			 ::feathers::utils::Scroller _hx_tmp = this->scroller;
HXDLIN( 771)			 ::Dynamic _hx_tmp1 = ::feathers::controls::supportClasses::IViewPort_obj::get_visibleWidth(this->viewPort);
HXDLIN( 771)			 ::Dynamic _hx_tmp2 = ::feathers::controls::supportClasses::IViewPort_obj::get_visibleHeight(this->viewPort);
HXDLIN( 771)			Float _hx_tmp3 = ::feathers::core::IDisplayObject_obj::get_width(this->viewPort);
HXDLIN( 771)			_hx_tmp->setDimensions(_hx_tmp1,_hx_tmp2,_hx_tmp3,::feathers::core::IDisplayObject_obj::get_height(this->viewPort));
HXLINE( 772)			return;
            		}
HXLINE( 774)		int loopCount = 0;
HXLINE( 775)		while(true){
HXLINE( 776)			this->_viewPortBoundsChanged = false;
HXLINE( 779)			if (this->get_measureViewPort()) {
HXLINE( 780)				this->calculateViewPortOffsets(true,false);
HXLINE( 781)				this->refreshViewPortBoundsForMeasurement();
            			}
HXLINE( 783)			this->calculateViewPortOffsets(false,false);
HXLINE( 785)			this->measure();
HXLINE( 790)			this->calculateViewPortOffsets(false,true);
HXLINE( 792)			this->refreshViewPortBoundsForLayout();
HXLINE( 793)			 ::feathers::utils::Scroller _hx_tmp = this->scroller;
HXDLIN( 793)			 ::Dynamic _hx_tmp1 = ::feathers::controls::supportClasses::IViewPort_obj::get_visibleWidth(this->viewPort);
HXDLIN( 793)			 ::Dynamic _hx_tmp2 = ::feathers::controls::supportClasses::IViewPort_obj::get_visibleHeight(this->viewPort);
HXDLIN( 793)			Float _hx_tmp3 = ::feathers::core::IDisplayObject_obj::get_width(this->viewPort);
HXDLIN( 793)			_hx_tmp->setDimensions(_hx_tmp1,_hx_tmp2,_hx_tmp3,::feathers::core::IDisplayObject_obj::get_height(this->viewPort));
HXLINE( 795)			loopCount = (loopCount + 1);
HXLINE( 796)			if ((loopCount >= 10)) {
HXLINE( 801)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,(::Type_obj::getClassName(::Type_obj::getClass(::hx::ObjectPtr<OBJ_>(this))) + HX_(" stuck in an infinite loop during measurement and validation. This may be an issue with the layout or children, such as custom item renderers.",a5,30,39,6d)))));
            			}
HXLINE( 775)			if (!(this->_viewPortBoundsChanged)) {
HXLINE( 775)				goto _hx_goto_21;
            			}
            		}
            		_hx_goto_21:;
HXLINE( 807)		this->_previousViewPortWidth = ::feathers::core::IDisplayObject_obj::get_width(this->viewPort);
HXLINE( 808)		this->_previousViewPortHeight = ::feathers::core::IDisplayObject_obj::get_height(this->viewPort);
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,refreshViewPort,(void))

void BaseScrollContainer_obj::calculateViewPortOffsets(::hx::Null< bool >  __o_forceScrollBars,::hx::Null< bool >  __o_useActualBounds){
            		bool forceScrollBars = __o_forceScrollBars.Default(false);
            		bool useActualBounds = __o_useActualBounds.Default(false);
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_811_calculateViewPortOffsets)
HXLINE( 815)		this->topViewPortOffset = ((Float)0.0);
HXLINE( 816)		this->rightViewPortOffset = ((Float)0.0);
HXLINE( 817)		this->bottomViewPortOffset = ((Float)0.0);
HXLINE( 818)		this->leftViewPortOffset = ((Float)0.0);
HXLINE( 819)		this->chromeMeasuredWidth = ((Float)0.0);
HXLINE( 820)		this->chromeMeasuredMinWidth = ((Float)0.0);
HXLINE( 821)		this->chromeMeasuredMaxWidth = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 822)		this->chromeMeasuredHeight = ((Float)0.0);
HXLINE( 823)		this->chromeMeasuredMinHeight = ((Float)0.0);
HXLINE( 824)		this->chromeMeasuredMaxHeight = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 825)		bool _hx_tmp;
HXDLIN( 825)		if (forceScrollBars) {
HXLINE( 825)			_hx_tmp = ::hx::IsNotEq( this->scrollPolicyX,::feathers::controls::ScrollPolicy_obj::OFF_dyn() );
            		}
            		else {
HXLINE( 825)			_hx_tmp = false;
            		}
HXDLIN( 825)		this->calculateViewPortOffsetsForFixedScrollBarX(_hx_tmp,useActualBounds);
HXLINE( 826)		bool _hx_tmp1;
HXDLIN( 826)		if (forceScrollBars) {
HXLINE( 826)			_hx_tmp1 = ::hx::IsNotEq( this->scrollPolicyY,::feathers::controls::ScrollPolicy_obj::OFF_dyn() );
            		}
            		else {
HXLINE( 826)			_hx_tmp1 = false;
            		}
HXDLIN( 826)		this->calculateViewPortOffsetsForFixedScrollBarY(_hx_tmp1,useActualBounds);
HXLINE( 830)		bool _hx_tmp2;
HXDLIN( 830)		bool _hx_tmp3;
HXDLIN( 830)		if (this->fixedScrollBars) {
HXLINE( 830)			_hx_tmp3 = this->showScrollBarY;
            		}
            		else {
HXLINE( 830)			_hx_tmp3 = false;
            		}
HXDLIN( 830)		if (_hx_tmp3) {
HXLINE( 830)			_hx_tmp2 = !(this->showScrollBarX);
            		}
            		else {
HXLINE( 830)			_hx_tmp2 = false;
            		}
HXDLIN( 830)		if (_hx_tmp2) {
HXLINE( 831)			bool _hx_tmp;
HXDLIN( 831)			if (forceScrollBars) {
HXLINE( 831)				_hx_tmp = ::hx::IsNotEq( this->scrollPolicyX,::feathers::controls::ScrollPolicy_obj::OFF_dyn() );
            			}
            			else {
HXLINE( 831)				_hx_tmp = false;
            			}
HXDLIN( 831)			this->calculateViewPortOffsetsForFixedScrollBarX(_hx_tmp,useActualBounds);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(BaseScrollContainer_obj,calculateViewPortOffsets,(void))

void BaseScrollContainer_obj::calculateViewPortOffsetsForFixedScrollBarX(::hx::Null< bool >  __o_forceScrollBars,::hx::Null< bool >  __o_useActualBounds){
            		bool forceScrollBars = __o_forceScrollBars.Default(false);
            		bool useActualBounds = __o_useActualBounds.Default(false);
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_836_calculateViewPortOffsetsForFixedScrollBarX)
HXDLIN( 836)		bool _hx_tmp;
HXDLIN( 836)		if (::hx::IsNotNull( this->scrollBarX )) {
HXDLIN( 836)			if (!(this->get_measureViewPort())) {
HXDLIN( 836)				_hx_tmp = useActualBounds;
            			}
            			else {
HXDLIN( 836)				_hx_tmp = true;
            			}
            		}
            		else {
HXDLIN( 836)			_hx_tmp = false;
            		}
HXDLIN( 836)		if (_hx_tmp) {
HXLINE( 837)			 ::Dynamic scrollerWidth;
HXDLIN( 837)			if (useActualBounds) {
HXLINE( 837)				scrollerWidth = this->actualWidth;
            			}
            			else {
HXLINE( 837)				scrollerWidth = this->get_explicitWidth();
            			}
HXLINE( 838)			bool _hx_tmp;
HXDLIN( 838)			bool _hx_tmp1;
HXDLIN( 838)			if (!(useActualBounds)) {
HXLINE( 838)				_hx_tmp1 = !(forceScrollBars);
            			}
            			else {
HXLINE( 838)				_hx_tmp1 = false;
            			}
HXDLIN( 838)			if (_hx_tmp1) {
HXLINE( 838)				_hx_tmp = ::hx::IsNull( scrollerWidth );
            			}
            			else {
HXLINE( 838)				_hx_tmp = false;
            			}
HXDLIN( 838)			if (_hx_tmp) {
HXLINE( 841)				 ::Dynamic scrollerWidth1 = ::feathers::controls::supportClasses::IViewPort_obj::get_visibleWidth(this->viewPort);
HXDLIN( 841)				scrollerWidth = ((scrollerWidth1 + this->leftViewPortOffset) + this->rightViewPortOffset);
            			}
HXLINE( 843)			Float totalWidth = ::feathers::core::IDisplayObject_obj::get_width(this->viewPort);
HXDLIN( 843)			Float totalWidth1 = ((totalWidth + this->leftViewPortOffset) + this->rightViewPortOffset);
HXLINE( 844)			bool _hx_tmp2;
HXDLIN( 844)			bool _hx_tmp3;
HXDLIN( 844)			if (!(forceScrollBars)) {
HXLINE( 844)				_hx_tmp3 = ::hx::IsEq( this->scrollPolicyX,::feathers::controls::ScrollPolicy_obj::ON_dyn() );
            			}
            			else {
HXLINE( 844)				_hx_tmp3 = true;
            			}
HXDLIN( 844)			if (!(_hx_tmp3)) {
HXLINE( 846)				bool _hx_tmp;
HXDLIN( 846)				if (!(::hx::IsGreater( totalWidth1,scrollerWidth ))) {
HXLINE( 846)					if (::hx::IsNotNull( this->get_explicitMaxWidth() )) {
HXLINE( 846)						_hx_tmp = ::hx::IsGreater( totalWidth1,this->get_explicitMaxWidth() );
            					}
            					else {
HXLINE( 846)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE( 846)					_hx_tmp = true;
            				}
HXDLIN( 846)				if (_hx_tmp) {
HXLINE( 844)					_hx_tmp2 = ::hx::IsNotEq( this->scrollPolicyX,::feathers::controls::ScrollPolicy_obj::OFF_dyn() );
            				}
            				else {
HXLINE( 844)					_hx_tmp2 = false;
            				}
            			}
            			else {
HXLINE( 844)				_hx_tmp2 = true;
            			}
HXDLIN( 844)			if (_hx_tmp2) {
HXLINE( 848)				this->showScrollBarX = true;
HXLINE( 849)				if (this->fixedScrollBars) {
HXLINE( 850)					if (::hx::IsEq( this->scrollBarXPosition,::feathers::layout::RelativePosition_obj::TOP_dyn() )) {
HXLINE( 851)						 ::feathers::controls::supportClasses::BaseScrollContainer _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 851)						Float _hx_tmp1 = _hx_tmp->topViewPortOffset;
HXDLIN( 851)						_hx_tmp->topViewPortOffset = (_hx_tmp1 + ::feathers::core::IDisplayObject_obj::get_height(this->scrollBarX));
            					}
            					else {
HXLINE( 853)						 ::feathers::controls::supportClasses::BaseScrollContainer _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 853)						Float _hx_tmp1 = _hx_tmp->bottomViewPortOffset;
HXDLIN( 853)						_hx_tmp->bottomViewPortOffset = (_hx_tmp1 + ::feathers::core::IDisplayObject_obj::get_height(this->scrollBarX));
            					}
            				}
            			}
            			else {
HXLINE( 857)				this->showScrollBarX = false;
            			}
            		}
            		else {
HXLINE( 860)			this->showScrollBarX = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(BaseScrollContainer_obj,calculateViewPortOffsetsForFixedScrollBarX,(void))

void BaseScrollContainer_obj::calculateViewPortOffsetsForFixedScrollBarY(::hx::Null< bool >  __o_forceScrollBars,::hx::Null< bool >  __o_useActualBounds){
            		bool forceScrollBars = __o_forceScrollBars.Default(false);
            		bool useActualBounds = __o_useActualBounds.Default(false);
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_865_calculateViewPortOffsetsForFixedScrollBarY)
HXDLIN( 865)		bool _hx_tmp;
HXDLIN( 865)		if (::hx::IsNotNull( this->scrollBarY )) {
HXDLIN( 865)			if (!(this->get_measureViewPort())) {
HXDLIN( 865)				_hx_tmp = useActualBounds;
            			}
            			else {
HXDLIN( 865)				_hx_tmp = true;
            			}
            		}
            		else {
HXDLIN( 865)			_hx_tmp = false;
            		}
HXDLIN( 865)		if (_hx_tmp) {
HXLINE( 866)			 ::Dynamic scrollerHeight;
HXDLIN( 866)			if (useActualBounds) {
HXLINE( 866)				scrollerHeight = this->actualHeight;
            			}
            			else {
HXLINE( 866)				scrollerHeight = this->get_explicitHeight();
            			}
HXLINE( 867)			bool _hx_tmp;
HXDLIN( 867)			bool _hx_tmp1;
HXDLIN( 867)			if (!(useActualBounds)) {
HXLINE( 867)				_hx_tmp1 = !(forceScrollBars);
            			}
            			else {
HXLINE( 867)				_hx_tmp1 = false;
            			}
HXDLIN( 867)			if (_hx_tmp1) {
HXLINE( 867)				_hx_tmp = ::hx::IsNull( scrollerHeight );
            			}
            			else {
HXLINE( 867)				_hx_tmp = false;
            			}
HXDLIN( 867)			if (_hx_tmp) {
HXLINE( 870)				 ::Dynamic scrollerHeight1 = ::feathers::controls::supportClasses::IViewPort_obj::get_visibleHeight(this->viewPort);
HXDLIN( 870)				scrollerHeight = ((scrollerHeight1 + this->topViewPortOffset) + this->bottomViewPortOffset);
            			}
HXLINE( 872)			Float totalHeight = ::feathers::core::IDisplayObject_obj::get_height(this->viewPort);
HXDLIN( 872)			Float totalHeight1 = ((totalHeight + this->topViewPortOffset) + this->bottomViewPortOffset);
HXLINE( 873)			bool _hx_tmp2;
HXDLIN( 873)			bool _hx_tmp3;
HXDLIN( 873)			if (!(forceScrollBars)) {
HXLINE( 873)				_hx_tmp3 = ::hx::IsEq( this->scrollPolicyY,::feathers::controls::ScrollPolicy_obj::ON_dyn() );
            			}
            			else {
HXLINE( 873)				_hx_tmp3 = true;
            			}
HXDLIN( 873)			if (!(_hx_tmp3)) {
HXLINE( 875)				bool _hx_tmp;
HXDLIN( 875)				if (!(::hx::IsGreater( totalHeight1,scrollerHeight ))) {
HXLINE( 875)					if (::hx::IsNotNull( this->get_explicitMaxHeight() )) {
HXLINE( 875)						_hx_tmp = ::hx::IsGreater( totalHeight1,this->get_explicitMaxHeight() );
            					}
            					else {
HXLINE( 875)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE( 875)					_hx_tmp = true;
            				}
HXDLIN( 875)				if (_hx_tmp) {
HXLINE( 873)					_hx_tmp2 = ::hx::IsNotEq( this->scrollPolicyY,::feathers::controls::ScrollPolicy_obj::OFF_dyn() );
            				}
            				else {
HXLINE( 873)					_hx_tmp2 = false;
            				}
            			}
            			else {
HXLINE( 873)				_hx_tmp2 = true;
            			}
HXDLIN( 873)			if (_hx_tmp2) {
HXLINE( 877)				this->showScrollBarY = true;
HXLINE( 878)				if (this->fixedScrollBars) {
HXLINE( 879)					if (::hx::IsEq( this->scrollBarYPosition,::feathers::layout::RelativePosition_obj::LEFT_dyn() )) {
HXLINE( 880)						 ::feathers::controls::supportClasses::BaseScrollContainer _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 880)						Float _hx_tmp1 = _hx_tmp->leftViewPortOffset;
HXDLIN( 880)						_hx_tmp->leftViewPortOffset = (_hx_tmp1 + ::feathers::core::IDisplayObject_obj::get_width(this->scrollBarY));
            					}
            					else {
HXLINE( 882)						 ::feathers::controls::supportClasses::BaseScrollContainer _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 882)						Float _hx_tmp1 = _hx_tmp->rightViewPortOffset;
HXDLIN( 882)						_hx_tmp->rightViewPortOffset = (_hx_tmp1 + ::feathers::core::IDisplayObject_obj::get_width(this->scrollBarY));
            					}
            				}
            			}
            			else {
HXLINE( 886)				this->showScrollBarY = false;
            			}
            		}
            		else {
HXLINE( 889)			this->showScrollBarY = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(BaseScrollContainer_obj,calculateViewPortOffsetsForFixedScrollBarY,(void))

void BaseScrollContainer_obj::refreshViewPortBoundsForMeasurement(){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_893_refreshViewPortBoundsForMeasurement)
HXLINE( 894)		bool oldIgnoreViewPortResizing = this->_ignoreViewPortResizing;
HXLINE( 899)		this->_ignoreViewPortResizing = true;
HXLINE( 901)		::feathers::core::IDisplayObject_obj::set_x(this->viewPort,(this->paddingLeft + this->leftViewPortOffset));
HXLINE( 902)		::feathers::core::IDisplayObject_obj::set_y(this->viewPort,(this->paddingTop + this->topViewPortOffset));
HXLINE( 903)		if (::hx::IsNull( this->get_explicitWidth() )) {
HXLINE( 904)			::feathers::controls::supportClasses::IViewPort_obj::set_visibleWidth(this->viewPort,null());
            		}
            		else {
HXLINE( 906)			::Dynamic _hx_tmp = this->viewPort;
HXDLIN( 906)			 ::Dynamic _hx_tmp1 = this->get_explicitWidth();
HXDLIN( 906)			::feathers::controls::supportClasses::IViewPort_obj::set_visibleWidth(_hx_tmp,((((( (Float)(_hx_tmp1) ) - this->leftViewPortOffset) - this->rightViewPortOffset) - this->paddingLeft) - this->paddingRight));
            		}
HXLINE( 908)		if (::hx::IsNull( this->get_explicitHeight() )) {
HXLINE( 909)			::feathers::controls::supportClasses::IViewPort_obj::set_visibleHeight(this->viewPort,null());
            		}
            		else {
HXLINE( 911)			::Dynamic _hx_tmp = this->viewPort;
HXDLIN( 911)			 ::Dynamic _hx_tmp1 = this->get_explicitHeight();
HXDLIN( 911)			::feathers::controls::supportClasses::IViewPort_obj::set_visibleHeight(_hx_tmp,((((( (Float)(_hx_tmp1) ) - this->topViewPortOffset) - this->bottomViewPortOffset) - this->paddingTop) - this->paddingBottom));
            		}
HXLINE( 913)		if (::hx::IsNull( this->get_explicitMinWidth() )) {
HXLINE( 914)			::feathers::controls::supportClasses::IViewPort_obj::set_minVisibleWidth(this->viewPort,null());
            		}
            		else {
HXLINE( 916)			::Dynamic _hx_tmp = this->viewPort;
HXDLIN( 916)			 ::Dynamic _hx_tmp1 = this->get_explicitMinWidth();
HXDLIN( 916)			::feathers::controls::supportClasses::IViewPort_obj::set_minVisibleWidth(_hx_tmp,((((( (Float)(_hx_tmp1) ) - this->leftViewPortOffset) - this->rightViewPortOffset) - this->paddingLeft) - this->paddingRight));
            		}
HXLINE( 918)		if (::hx::IsNull( this->get_explicitMinHeight() )) {
HXLINE( 919)			::feathers::controls::supportClasses::IViewPort_obj::set_minVisibleHeight(this->viewPort,null());
            		}
            		else {
HXLINE( 921)			::Dynamic _hx_tmp = this->viewPort;
HXDLIN( 921)			 ::Dynamic _hx_tmp1 = this->get_explicitMinHeight();
HXDLIN( 921)			::feathers::controls::supportClasses::IViewPort_obj::set_minVisibleHeight(_hx_tmp,((((( (Float)(_hx_tmp1) ) - this->topViewPortOffset) - this->bottomViewPortOffset) - this->paddingTop) - this->paddingBottom));
            		}
HXLINE( 924)		if (::hx::IsNull( this->get_explicitMaxWidth() )) {
HXLINE( 925)			::feathers::controls::supportClasses::IViewPort_obj::set_maxVisibleWidth(this->viewPort,::Math_obj::POSITIVE_INFINITY);
            		}
            		else {
HXLINE( 927)			::Dynamic _hx_tmp = this->viewPort;
HXDLIN( 927)			 ::Dynamic _hx_tmp1 = this->get_explicitMaxWidth();
HXDLIN( 927)			::feathers::controls::supportClasses::IViewPort_obj::set_maxVisibleWidth(_hx_tmp,((((( (Float)(_hx_tmp1) ) - this->leftViewPortOffset) - this->rightViewPortOffset) - this->paddingLeft) - this->paddingRight));
            		}
HXLINE( 929)		if (::hx::IsNull( this->get_explicitMaxHeight() )) {
HXLINE( 930)			::feathers::controls::supportClasses::IViewPort_obj::set_maxVisibleHeight(this->viewPort,::Math_obj::POSITIVE_INFINITY);
            		}
            		else {
HXLINE( 932)			::Dynamic _hx_tmp = this->viewPort;
HXDLIN( 932)			 ::Dynamic _hx_tmp1 = this->get_explicitMaxHeight();
HXDLIN( 932)			::feathers::controls::supportClasses::IViewPort_obj::set_maxVisibleHeight(_hx_tmp,((((( (Float)(_hx_tmp1) ) - this->topViewPortOffset) - this->bottomViewPortOffset) - this->paddingTop) - this->paddingBottom));
            		}
HXLINE( 935)		::feathers::core::IValidating_obj::validateNow(this->viewPort);
HXLINE( 940)		this->_ignoreViewPortResizing = oldIgnoreViewPortResizing;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,refreshViewPortBoundsForMeasurement,(void))

void BaseScrollContainer_obj::refreshViewPortBoundsForLayout(){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_943_refreshViewPortBoundsForLayout)
HXLINE( 944)		bool oldIgnoreViewPortResizing = this->_ignoreViewPortResizing;
HXLINE( 949)		this->_ignoreViewPortResizing = true;
HXLINE( 951)		::feathers::core::IDisplayObject_obj::set_x(this->viewPort,(this->paddingLeft + this->leftViewPortOffset));
HXLINE( 952)		::feathers::core::IDisplayObject_obj::set_y(this->viewPort,(this->paddingTop + this->topViewPortOffset));
HXLINE( 953)		::feathers::controls::supportClasses::IViewPort_obj::set_visibleWidth(this->viewPort,((((this->actualWidth - this->leftViewPortOffset) - this->rightViewPortOffset) - this->paddingLeft) - this->paddingRight));
HXLINE( 954)		::feathers::controls::supportClasses::IViewPort_obj::set_visibleHeight(this->viewPort,((((this->actualHeight - this->topViewPortOffset) - this->bottomViewPortOffset) - this->paddingTop) - this->paddingBottom));
HXLINE( 955)		::feathers::controls::supportClasses::IViewPort_obj::set_minVisibleWidth(this->viewPort,((((this->actualMinWidth - this->leftViewPortOffset) - this->rightViewPortOffset) - this->paddingLeft) - this->paddingRight));
HXLINE( 956)		::feathers::controls::supportClasses::IViewPort_obj::set_minVisibleHeight(this->viewPort,((((this->actualMinHeight - this->topViewPortOffset) - this->bottomViewPortOffset) - this->paddingTop) - this->paddingBottom));
HXLINE( 957)		::feathers::controls::supportClasses::IViewPort_obj::set_maxVisibleWidth(this->viewPort,((((this->actualMaxWidth - this->leftViewPortOffset) - this->rightViewPortOffset) - this->paddingLeft) - this->paddingRight));
HXLINE( 958)		::feathers::controls::supportClasses::IViewPort_obj::set_maxVisibleHeight(this->viewPort,((((this->actualMaxHeight - this->topViewPortOffset) - this->bottomViewPortOffset) - this->paddingTop) - this->paddingBottom));
HXLINE( 963)		this->_ignoreViewPortResizing = oldIgnoreViewPortResizing;
HXLINE( 965)		::feathers::core::IValidating_obj::validateNow(this->viewPort);
HXLINE( 966)		 ::feathers::utils::Scroller _hx_tmp = this->scroller;
HXDLIN( 966)		 ::Dynamic _hx_tmp1 = ::feathers::controls::supportClasses::IViewPort_obj::get_visibleWidth(this->viewPort);
HXDLIN( 966)		 ::Dynamic _hx_tmp2 = ::feathers::controls::supportClasses::IViewPort_obj::get_visibleHeight(this->viewPort);
HXDLIN( 966)		Float _hx_tmp3 = ::feathers::core::IDisplayObject_obj::get_width(this->viewPort);
HXDLIN( 966)		_hx_tmp->setDimensions(_hx_tmp1,_hx_tmp2,_hx_tmp3,::feathers::core::IDisplayObject_obj::get_height(this->viewPort));
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,refreshViewPortBoundsForLayout,(void))

void BaseScrollContainer_obj::refreshScrollerValues(){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_969_refreshScrollerValues)
HXLINE( 970)		this->scroller->enabledX = ::hx::IsNotEq( this->scrollPolicyX,::feathers::controls::ScrollPolicy_obj::OFF_dyn() );
HXLINE( 971)		this->scroller->enabledY = ::hx::IsNotEq( this->scrollPolicyY,::feathers::controls::ScrollPolicy_obj::OFF_dyn() );
HXLINE( 972)		this->scroller->elasticEdges = this->elasticEdges;
HXLINE( 973)		 ::feathers::layout::Direction _hx_tmp = this->get_primaryDirection();
HXDLIN( 973)		this->scroller->forceElasticLeft = ::hx::IsEq( _hx_tmp,::feathers::layout::Direction_obj::HORIZONTAL_dyn() );
HXLINE( 974)		 ::feathers::layout::Direction _hx_tmp1 = this->get_primaryDirection();
HXDLIN( 974)		this->scroller->forceElasticRight = ::hx::IsEq( _hx_tmp1,::feathers::layout::Direction_obj::HORIZONTAL_dyn() );
HXLINE( 975)		 ::feathers::layout::Direction _hx_tmp2 = this->get_primaryDirection();
HXDLIN( 975)		this->scroller->forceElasticTop = ::hx::IsEq( _hx_tmp2,::feathers::layout::Direction_obj::VERTICAL_dyn() );
HXLINE( 976)		 ::feathers::layout::Direction _hx_tmp3 = this->get_primaryDirection();
HXDLIN( 976)		this->scroller->forceElasticBottom = ::hx::IsEq( _hx_tmp3,::feathers::layout::Direction_obj::VERTICAL_dyn() );
HXLINE( 977)		this->scroller->simulateTouch = this->simulateTouch;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,refreshScrollerValues,(void))

void BaseScrollContainer_obj::refreshScrollBarValues(){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_980_refreshScrollBarValues)
HXLINE( 981)		if (::hx::IsNotNull( this->scrollBarX )) {
HXLINE( 982)			::feathers::controls::IRange_obj::set_minimum(this->scrollBarX,this->scroller->minScrollX);
HXLINE( 983)			::feathers::controls::IRange_obj::set_maximum(this->scrollBarX,this->scroller->maxScrollX);
HXLINE( 984)			::feathers::controls::IRange_obj::set_value(this->scrollBarX,this->scroller->scrollX);
HXLINE( 985)			::Dynamic _hx_tmp = this->scrollBarX;
HXDLIN( 985)			Float _hx_tmp1 = (this->scroller->maxScrollX - this->scroller->minScrollX);
HXDLIN( 985)			Float _hx_tmp2 = (_hx_tmp1 * ( (Float)(::feathers::controls::supportClasses::IViewPort_obj::get_visibleWidth(this->viewPort)) ));
HXDLIN( 985)			::feathers::controls::IScrollBar_obj::set_page(_hx_tmp,(_hx_tmp2 / ::feathers::core::IDisplayObject_obj::get_width(this->viewPort)));
HXLINE( 986)			::feathers::controls::IScrollBar_obj::set_step(this->scrollBarX,((Float)0.0));
HXLINE( 987)			 ::openfl::display::DisplayObjectContainer displayScrollBarX = ::hx::TCast<  ::openfl::display::DisplayObjectContainer >::cast(this->scrollBarX);
HXLINE( 988)			displayScrollBarX->set_visible(this->showScrollBarX);
HXLINE( 989)			if (!(this->autoHideScrollBars)) {
HXLINE( 992)				::feathers::core::IDisplayObject_obj::set_alpha(this->scrollBarX,((Float)1.0));
            			}
            		}
HXLINE( 995)		if (::hx::IsNotNull( this->scrollBarY )) {
HXLINE( 996)			::feathers::controls::IRange_obj::set_minimum(this->scrollBarY,this->scroller->minScrollY);
HXLINE( 997)			::feathers::controls::IRange_obj::set_maximum(this->scrollBarY,this->scroller->maxScrollY);
HXLINE( 998)			::feathers::controls::IRange_obj::set_value(this->scrollBarY,this->scroller->scrollY);
HXLINE( 999)			::Dynamic _hx_tmp = this->scrollBarY;
HXDLIN( 999)			Float _hx_tmp1 = (this->scroller->maxScrollY - this->scroller->minScrollY);
HXDLIN( 999)			Float _hx_tmp2 = (_hx_tmp1 * ( (Float)(::feathers::controls::supportClasses::IViewPort_obj::get_visibleHeight(this->viewPort)) ));
HXDLIN( 999)			::feathers::controls::IScrollBar_obj::set_page(_hx_tmp,(_hx_tmp2 / ::feathers::core::IDisplayObject_obj::get_height(this->viewPort)));
HXLINE(1000)			::feathers::controls::IScrollBar_obj::set_step(this->scrollBarY,((Float)0.0));
HXLINE(1001)			 ::openfl::display::DisplayObjectContainer displayScrollBarY = ::hx::TCast<  ::openfl::display::DisplayObjectContainer >::cast(this->scrollBarY);
HXLINE(1002)			displayScrollBarY->set_visible(this->showScrollBarY);
HXLINE(1003)			if (!(this->autoHideScrollBars)) {
HXLINE(1006)				::feathers::core::IDisplayObject_obj::set_alpha(this->scrollBarY,((Float)1.0));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,refreshScrollBarValues,(void))

bool BaseScrollContainer_obj::measure(){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_1011_measure)
HXLINE(1012)		bool needsWidth = ::hx::IsNull( this->get_explicitWidth() );
HXLINE(1013)		bool needsHeight = ::hx::IsNull( this->get_explicitHeight() );
HXLINE(1014)		bool needsMinWidth = ::hx::IsNull( this->get_explicitMinWidth() );
HXLINE(1015)		bool needsMinHeight = ::hx::IsNull( this->get_explicitMinHeight() );
HXLINE(1016)		bool needsMaxWidth = ::hx::IsNull( this->get_explicitMaxWidth() );
HXLINE(1017)		bool needsMaxHeight = ::hx::IsNull( this->get_explicitMaxHeight() );
HXLINE(1018)		bool _hx_tmp;
HXDLIN(1018)		bool _hx_tmp1;
HXDLIN(1018)		bool _hx_tmp2;
HXDLIN(1018)		bool _hx_tmp3;
HXDLIN(1018)		bool _hx_tmp4;
HXDLIN(1018)		if (!(needsWidth)) {
HXLINE(1018)			_hx_tmp4 = !(needsHeight);
            		}
            		else {
HXLINE(1018)			_hx_tmp4 = false;
            		}
HXDLIN(1018)		if (_hx_tmp4) {
HXLINE(1018)			_hx_tmp3 = !(needsMinWidth);
            		}
            		else {
HXLINE(1018)			_hx_tmp3 = false;
            		}
HXDLIN(1018)		if (_hx_tmp3) {
HXLINE(1018)			_hx_tmp2 = !(needsMinHeight);
            		}
            		else {
HXLINE(1018)			_hx_tmp2 = false;
            		}
HXDLIN(1018)		if (_hx_tmp2) {
HXLINE(1018)			_hx_tmp1 = !(needsMaxWidth);
            		}
            		else {
HXLINE(1018)			_hx_tmp1 = false;
            		}
HXDLIN(1018)		if (_hx_tmp1) {
HXLINE(1018)			_hx_tmp = !(needsMaxHeight);
            		}
            		else {
HXLINE(1018)			_hx_tmp = false;
            		}
HXDLIN(1018)		if (_hx_tmp) {
HXLINE(1019)			return false;
            		}
HXLINE(1022)		if (::hx::IsNotNull( this->_currentBackgroundSkin )) {
HXLINE(1023)			::feathers::utils::MeasurementsUtil_obj::resetFluidlyWithParent(this->_backgroundSkinMeasurements,this->_currentBackgroundSkin,::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1026)		::Dynamic measureSkin = null();
HXLINE(1027)		if (::Std_obj::isOfType(this->_currentBackgroundSkin,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IMeasureObject >()) ))) {
HXLINE(1028)			measureSkin =  ::hx::interface_check(this->_currentBackgroundSkin,0xcfc32883);
            		}
HXLINE(1031)		if (::Std_obj::isOfType(this->_currentBackgroundSkin,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IValidating >()) ))) {
HXLINE(1032)			::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->_currentBackgroundSkin,0x64d4b3cd));
            		}
HXLINE(1035)		::feathers::core::IValidating_obj::validateNow(this->viewPort);
HXLINE(1037)		 ::Dynamic newWidth = this->get_explicitWidth();
HXLINE(1038)		if (needsWidth) {
HXLINE(1039)			if (this->get_measureViewPort()) {
HXLINE(1040)				newWidth = ::feathers::controls::supportClasses::IViewPort_obj::get_visibleWidth(this->viewPort);
            			}
            			else {
HXLINE(1042)				newWidth = ((Float)0.0);
            			}
HXLINE(1044)			newWidth = (newWidth + (this->leftViewPortOffset + this->rightViewPortOffset));
HXLINE(1045)			newWidth = ::Math_obj::max(( (Float)(newWidth) ),this->chromeMeasuredWidth);
HXLINE(1046)			newWidth = (newWidth + (this->paddingLeft + this->paddingRight));
HXLINE(1047)			if (::hx::IsNotNull( this->_currentBackgroundSkin )) {
HXLINE(1048)				newWidth = ::Math_obj::max(( (Float)(newWidth) ),this->_currentBackgroundSkin->get_width());
            			}
            		}
HXLINE(1052)		 ::Dynamic newHeight = this->get_explicitHeight();
HXLINE(1053)		if (needsHeight) {
HXLINE(1054)			if (this->get_measureViewPort()) {
HXLINE(1055)				newHeight = ::feathers::controls::supportClasses::IViewPort_obj::get_visibleHeight(this->viewPort);
            			}
            			else {
HXLINE(1057)				newHeight = ((Float)0.0);
            			}
HXLINE(1059)			newHeight = (newHeight + (this->topViewPortOffset + this->bottomViewPortOffset));
HXLINE(1060)			newHeight = ::Math_obj::max(( (Float)(newHeight) ),this->chromeMeasuredHeight);
HXLINE(1061)			newHeight = (newHeight + (this->paddingTop + this->paddingBottom));
HXLINE(1062)			if (::hx::IsNotNull( this->_currentBackgroundSkin )) {
HXLINE(1063)				newHeight = ::Math_obj::max(( (Float)(newHeight) ),this->_currentBackgroundSkin->get_height());
            			}
            		}
HXLINE(1067)		 ::Dynamic newMinWidth = this->get_explicitMinWidth();
HXLINE(1068)		if (needsMinWidth) {
HXLINE(1069)			if (this->get_measureViewPort()) {
HXLINE(1070)				newMinWidth = ::feathers::controls::supportClasses::IViewPort_obj::get_minVisibleWidth(this->viewPort);
            			}
            			else {
HXLINE(1072)				newMinWidth = ((Float)0.0);
            			}
HXLINE(1074)			newMinWidth = (newMinWidth + (this->leftViewPortOffset + this->rightViewPortOffset));
HXLINE(1075)			newMinWidth = ::Math_obj::max(( (Float)(newMinWidth) ),this->chromeMeasuredMinWidth);
HXLINE(1076)			newMinWidth = (newMinWidth + (this->paddingLeft + this->paddingRight));
HXLINE(1077)			if (::hx::IsNotNull( measureSkin )) {
HXLINE(1078)				newMinWidth = ::Math_obj::max(( (Float)(newMinWidth) ),::feathers::core::IMeasureObject_obj::get_minWidth(measureSkin));
            			}
            			else {
HXLINE(1079)				if (::hx::IsNotNull( this->_backgroundSkinMeasurements )) {
HXLINE(1080)					newMinWidth = ::Math_obj::max(( (Float)(newMinWidth) ),( (Float)(this->_backgroundSkinMeasurements->minWidth) ));
            				}
            			}
            		}
HXLINE(1084)		 ::Dynamic newMinHeight = this->get_explicitMinHeight();
HXLINE(1085)		if (needsMinHeight) {
HXLINE(1086)			if (this->get_measureViewPort()) {
HXLINE(1087)				newMinHeight = ::feathers::controls::supportClasses::IViewPort_obj::get_minVisibleHeight(this->viewPort);
            			}
            			else {
HXLINE(1089)				newMinHeight = ((Float)0.0);
            			}
HXLINE(1091)			newMinHeight = (newMinHeight + (this->topViewPortOffset + this->bottomViewPortOffset));
HXLINE(1092)			newMinHeight = ::Math_obj::max(( (Float)(newMinHeight) ),this->chromeMeasuredMinHeight);
HXLINE(1093)			newMinHeight = (newMinHeight + (this->paddingTop + this->paddingBottom));
HXLINE(1094)			if (::hx::IsNotNull( measureSkin )) {
HXLINE(1095)				newMinHeight = ::Math_obj::max(( (Float)(newMinHeight) ),::feathers::core::IMeasureObject_obj::get_minHeight(measureSkin));
            			}
            			else {
HXLINE(1096)				if (::hx::IsNotNull( this->_backgroundSkinMeasurements )) {
HXLINE(1097)					newMinHeight = ::Math_obj::max(( (Float)(newMinHeight) ),( (Float)(this->_backgroundSkinMeasurements->minHeight) ));
            				}
            			}
            		}
HXLINE(1100)		 ::Dynamic newMaxWidth = this->get_explicitMaxWidth();
HXLINE(1101)		if (needsMaxWidth) {
HXLINE(1102)			if (this->get_measureViewPort()) {
HXLINE(1103)				newMaxWidth = this->viewPort->__Field(HX_("maxVisibleWidth",f8,8c,04,ed),::hx::paccDynamic);
            			}
            			else {
HXLINE(1105)				newMaxWidth = ::Math_obj::POSITIVE_INFINITY;
            			}
HXLINE(1107)			newMaxWidth = (newMaxWidth + (this->leftViewPortOffset + this->rightViewPortOffset));
HXLINE(1108)			newMaxWidth = ::Math_obj::min(( (Float)(newMaxWidth) ),this->chromeMeasuredMaxWidth);
HXLINE(1109)			newMaxWidth = (newMaxWidth + (this->paddingLeft + this->paddingRight));
HXLINE(1110)			if (::hx::IsNotNull( measureSkin )) {
HXLINE(1111)				newMaxWidth = ::Math_obj::min(( (Float)(newMaxWidth) ),::feathers::core::IMeasureObject_obj::get_maxWidth(measureSkin));
            			}
            			else {
HXLINE(1112)				if (::hx::IsNotNull( this->_backgroundSkinMeasurements )) {
HXLINE(1113)					newMaxWidth = ::Math_obj::min(( (Float)(newMaxWidth) ),( (Float)(this->_backgroundSkinMeasurements->maxWidth) ));
            				}
            			}
            		}
HXLINE(1117)		 ::Dynamic newMaxHeight = this->get_explicitMaxHeight();
HXLINE(1118)		if (needsMaxHeight) {
HXLINE(1119)			if (this->get_measureViewPort()) {
HXLINE(1120)				newMaxHeight = this->viewPort->__Field(HX_("maxVisibleHeight",b5,44,46,2d),::hx::paccDynamic);
            			}
            			else {
HXLINE(1122)				newMaxHeight = ::Math_obj::POSITIVE_INFINITY;
            			}
HXLINE(1124)			newMaxHeight = (newMaxHeight + (this->topViewPortOffset + this->bottomViewPortOffset));
HXLINE(1125)			newMaxHeight = ::Math_obj::min(( (Float)(newMaxHeight) ),this->chromeMeasuredMaxHeight);
HXLINE(1126)			newMaxHeight = (newMaxHeight + (this->paddingTop + this->paddingBottom));
HXLINE(1127)			if (::hx::IsNotNull( measureSkin )) {
HXLINE(1128)				newMaxHeight = ::Math_obj::min(( (Float)(newMaxHeight) ),::feathers::core::IMeasureObject_obj::get_maxHeight(measureSkin));
            			}
            			else {
HXLINE(1129)				if (::hx::IsNotNull( this->_backgroundSkinMeasurements )) {
HXLINE(1130)					newMaxHeight = ::Math_obj::min(( (Float)(newMaxHeight) ),( (Float)(this->_backgroundSkinMeasurements->maxHeight) ));
            				}
            			}
            		}
HXLINE(1134)		return this->saveMeasurements(( (Float)(newWidth) ),( (Float)(newHeight) ),newMinWidth,newMinHeight,newMaxWidth,newMaxHeight);
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,measure,return )

void BaseScrollContainer_obj::refreshBackgroundSkin(){
            	HX_GC_STACKFRAME(&_hx_pos_4200ed2106c74172_1137_refreshBackgroundSkin)
HXLINE(1138)		 ::openfl::display::DisplayObject oldSkin = this->_currentBackgroundSkin;
HXLINE(1139)		this->_currentBackgroundSkin = this->getCurrentBackgroundSkin();
HXLINE(1140)		if (::hx::IsEq( this->_currentBackgroundSkin,oldSkin )) {
HXLINE(1141)			return;
            		}
HXLINE(1143)		this->removeCurrentBackgroundSkin(oldSkin);
HXLINE(1144)		if (::hx::IsNull( this->_currentBackgroundSkin )) {
HXLINE(1145)			this->_backgroundSkinMeasurements = null();
HXLINE(1146)			return;
            		}
HXLINE(1148)		if (::Std_obj::isOfType(this->_currentBackgroundSkin,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IUIControl >()) ))) {
HXLINE(1149)			::feathers::core::IUIControl_obj::initializeNow( ::hx::interface_check(this->_currentBackgroundSkin,0x2696a04f));
            		}
HXLINE(1151)		if (::hx::IsNull( this->_backgroundSkinMeasurements )) {
HXLINE(1152)			this->_backgroundSkinMeasurements =  ::feathers::layout::Measurements_obj::__alloc( HX_CTX ,this->_currentBackgroundSkin);
            		}
            		else {
HXLINE(1154)			this->_backgroundSkinMeasurements->save(this->_currentBackgroundSkin);
            		}
HXLINE(1156)		bool _hx_tmp;
HXDLIN(1156)		if (::Std_obj::isOfType(::hx::ObjectPtr<OBJ_>(this),( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IStateContext >()) ))) {
HXLINE(1156)			_hx_tmp = ::Std_obj::isOfType(this->_currentBackgroundSkin,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IStateObserver >()) ));
            		}
            		else {
HXLINE(1156)			_hx_tmp = false;
            		}
HXDLIN(1156)		if (_hx_tmp) {
HXLINE(1157)			::feathers::core::IStateObserver_obj::set_stateContext( ::hx::interface_check(this->_currentBackgroundSkin,0xb36ec70d),::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1159)		this->addChildAt(this->_currentBackgroundSkin,0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,refreshBackgroundSkin,(void))

 ::openfl::display::DisplayObject BaseScrollContainer_obj::getCurrentBackgroundSkin(){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_1162_getCurrentBackgroundSkin)
HXLINE(1163)		bool _hx_tmp;
HXDLIN(1163)		if (!(this->get_enabled())) {
HXLINE(1163)			_hx_tmp = ::hx::IsNotNull( this->disabledBackgroundSkin );
            		}
            		else {
HXLINE(1163)			_hx_tmp = false;
            		}
HXDLIN(1163)		if (_hx_tmp) {
HXLINE(1164)			return this->disabledBackgroundSkin;
            		}
HXLINE(1166)		return this->backgroundSkin;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,getCurrentBackgroundSkin,return )

void BaseScrollContainer_obj::removeCurrentBackgroundSkin( ::openfl::display::DisplayObject skin){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_1169_removeCurrentBackgroundSkin)
HXLINE(1170)		if (::hx::IsNull( skin )) {
HXLINE(1171)			return;
            		}
HXLINE(1173)		if (::Std_obj::isOfType(skin,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IStateObserver >()) ))) {
HXLINE(1174)			::feathers::core::IStateObserver_obj::set_stateContext( ::hx::interface_check(skin,0xb36ec70d),null());
            		}
HXLINE(1176)		this->_backgroundSkinMeasurements->restore(skin);
HXLINE(1177)		if (::hx::IsEq( skin->parent,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(1180)			this->removeChild(skin);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseScrollContainer_obj,removeCurrentBackgroundSkin,(void))

void BaseScrollContainer_obj::layoutChildren(){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_1184_layoutChildren)
HXLINE(1185)		this->layoutBackgroundSkin();
HXLINE(1186)		this->layoutScrollBars();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,layoutChildren,(void))

void BaseScrollContainer_obj::layoutBackgroundSkin(){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_1189_layoutBackgroundSkin)
HXLINE(1190)		if (::hx::IsNull( this->_currentBackgroundSkin )) {
HXLINE(1191)			return;
            		}
HXLINE(1193)		this->_currentBackgroundSkin->set_x(((Float)0.0));
HXLINE(1194)		this->_currentBackgroundSkin->set_y(((Float)0.0));
HXLINE(1199)		Float _hx_tmp = this->_currentBackgroundSkin->get_width();
HXDLIN(1199)		if ((_hx_tmp != this->actualWidth)) {
HXLINE(1200)			this->_currentBackgroundSkin->set_width(this->actualWidth);
            		}
HXLINE(1202)		Float _hx_tmp1 = this->_currentBackgroundSkin->get_height();
HXDLIN(1202)		if ((_hx_tmp1 != this->actualHeight)) {
HXLINE(1203)			this->_currentBackgroundSkin->set_height(this->actualHeight);
            		}
HXLINE(1205)		if (::Std_obj::isOfType(this->_currentBackgroundSkin,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IValidating >()) ))) {
HXLINE(1206)			::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->_currentBackgroundSkin,0x64d4b3cd));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,layoutBackgroundSkin,(void))

void BaseScrollContainer_obj::layoutScrollBars(){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_1210_layoutScrollBars)
HXLINE(1211)		Float visibleWidth = ((((this->actualWidth - this->leftViewPortOffset) - this->rightViewPortOffset) - this->paddingLeft) - this->paddingRight);
HXLINE(1212)		Float visibleHeight = ((((this->actualHeight - this->topViewPortOffset) - this->bottomViewPortOffset) - this->paddingTop) - this->paddingBottom);
HXLINE(1214)		bool _hx_tmp;
HXDLIN(1214)		if (::hx::IsNotNull( this->scrollBarX )) {
HXLINE(1214)			_hx_tmp = ::Std_obj::isOfType(this->scrollBarX,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IValidating >()) ));
            		}
            		else {
HXLINE(1214)			_hx_tmp = false;
            		}
HXDLIN(1214)		if (_hx_tmp) {
HXLINE(1215)			::feathers::core::IValidating_obj::validateNow(this->scrollBarX);
            		}
HXLINE(1217)		bool _hx_tmp1;
HXDLIN(1217)		if (::hx::IsNotNull( this->scrollBarY )) {
HXLINE(1217)			_hx_tmp1 = ::Std_obj::isOfType(this->scrollBarY,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IValidating >()) ));
            		}
            		else {
HXLINE(1217)			_hx_tmp1 = false;
            		}
HXDLIN(1217)		if (_hx_tmp1) {
HXLINE(1218)			::feathers::core::IValidating_obj::validateNow(this->scrollBarY);
            		}
HXLINE(1221)		if (::hx::IsNotNull( this->scrollBarX )) {
HXLINE(1222)			if ((this->scrollBarXPosition->_hx_getIndex() == 0)) {
HXLINE(1224)				::feathers::core::IDisplayObject_obj::set_y(this->scrollBarX,this->paddingTop);
            			}
            			else {
HXLINE(1226)				::feathers::core::IDisplayObject_obj::set_y(this->scrollBarX,((this->paddingTop + this->topViewPortOffset) + visibleHeight));
            			}
HXLINE(1228)			::feathers::core::IDisplayObject_obj::set_x(this->scrollBarX,(this->paddingLeft + this->leftViewPortOffset));
HXLINE(1229)			if (!(this->fixedScrollBars)) {
HXLINE(1230)				{
HXLINE(1230)					::Dynamic _g = this->scrollBarX;
HXDLIN(1230)					Float _hx_tmp = ::feathers::core::IDisplayObject_obj::get_y(_g);
HXDLIN(1230)					::feathers::core::IDisplayObject_obj::set_y(_g,(_hx_tmp - ::feathers::core::IDisplayObject_obj::get_height(this->scrollBarX)));
            				}
HXLINE(1231)				bool _hx_tmp1;
HXDLIN(1231)				bool _hx_tmp2;
HXDLIN(1231)				if (!(this->showScrollBarY)) {
HXLINE(1231)					_hx_tmp2 = ::hx::IsNotNull( this->_hideScrollBarY );
            				}
            				else {
HXLINE(1231)					_hx_tmp2 = true;
            				}
HXDLIN(1231)				if (_hx_tmp2) {
HXLINE(1231)					_hx_tmp1 = ::hx::IsNotNull( this->scrollBarY );
            				}
            				else {
HXLINE(1231)					_hx_tmp1 = false;
            				}
HXDLIN(1231)				if (_hx_tmp1) {
HXLINE(1232)					::Dynamic _hx_tmp = this->scrollBarX;
HXDLIN(1232)					::feathers::core::IDisplayObject_obj::set_width(_hx_tmp,(visibleWidth - ::feathers::core::IDisplayObject_obj::get_width(this->scrollBarY)));
            				}
            				else {
HXLINE(1234)					::feathers::core::IDisplayObject_obj::set_width(this->scrollBarX,visibleWidth);
            				}
            			}
            			else {
HXLINE(1237)				::feathers::core::IDisplayObject_obj::set_width(this->scrollBarX,visibleWidth);
            			}
            		}
HXLINE(1240)		if (::hx::IsNotNull( this->scrollBarY )) {
HXLINE(1241)			if ((this->scrollBarYPosition->_hx_getIndex() == 3)) {
HXLINE(1243)				::feathers::core::IDisplayObject_obj::set_x(this->scrollBarY,this->paddingLeft);
            			}
            			else {
HXLINE(1245)				::feathers::core::IDisplayObject_obj::set_x(this->scrollBarY,((this->paddingLeft + this->leftViewPortOffset) + visibleWidth));
            			}
HXLINE(1247)			::feathers::core::IDisplayObject_obj::set_y(this->scrollBarY,(this->paddingTop + this->topViewPortOffset));
HXLINE(1248)			if (!(this->fixedScrollBars)) {
HXLINE(1249)				{
HXLINE(1249)					::Dynamic _g = this->scrollBarY;
HXDLIN(1249)					Float _hx_tmp = ::feathers::core::IDisplayObject_obj::get_x(_g);
HXDLIN(1249)					::feathers::core::IDisplayObject_obj::set_x(_g,(_hx_tmp - ::feathers::core::IDisplayObject_obj::get_width(this->scrollBarY)));
            				}
HXLINE(1250)				bool _hx_tmp1;
HXDLIN(1250)				bool _hx_tmp2;
HXDLIN(1250)				if (!(this->showScrollBarX)) {
HXLINE(1250)					_hx_tmp2 = ::hx::IsNotNull( this->_hideScrollBarX );
            				}
            				else {
HXLINE(1250)					_hx_tmp2 = true;
            				}
HXDLIN(1250)				if (_hx_tmp2) {
HXLINE(1250)					_hx_tmp1 = ::hx::IsNotNull( this->scrollBarX );
            				}
            				else {
HXLINE(1250)					_hx_tmp1 = false;
            				}
HXDLIN(1250)				if (_hx_tmp1) {
HXLINE(1251)					::Dynamic _hx_tmp = this->scrollBarY;
HXDLIN(1251)					::feathers::core::IDisplayObject_obj::set_height(_hx_tmp,(visibleHeight - ::feathers::core::IDisplayObject_obj::get_height(this->scrollBarX)));
            				}
            				else {
HXLINE(1253)					::feathers::core::IDisplayObject_obj::set_height(this->scrollBarY,visibleHeight);
            				}
            			}
            			else {
HXLINE(1256)				::feathers::core::IDisplayObject_obj::set_height(this->scrollBarY,visibleHeight);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,layoutScrollBars,(void))

void BaseScrollContainer_obj::refreshScrollRect(){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_1261_refreshScrollRect)
HXLINE(1264)		 ::openfl::geom::Rectangle scrollRect = this->_scrollRect1;
HXLINE(1265)		if (::hx::IsEq( this->_currentScrollRect,scrollRect )) {
HXLINE(1266)			scrollRect = this->_scrollRect2;
            		}
HXLINE(1268)		this->_currentScrollRect = scrollRect;
HXLINE(1269)		scrollRect->setTo(this->scroller->scrollX,this->scroller->scrollY,((((this->actualWidth - this->leftViewPortOffset) - this->rightViewPortOffset) - this->paddingLeft) - this->paddingRight),((((this->actualHeight - this->topViewPortOffset) - this->bottomViewPortOffset) - this->paddingTop) - this->paddingBottom));
HXLINE(1280)		 ::openfl::display::DisplayObject displayViewPort = ::hx::TCast<  ::openfl::display::DisplayObject >::cast(this->viewPort);
HXLINE(1281)		displayViewPort->set_scrollRect(scrollRect);
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,refreshScrollRect,(void))

void BaseScrollContainer_obj::revealScrollBarX(){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_1284_revealScrollBarX)
HXLINE(1285)		bool _hx_tmp;
HXDLIN(1285)		if (::hx::IsNotNull( this->scrollBarX )) {
HXLINE(1285)			_hx_tmp = (this->scroller->minScrollX == this->scroller->maxScrollX);
            		}
            		else {
HXLINE(1285)			_hx_tmp = true;
            		}
HXDLIN(1285)		if (_hx_tmp) {
HXLINE(1286)			return;
            		}
HXLINE(1288)		if (::hx::IsNotNull( this->_hideScrollBarX )) {
HXLINE(1289)			::motion::Actuate_obj::stop(this->_hideScrollBarX,null(),null(),null());
            		}
HXLINE(1291)		::feathers::core::IDisplayObject_obj::set_alpha(this->scrollBarX,((Float)1.0));
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,revealScrollBarX,(void))

void BaseScrollContainer_obj::revealScrollBarY(){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_1294_revealScrollBarY)
HXLINE(1295)		bool _hx_tmp;
HXDLIN(1295)		if (::hx::IsNotNull( this->scrollBarY )) {
HXLINE(1295)			_hx_tmp = (this->scroller->minScrollY == this->scroller->maxScrollY);
            		}
            		else {
HXLINE(1295)			_hx_tmp = true;
            		}
HXDLIN(1295)		if (_hx_tmp) {
HXLINE(1296)			return;
            		}
HXLINE(1298)		if (::hx::IsNotNull( this->_hideScrollBarY )) {
HXLINE(1299)			::motion::Actuate_obj::stop(this->_hideScrollBarY,null(),null(),null());
            		}
HXLINE(1301)		::feathers::core::IDisplayObject_obj::set_alpha(this->scrollBarY,((Float)1.0));
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,revealScrollBarY,(void))

void BaseScrollContainer_obj::hideScrollBarX(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::feathers::controls::supportClasses::BaseScrollContainer,_gthis) HXARGC(1)
            		Float _hx_run(Float alpha){
            			HX_STACKFRAME(&_hx_pos_4200ed2106c74172_1316_hideScrollBarX)
HXLINE(1316)			return ::feathers::core::IDisplayObject_obj::set_alpha(_gthis->scrollBarX,alpha);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_1304_hideScrollBarX)
HXDLIN(1304)		 ::feathers::controls::supportClasses::BaseScrollContainer _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1305)		bool _hx_tmp;
HXDLIN(1305)		if (::hx::IsNotNull( this->scrollBarX )) {
HXLINE(1305)			_hx_tmp = ::hx::IsNotNull( this->_hideScrollBarX );
            		}
            		else {
HXLINE(1305)			_hx_tmp = true;
            		}
HXDLIN(1305)		if (_hx_tmp) {
HXLINE(1306)			return;
            		}
HXLINE(1308)		if ((::feathers::core::IDisplayObject_obj::get_alpha(this->scrollBarX) == ((Float)0.0))) {
HXLINE(1310)			return;
            		}
HXLINE(1312)		if ((this->hideScrollBarDuration == ((Float)0.0))) {
HXLINE(1313)			::feathers::core::IDisplayObject_obj::set_alpha(this->scrollBarX,((Float)0.0));
HXLINE(1314)			return;
            		}
HXLINE(1318)		Float tween = this->hideScrollBarDuration;
HXLINE(1316)		 ::motion::actuators::GenericActuator tween1 = ::motion::Actuate_obj::update( ::Dynamic(new _hx_Closure_0(_gthis)),tween,::cpp::VirtualArray_obj::__new(1)->init(0,::feathers::core::IDisplayObject_obj::get_alpha(this->scrollBarX)),::cpp::VirtualArray_obj::__new(1)->init(0,((Float)0.0)),true);
HXLINE(1319)		this->_hideScrollBarX = ::hx::TCast<  ::motion::actuators::SimpleActuator >::cast(tween1);
HXLINE(1320)		this->_hideScrollBarX->ease(this->hideScrollBarEase);
HXLINE(1321)		this->_hideScrollBarX->autoVisible(false);
HXLINE(1322)		this->_hideScrollBarX->onComplete(this->hideScrollBarX_onComplete_dyn(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,hideScrollBarX,(void))

void BaseScrollContainer_obj::hideScrollBarY(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::feathers::controls::supportClasses::BaseScrollContainer,_gthis) HXARGC(1)
            		Float _hx_run(Float alpha){
            			HX_STACKFRAME(&_hx_pos_4200ed2106c74172_1337_hideScrollBarY)
HXLINE(1337)			return ::feathers::core::IDisplayObject_obj::set_alpha(_gthis->scrollBarY,alpha);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_1325_hideScrollBarY)
HXDLIN(1325)		 ::feathers::controls::supportClasses::BaseScrollContainer _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1326)		bool _hx_tmp;
HXDLIN(1326)		if (::hx::IsNotNull( this->scrollBarY )) {
HXLINE(1326)			_hx_tmp = ::hx::IsNotNull( this->_hideScrollBarY );
            		}
            		else {
HXLINE(1326)			_hx_tmp = true;
            		}
HXDLIN(1326)		if (_hx_tmp) {
HXLINE(1327)			return;
            		}
HXLINE(1329)		if ((::feathers::core::IDisplayObject_obj::get_alpha(this->scrollBarY) == ((Float)0.0))) {
HXLINE(1331)			return;
            		}
HXLINE(1333)		if ((this->hideScrollBarDuration == ((Float)0.0))) {
HXLINE(1334)			::feathers::core::IDisplayObject_obj::set_alpha(this->scrollBarY,((Float)0.0));
HXLINE(1335)			return;
            		}
HXLINE(1339)		Float tween = this->hideScrollBarDuration;
HXLINE(1337)		 ::motion::actuators::GenericActuator tween1 = ::motion::Actuate_obj::update( ::Dynamic(new _hx_Closure_0(_gthis)),tween,::cpp::VirtualArray_obj::__new(1)->init(0,::feathers::core::IDisplayObject_obj::get_alpha(this->scrollBarY)),::cpp::VirtualArray_obj::__new(1)->init(0,((Float)0.0)),true);
HXLINE(1340)		this->_hideScrollBarY = ::hx::TCast<  ::motion::actuators::SimpleActuator >::cast(tween1);
HXLINE(1341)		this->_hideScrollBarY->ease(this->hideScrollBarEase);
HXLINE(1342)		this->_hideScrollBarY->autoVisible(false);
HXLINE(1343)		this->_hideScrollBarY->onComplete(this->hideScrollBarY_onComplete_dyn(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,hideScrollBarY,(void))

void BaseScrollContainer_obj::checkForRevealScrollBars(){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_1346_checkForRevealScrollBars)
HXLINE(1347)		bool _hx_tmp;
HXDLIN(1347)		if (!(this->_scrollerDraggingX)) {
HXLINE(1347)			_hx_tmp = this->scroller->draggingX;
            		}
            		else {
HXLINE(1347)			_hx_tmp = false;
            		}
HXDLIN(1347)		if (_hx_tmp) {
HXLINE(1348)			this->_scrollerDraggingX = true;
HXLINE(1349)			this->revealScrollBarX();
            		}
HXLINE(1351)		bool _hx_tmp1;
HXDLIN(1351)		if (!(this->_scrollerDraggingY)) {
HXLINE(1351)			_hx_tmp1 = this->scroller->draggingY;
            		}
            		else {
HXLINE(1351)			_hx_tmp1 = false;
            		}
HXDLIN(1351)		if (_hx_tmp1) {
HXLINE(1352)			this->_scrollerDraggingY = true;
HXLINE(1353)			this->revealScrollBarY();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,checkForRevealScrollBars,(void))

void BaseScrollContainer_obj::scroller_scrollStartHandler( ::feathers::events::ScrollEvent event){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_1357_scroller_scrollStartHandler)
HXLINE(1358)		this->_scrollerDraggingX = false;
HXLINE(1359)		this->_scrollerDraggingY = false;
HXLINE(1360)		this->checkForRevealScrollBars();
HXLINE(1361)		::feathers::events::ScrollEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("scrollStart",15,bd,e8,cd),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseScrollContainer_obj,scroller_scrollStartHandler,(void))

void BaseScrollContainer_obj::scroller_scrollHandler( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_1364_scroller_scrollHandler)
HXLINE(1365)		if (this->_ignoreScrollerChanges) {
HXLINE(1366)			return;
            		}
HXLINE(1368)		this->checkForRevealScrollBars();
HXLINE(1369)		if (::feathers::controls::supportClasses::IViewPort_obj::get_requiresMeasurementOnScroll(this->viewPort)) {
HXLINE(1370)			this->setInvalid(HX_("scroll",0d,d8,64,47));
            		}
            		else {
HXLINE(1372)			this->refreshScrollRect();
HXLINE(1373)			this->refreshScrollBarValues();
            		}
HXLINE(1375)		::feathers::events::ScrollEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("scroll",0d,d8,64,47),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseScrollContainer_obj,scroller_scrollHandler,(void))

void BaseScrollContainer_obj::scroller_scrollCompleteHandler( ::feathers::events::ScrollEvent event){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_1378_scroller_scrollCompleteHandler)
HXLINE(1379)		this->_scrollerDraggingX = false;
HXLINE(1380)		this->_scrollerDraggingY = false;
HXLINE(1381)		bool _hx_tmp;
HXDLIN(1381)		bool _hx_tmp1;
HXDLIN(1381)		if (!(this->_scrollBarXHover)) {
HXLINE(1381)			_hx_tmp1 = !(this->fixedScrollBars);
            		}
            		else {
HXLINE(1381)			_hx_tmp1 = false;
            		}
HXDLIN(1381)		if (_hx_tmp1) {
HXLINE(1381)			_hx_tmp = this->autoHideScrollBars;
            		}
            		else {
HXLINE(1381)			_hx_tmp = false;
            		}
HXDLIN(1381)		if (_hx_tmp) {
HXLINE(1382)			this->hideScrollBarX();
            		}
HXLINE(1384)		bool _hx_tmp2;
HXDLIN(1384)		bool _hx_tmp3;
HXDLIN(1384)		if (!(this->_scrollBarYHover)) {
HXLINE(1384)			_hx_tmp3 = !(this->fixedScrollBars);
            		}
            		else {
HXLINE(1384)			_hx_tmp3 = false;
            		}
HXDLIN(1384)		if (_hx_tmp3) {
HXLINE(1384)			_hx_tmp2 = this->autoHideScrollBars;
            		}
            		else {
HXLINE(1384)			_hx_tmp2 = false;
            		}
HXDLIN(1384)		if (_hx_tmp2) {
HXLINE(1385)			this->hideScrollBarY();
            		}
HXLINE(1387)		::feathers::events::ScrollEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("scrollComplete",e6,e9,b8,0b),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseScrollContainer_obj,scroller_scrollCompleteHandler,(void))

void BaseScrollContainer_obj::scrollBarX_changeHandler( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_1391_scrollBarX_changeHandler)
HXDLIN(1391)		 ::feathers::utils::Scroller _hx_tmp = this->scroller;
HXDLIN(1391)		_hx_tmp->set_scrollX(::feathers::controls::IRange_obj::get_value(this->scrollBarX));
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseScrollContainer_obj,scrollBarX_changeHandler,(void))

void BaseScrollContainer_obj::scrollBarY_changeHandler( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_1395_scrollBarY_changeHandler)
HXDLIN(1395)		 ::feathers::utils::Scroller _hx_tmp = this->scroller;
HXDLIN(1395)		_hx_tmp->set_scrollY(::feathers::controls::IRange_obj::get_value(this->scrollBarY));
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseScrollContainer_obj,scrollBarY_changeHandler,(void))

void BaseScrollContainer_obj::scrollBarX_rollOverHandler( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_1398_scrollBarX_rollOverHandler)
HXLINE(1399)		this->_scrollBarXHover = true;
HXLINE(1400)		this->revealScrollBarX();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseScrollContainer_obj,scrollBarX_rollOverHandler,(void))

void BaseScrollContainer_obj::scrollBarX_rollOutHandler( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_1403_scrollBarX_rollOutHandler)
HXLINE(1404)		if (!(this->_scrollBarXHover)) {
HXLINE(1405)			return;
            		}
HXLINE(1407)		this->_scrollBarXHover = false;
HXLINE(1408)		bool _hx_tmp;
HXDLIN(1408)		bool _hx_tmp1;
HXDLIN(1408)		if (!(this->_scrollerDraggingX)) {
HXLINE(1408)			_hx_tmp1 = !(this->fixedScrollBars);
            		}
            		else {
HXLINE(1408)			_hx_tmp1 = false;
            		}
HXDLIN(1408)		if (_hx_tmp1) {
HXLINE(1408)			_hx_tmp = this->autoHideScrollBars;
            		}
            		else {
HXLINE(1408)			_hx_tmp = false;
            		}
HXDLIN(1408)		if (_hx_tmp) {
HXLINE(1409)			this->hideScrollBarX();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseScrollContainer_obj,scrollBarX_rollOutHandler,(void))

void BaseScrollContainer_obj::scrollBarY_rollOverHandler( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_1413_scrollBarY_rollOverHandler)
HXLINE(1414)		this->_scrollBarYHover = true;
HXLINE(1415)		this->revealScrollBarY();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseScrollContainer_obj,scrollBarY_rollOverHandler,(void))

void BaseScrollContainer_obj::scrollBarY_rollOutHandler( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_1418_scrollBarY_rollOutHandler)
HXLINE(1419)		if (!(this->_scrollBarYHover)) {
HXLINE(1420)			return;
            		}
HXLINE(1422)		this->_scrollBarYHover = false;
HXLINE(1423)		bool _hx_tmp;
HXDLIN(1423)		bool _hx_tmp1;
HXDLIN(1423)		if (!(this->_scrollerDraggingY)) {
HXLINE(1423)			_hx_tmp1 = !(this->fixedScrollBars);
            		}
            		else {
HXLINE(1423)			_hx_tmp1 = false;
            		}
HXDLIN(1423)		if (_hx_tmp1) {
HXLINE(1423)			_hx_tmp = this->autoHideScrollBars;
            		}
            		else {
HXLINE(1423)			_hx_tmp = false;
            		}
HXDLIN(1423)		if (_hx_tmp) {
HXLINE(1424)			this->hideScrollBarY();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseScrollContainer_obj,scrollBarY_rollOutHandler,(void))

void BaseScrollContainer_obj::scrollBarX_scrollStartHandler( ::feathers::events::ScrollEvent event){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_1428_scrollBarX_scrollStartHandler)
HXLINE(1429)		this->scroller->stop();
HXLINE(1430)		this->_scrollerDraggingX = true;
HXLINE(1431)		::feathers::events::ScrollEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("scrollStart",15,bd,e8,cd),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseScrollContainer_obj,scrollBarX_scrollStartHandler,(void))

void BaseScrollContainer_obj::scrollBarX_scrollCompleteHandler( ::feathers::events::ScrollEvent event){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_1434_scrollBarX_scrollCompleteHandler)
HXLINE(1435)		this->_scrollerDraggingX = false;
HXLINE(1436)		bool _hx_tmp;
HXDLIN(1436)		bool _hx_tmp1;
HXDLIN(1436)		if (!(this->_scrollBarXHover)) {
HXLINE(1436)			_hx_tmp1 = !(this->fixedScrollBars);
            		}
            		else {
HXLINE(1436)			_hx_tmp1 = false;
            		}
HXDLIN(1436)		if (_hx_tmp1) {
HXLINE(1436)			_hx_tmp = this->autoHideScrollBars;
            		}
            		else {
HXLINE(1436)			_hx_tmp = false;
            		}
HXDLIN(1436)		if (_hx_tmp) {
HXLINE(1437)			this->hideScrollBarX();
            		}
HXLINE(1439)		::feathers::events::ScrollEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("scrollComplete",e6,e9,b8,0b),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseScrollContainer_obj,scrollBarX_scrollCompleteHandler,(void))

void BaseScrollContainer_obj::scrollBarY_scrollStartHandler( ::feathers::events::ScrollEvent event){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_1442_scrollBarY_scrollStartHandler)
HXLINE(1443)		this->scroller->stop();
HXLINE(1444)		this->_scrollerDraggingY = true;
HXLINE(1445)		::feathers::events::ScrollEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("scrollStart",15,bd,e8,cd),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseScrollContainer_obj,scrollBarY_scrollStartHandler,(void))

void BaseScrollContainer_obj::scrollBarY_scrollCompleteHandler( ::feathers::events::ScrollEvent event){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_1448_scrollBarY_scrollCompleteHandler)
HXLINE(1449)		this->_scrollerDraggingY = false;
HXLINE(1450)		bool _hx_tmp;
HXDLIN(1450)		bool _hx_tmp1;
HXDLIN(1450)		if (!(this->_scrollBarYHover)) {
HXLINE(1450)			_hx_tmp1 = !(this->fixedScrollBars);
            		}
            		else {
HXLINE(1450)			_hx_tmp1 = false;
            		}
HXDLIN(1450)		if (_hx_tmp1) {
HXLINE(1450)			_hx_tmp = this->autoHideScrollBars;
            		}
            		else {
HXLINE(1450)			_hx_tmp = false;
            		}
HXDLIN(1450)		if (_hx_tmp) {
HXLINE(1451)			this->hideScrollBarY();
            		}
HXLINE(1453)		::feathers::events::ScrollEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("scrollComplete",e6,e9,b8,0b),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseScrollContainer_obj,scrollBarY_scrollCompleteHandler,(void))

void BaseScrollContainer_obj::hideScrollBarX_onComplete(){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_1457_hideScrollBarX_onComplete)
HXDLIN(1457)		this->_hideScrollBarX = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,hideScrollBarX_onComplete,(void))

void BaseScrollContainer_obj::hideScrollBarY_onComplete(){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_1461_hideScrollBarY_onComplete)
HXDLIN(1461)		this->_hideScrollBarY = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,hideScrollBarY_onComplete,(void))

void BaseScrollContainer_obj::viewPort_resizeHandler( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_1464_viewPort_resizeHandler)
HXLINE(1465)		bool _hx_tmp;
HXDLIN(1465)		if (!(this->_ignoreViewPortResizing)) {
HXLINE(1466)			Float _hx_tmp1 = ::feathers::core::IDisplayObject_obj::get_width(this->viewPort);
HXDLIN(1466)			if ((_hx_tmp1 == this->_previousViewPortWidth)) {
HXLINE(1466)				Float _hx_tmp1 = ::feathers::core::IDisplayObject_obj::get_height(this->viewPort);
HXLINE(1465)				_hx_tmp = (_hx_tmp1 == this->_previousViewPortHeight);
            			}
            			else {
HXLINE(1465)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE(1465)			_hx_tmp = true;
            		}
HXDLIN(1465)		if (_hx_tmp) {
HXLINE(1467)			return;
            		}
HXLINE(1469)		this->_previousViewPortWidth = ::feathers::core::IDisplayObject_obj::get_width(this->viewPort);
HXLINE(1470)		this->_previousViewPortHeight = ::feathers::core::IDisplayObject_obj::get_height(this->viewPort);
HXLINE(1471)		if (this->_validating) {
HXLINE(1472)			this->_viewPortBoundsChanged = true;
            		}
            		else {
HXLINE(1474)			this->setInvalid(HX_("size",c1,a0,53,4c));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseScrollContainer_obj,viewPort_resizeHandler,(void))

Float BaseScrollContainer_obj::set_paddingTop(Float value){
            	HX_STACKFRAME(&_hx_pos_c57e7e519d634598_68_set_paddingTop)
HXLINE(  69)		if (!(this->setStyle(HX_("paddingTop",44,fd,05,3a),null()))) {
HXLINE(  70)			return this->paddingTop;
            		}
HXLINE(  72)		if ((this->paddingTop == value)) {
HXLINE(  73)			return this->paddingTop;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_paddingTop_dyn();
HXLINE(  79)		this->paddingTop = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->paddingTop;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseScrollContainer_obj,set_paddingTop,return )

Float BaseScrollContainer_obj::clearStyle_paddingTop(){
            	HX_STACKFRAME(&_hx_pos_c57e7e519d634598_94_clearStyle_paddingTop)
HXLINE(  95)		this->set_paddingTop(((Float)0.0));
HXLINE(  96)		return this->paddingTop;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,clearStyle_paddingTop,return )

Float BaseScrollContainer_obj::set_paddingRight(Float value){
            	HX_STACKFRAME(&_hx_pos_c57e7e519d634598_68_set_paddingRight)
HXLINE(  69)		if (!(this->setStyle(HX_("paddingRight",4b,ec,a7,1a),null()))) {
HXLINE(  70)			return this->paddingRight;
            		}
HXLINE(  72)		if ((this->paddingRight == value)) {
HXLINE(  73)			return this->paddingRight;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_paddingRight_dyn();
HXLINE(  79)		this->paddingRight = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->paddingRight;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseScrollContainer_obj,set_paddingRight,return )

Float BaseScrollContainer_obj::clearStyle_paddingRight(){
            	HX_STACKFRAME(&_hx_pos_c57e7e519d634598_94_clearStyle_paddingRight)
HXLINE(  95)		this->set_paddingRight(((Float)0.0));
HXLINE(  96)		return this->paddingRight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,clearStyle_paddingRight,return )

Float BaseScrollContainer_obj::set_paddingBottom(Float value){
            	HX_STACKFRAME(&_hx_pos_c57e7e519d634598_68_set_paddingBottom)
HXLINE(  69)		if (!(this->setStyle(HX_("paddingBottom",9c,67,99,4f),null()))) {
HXLINE(  70)			return this->paddingBottom;
            		}
HXLINE(  72)		if ((this->paddingBottom == value)) {
HXLINE(  73)			return this->paddingBottom;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_paddingBottom_dyn();
HXLINE(  79)		this->paddingBottom = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->paddingBottom;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseScrollContainer_obj,set_paddingBottom,return )

Float BaseScrollContainer_obj::clearStyle_paddingBottom(){
            	HX_STACKFRAME(&_hx_pos_c57e7e519d634598_94_clearStyle_paddingBottom)
HXLINE(  95)		this->set_paddingBottom(((Float)0.0));
HXLINE(  96)		return this->paddingBottom;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,clearStyle_paddingBottom,return )

Float BaseScrollContainer_obj::set_paddingLeft(Float value){
            	HX_STACKFRAME(&_hx_pos_c57e7e519d634598_68_set_paddingLeft)
HXLINE(  69)		if (!(this->setStyle(HX_("paddingLeft",78,4a,e6,85),null()))) {
HXLINE(  70)			return this->paddingLeft;
            		}
HXLINE(  72)		if ((this->paddingLeft == value)) {
HXLINE(  73)			return this->paddingLeft;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_paddingLeft_dyn();
HXLINE(  79)		this->paddingLeft = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->paddingLeft;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseScrollContainer_obj,set_paddingLeft,return )

Float BaseScrollContainer_obj::clearStyle_paddingLeft(){
            	HX_STACKFRAME(&_hx_pos_c57e7e519d634598_94_clearStyle_paddingLeft)
HXLINE(  95)		this->set_paddingLeft(((Float)0.0));
HXLINE(  96)		return this->paddingLeft;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,clearStyle_paddingLeft,return )

 ::openfl::display::DisplayObject BaseScrollContainer_obj::set_backgroundSkin( ::openfl::display::DisplayObject value){
            	HX_STACKFRAME(&_hx_pos_c57e7e519d634598_68_set_backgroundSkin)
HXLINE(  69)		if (!(this->setStyle(HX_("backgroundSkin",8b,65,6f,20),null()))) {
HXLINE(  70)			return this->backgroundSkin;
            		}
HXLINE(  72)		if (::hx::IsEq( this->backgroundSkin,value )) {
HXLINE(  73)			return this->backgroundSkin;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_backgroundSkin_dyn();
HXLINE(  79)		this->backgroundSkin = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->backgroundSkin;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseScrollContainer_obj,set_backgroundSkin,return )

 ::openfl::display::DisplayObject BaseScrollContainer_obj::clearStyle_backgroundSkin(){
            	HX_STACKFRAME(&_hx_pos_c57e7e519d634598_94_clearStyle_backgroundSkin)
HXLINE(  95)		this->set_backgroundSkin(null());
HXLINE(  96)		return this->backgroundSkin;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,clearStyle_backgroundSkin,return )

 ::openfl::display::DisplayObject BaseScrollContainer_obj::set_disabledBackgroundSkin( ::openfl::display::DisplayObject value){
            	HX_STACKFRAME(&_hx_pos_c57e7e519d634598_68_set_disabledBackgroundSkin)
HXLINE(  69)		if (!(this->setStyle(HX_("disabledBackgroundSkin",27,5c,3a,d3),null()))) {
HXLINE(  70)			return this->disabledBackgroundSkin;
            		}
HXLINE(  72)		if (::hx::IsEq( this->disabledBackgroundSkin,value )) {
HXLINE(  73)			return this->disabledBackgroundSkin;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_disabledBackgroundSkin_dyn();
HXLINE(  79)		this->disabledBackgroundSkin = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->disabledBackgroundSkin;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseScrollContainer_obj,set_disabledBackgroundSkin,return )

 ::openfl::display::DisplayObject BaseScrollContainer_obj::clearStyle_disabledBackgroundSkin(){
            	HX_STACKFRAME(&_hx_pos_c57e7e519d634598_94_clearStyle_disabledBackgroundSkin)
HXLINE(  95)		this->set_disabledBackgroundSkin(null());
HXLINE(  96)		return this->disabledBackgroundSkin;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,clearStyle_disabledBackgroundSkin,return )

bool BaseScrollContainer_obj::set_fixedScrollBars(bool value){
            	HX_STACKFRAME(&_hx_pos_c57e7e519d634598_68_set_fixedScrollBars)
HXLINE(  69)		if (!(this->setStyle(HX_("fixedScrollBars",81,4c,7d,24),null()))) {
HXLINE(  70)			return this->fixedScrollBars;
            		}
HXLINE(  72)		if ((this->fixedScrollBars == value)) {
HXLINE(  73)			return this->fixedScrollBars;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_fixedScrollBars_dyn();
HXLINE(  79)		this->fixedScrollBars = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->fixedScrollBars;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseScrollContainer_obj,set_fixedScrollBars,return )

bool BaseScrollContainer_obj::clearStyle_fixedScrollBars(){
            	HX_STACKFRAME(&_hx_pos_c57e7e519d634598_94_clearStyle_fixedScrollBars)
HXLINE(  95)		this->set_fixedScrollBars(false);
HXLINE(  96)		return this->fixedScrollBars;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,clearStyle_fixedScrollBars,return )

bool BaseScrollContainer_obj::set_autoHideScrollBars(bool value){
            	HX_STACKFRAME(&_hx_pos_c57e7e519d634598_68_set_autoHideScrollBars)
HXLINE(  69)		if (!(this->setStyle(HX_("autoHideScrollBars",1e,ed,f4,84),null()))) {
HXLINE(  70)			return this->autoHideScrollBars;
            		}
HXLINE(  72)		if ((this->autoHideScrollBars == value)) {
HXLINE(  73)			return this->autoHideScrollBars;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_autoHideScrollBars_dyn();
HXLINE(  79)		this->autoHideScrollBars = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->autoHideScrollBars;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseScrollContainer_obj,set_autoHideScrollBars,return )

bool BaseScrollContainer_obj::clearStyle_autoHideScrollBars(){
            	HX_STACKFRAME(&_hx_pos_c57e7e519d634598_94_clearStyle_autoHideScrollBars)
HXLINE(  95)		this->set_autoHideScrollBars(true);
HXLINE(  96)		return this->autoHideScrollBars;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,clearStyle_autoHideScrollBars,return )

bool BaseScrollContainer_obj::set_simulateTouch(bool value){
            	HX_STACKFRAME(&_hx_pos_c57e7e519d634598_68_set_simulateTouch)
HXLINE(  69)		if (!(this->setStyle(HX_("simulateTouch",7b,1d,d4,98),null()))) {
HXLINE(  70)			return this->simulateTouch;
            		}
HXLINE(  72)		if ((this->simulateTouch == value)) {
HXLINE(  73)			return this->simulateTouch;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_simulateTouch_dyn();
HXLINE(  79)		this->simulateTouch = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->simulateTouch;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseScrollContainer_obj,set_simulateTouch,return )

bool BaseScrollContainer_obj::clearStyle_simulateTouch(){
            	HX_STACKFRAME(&_hx_pos_c57e7e519d634598_94_clearStyle_simulateTouch)
HXLINE(  95)		this->set_simulateTouch(false);
HXLINE(  96)		return this->simulateTouch;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,clearStyle_simulateTouch,return )

bool BaseScrollContainer_obj::set_elasticEdges(bool value){
            	HX_STACKFRAME(&_hx_pos_c57e7e519d634598_68_set_elasticEdges)
HXLINE(  69)		if (!(this->setStyle(HX_("elasticEdges",81,17,91,78),null()))) {
HXLINE(  70)			return this->elasticEdges;
            		}
HXLINE(  72)		if ((this->elasticEdges == value)) {
HXLINE(  73)			return this->elasticEdges;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_elasticEdges_dyn();
HXLINE(  79)		this->elasticEdges = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->elasticEdges;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseScrollContainer_obj,set_elasticEdges,return )

bool BaseScrollContainer_obj::clearStyle_elasticEdges(){
            	HX_STACKFRAME(&_hx_pos_c57e7e519d634598_94_clearStyle_elasticEdges)
HXLINE(  95)		this->set_elasticEdges(true);
HXLINE(  96)		return this->elasticEdges;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,clearStyle_elasticEdges,return )

 ::feathers::layout::RelativePosition BaseScrollContainer_obj::set_scrollBarXPosition( ::feathers::layout::RelativePosition value){
            	HX_STACKFRAME(&_hx_pos_c57e7e519d634598_68_set_scrollBarXPosition)
HXLINE(  69)		if (!(this->setStyle(HX_("scrollBarXPosition",9b,f4,81,52),null()))) {
HXLINE(  70)			return this->scrollBarXPosition;
            		}
HXLINE(  72)		if (::hx::IsEq( this->scrollBarXPosition,value )) {
HXLINE(  73)			return this->scrollBarXPosition;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_scrollBarXPosition_dyn();
HXLINE(  79)		this->scrollBarXPosition = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->scrollBarXPosition;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseScrollContainer_obj,set_scrollBarXPosition,return )

 ::feathers::layout::RelativePosition BaseScrollContainer_obj::clearStyle_scrollBarXPosition(){
            	HX_STACKFRAME(&_hx_pos_c57e7e519d634598_94_clearStyle_scrollBarXPosition)
HXLINE(  95)		this->set_scrollBarXPosition(::feathers::layout::RelativePosition_obj::BOTTOM_dyn());
HXLINE(  96)		return this->scrollBarXPosition;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,clearStyle_scrollBarXPosition,return )

 ::feathers::layout::RelativePosition BaseScrollContainer_obj::set_scrollBarYPosition( ::feathers::layout::RelativePosition value){
            	HX_STACKFRAME(&_hx_pos_c57e7e519d634598_68_set_scrollBarYPosition)
HXLINE(  69)		if (!(this->setStyle(HX_("scrollBarYPosition",9c,5d,73,25),null()))) {
HXLINE(  70)			return this->scrollBarYPosition;
            		}
HXLINE(  72)		if (::hx::IsEq( this->scrollBarYPosition,value )) {
HXLINE(  73)			return this->scrollBarYPosition;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_scrollBarYPosition_dyn();
HXLINE(  79)		this->scrollBarYPosition = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->scrollBarYPosition;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseScrollContainer_obj,set_scrollBarYPosition,return )

 ::feathers::layout::RelativePosition BaseScrollContainer_obj::clearStyle_scrollBarYPosition(){
            	HX_STACKFRAME(&_hx_pos_c57e7e519d634598_94_clearStyle_scrollBarYPosition)
HXLINE(  95)		this->set_scrollBarYPosition(::feathers::layout::RelativePosition_obj::RIGHT_dyn());
HXLINE(  96)		return this->scrollBarYPosition;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,clearStyle_scrollBarYPosition,return )

Float BaseScrollContainer_obj::set_hideScrollBarDuration(Float value){
            	HX_STACKFRAME(&_hx_pos_c57e7e519d634598_68_set_hideScrollBarDuration)
HXLINE(  69)		if (!(this->setStyle(HX_("hideScrollBarDuration",18,6a,9a,c2),null()))) {
HXLINE(  70)			return this->hideScrollBarDuration;
            		}
HXLINE(  72)		if ((this->hideScrollBarDuration == value)) {
HXLINE(  73)			return this->hideScrollBarDuration;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_hideScrollBarDuration_dyn();
HXLINE(  79)		this->hideScrollBarDuration = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->hideScrollBarDuration;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseScrollContainer_obj,set_hideScrollBarDuration,return )

Float BaseScrollContainer_obj::clearStyle_hideScrollBarDuration(){
            	HX_STACKFRAME(&_hx_pos_c57e7e519d634598_94_clearStyle_hideScrollBarDuration)
HXLINE(  95)		this->set_hideScrollBarDuration(((Float)0.2));
HXLINE(  96)		return this->hideScrollBarDuration;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,clearStyle_hideScrollBarDuration,return )

::Dynamic BaseScrollContainer_obj::set_hideScrollBarEase(::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_c57e7e519d634598_68_set_hideScrollBarEase)
HXLINE(  69)		if (!(this->setStyle(HX_("hideScrollBarEase",b2,34,1b,26),null()))) {
HXLINE(  70)			return this->hideScrollBarEase;
            		}
HXLINE(  72)		if (::hx::IsEq( this->hideScrollBarEase,value )) {
HXLINE(  73)			return this->hideScrollBarEase;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_hideScrollBarEase_dyn();
HXLINE(  79)		this->hideScrollBarEase = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->hideScrollBarEase;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseScrollContainer_obj,set_hideScrollBarEase,return )

::Dynamic BaseScrollContainer_obj::clearStyle_hideScrollBarEase(){
            	HX_STACKFRAME(&_hx_pos_c57e7e519d634598_94_clearStyle_hideScrollBarEase)
HXLINE(  95)		this->set_hideScrollBarEase(::motion::easing::Quart_obj::easeOut);
HXLINE(  96)		return this->hideScrollBarEase;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,clearStyle_hideScrollBarEase,return )

::String BaseScrollContainer_obj::INVALIDATION_FLAG_SCROLL_BAR_FACTORY;

::Dynamic BaseScrollContainer_obj::defaultScrollBarXFactory(){
            	HX_GC_STACKFRAME(&_hx_pos_4200ed2106c74172_46_defaultScrollBarXFactory)
HXDLIN(  46)		return  ::feathers::controls::HScrollBar_obj::__alloc( HX_CTX );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,defaultScrollBarXFactory,return )

::Dynamic BaseScrollContainer_obj::defaultScrollBarYFactory(){
            	HX_GC_STACKFRAME(&_hx_pos_4200ed2106c74172_50_defaultScrollBarYFactory)
HXDLIN(  50)		return  ::feathers::controls::VScrollBar_obj::__alloc( HX_CTX );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(BaseScrollContainer_obj,defaultScrollBarYFactory,return )


::hx::ObjectPtr< BaseScrollContainer_obj > BaseScrollContainer_obj::__new() {
	::hx::ObjectPtr< BaseScrollContainer_obj > __this = new BaseScrollContainer_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< BaseScrollContainer_obj > BaseScrollContainer_obj::__alloc(::hx::Ctx *_hx_ctx) {
	BaseScrollContainer_obj *__this = (BaseScrollContainer_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BaseScrollContainer_obj), true, "feathers.controls.supportClasses.BaseScrollContainer"));
	*(void **)__this = BaseScrollContainer_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

BaseScrollContainer_obj::BaseScrollContainer_obj()
{
}

void BaseScrollContainer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BaseScrollContainer);
	HX_MARK_MEMBER_NAME(viewPort,"viewPort");
	HX_MARK_MEMBER_NAME(scroller,"scroller");
	HX_MARK_MEMBER_NAME(_scrollerDraggingX,"_scrollerDraggingX");
	HX_MARK_MEMBER_NAME(_scrollerDraggingY,"_scrollerDraggingY");
	HX_MARK_MEMBER_NAME(_scrollBarXHover,"_scrollBarXHover");
	HX_MARK_MEMBER_NAME(_scrollBarYHover,"_scrollBarYHover");
	HX_MARK_MEMBER_NAME(_currentBackgroundSkin,"_currentBackgroundSkin");
	HX_MARK_MEMBER_NAME(_backgroundSkinMeasurements,"_backgroundSkinMeasurements");
	HX_MARK_MEMBER_NAME(topViewPortOffset,"topViewPortOffset");
	HX_MARK_MEMBER_NAME(rightViewPortOffset,"rightViewPortOffset");
	HX_MARK_MEMBER_NAME(bottomViewPortOffset,"bottomViewPortOffset");
	HX_MARK_MEMBER_NAME(leftViewPortOffset,"leftViewPortOffset");
	HX_MARK_MEMBER_NAME(chromeMeasuredWidth,"chromeMeasuredWidth");
	HX_MARK_MEMBER_NAME(chromeMeasuredMinWidth,"chromeMeasuredMinWidth");
	HX_MARK_MEMBER_NAME(chromeMeasuredMaxWidth,"chromeMeasuredMaxWidth");
	HX_MARK_MEMBER_NAME(chromeMeasuredHeight,"chromeMeasuredHeight");
	HX_MARK_MEMBER_NAME(chromeMeasuredMinHeight,"chromeMeasuredMinHeight");
	HX_MARK_MEMBER_NAME(chromeMeasuredMaxHeight,"chromeMeasuredMaxHeight");
	HX_MARK_MEMBER_NAME(paddingTop,"paddingTop");
	HX_MARK_MEMBER_NAME(paddingRight,"paddingRight");
	HX_MARK_MEMBER_NAME(paddingBottom,"paddingBottom");
	HX_MARK_MEMBER_NAME(paddingLeft,"paddingLeft");
	HX_MARK_MEMBER_NAME(backgroundSkin,"backgroundSkin");
	HX_MARK_MEMBER_NAME(disabledBackgroundSkin,"disabledBackgroundSkin");
	HX_MARK_MEMBER_NAME(scrollBarX,"scrollBarX");
	HX_MARK_MEMBER_NAME(scrollBarY,"scrollBarY");
	HX_MARK_MEMBER_NAME(fixedScrollBars,"fixedScrollBars");
	HX_MARK_MEMBER_NAME(autoHideScrollBars,"autoHideScrollBars");
	HX_MARK_MEMBER_NAME(showScrollBarX,"showScrollBarX");
	HX_MARK_MEMBER_NAME(showScrollBarY,"showScrollBarY");
	HX_MARK_MEMBER_NAME(scrollBarXFactory,"scrollBarXFactory");
	HX_MARK_MEMBER_NAME(scrollBarYFactory,"scrollBarYFactory");
	HX_MARK_MEMBER_NAME(scrollPolicyX,"scrollPolicyX");
	HX_MARK_MEMBER_NAME(scrollPolicyY,"scrollPolicyY");
	HX_MARK_MEMBER_NAME(simulateTouch,"simulateTouch");
	HX_MARK_MEMBER_NAME(elasticEdges,"elasticEdges");
	HX_MARK_MEMBER_NAME(scrollBarXPosition,"scrollBarXPosition");
	HX_MARK_MEMBER_NAME(scrollBarYPosition,"scrollBarYPosition");
	HX_MARK_MEMBER_NAME(_hideScrollBarX,"_hideScrollBarX");
	HX_MARK_MEMBER_NAME(_hideScrollBarY,"_hideScrollBarY");
	HX_MARK_MEMBER_NAME(hideScrollBarDuration,"hideScrollBarDuration");
	HX_MARK_MEMBER_NAME(hideScrollBarEase,"hideScrollBarEase");
	HX_MARK_MEMBER_NAME(_currentScrollRect,"_currentScrollRect");
	HX_MARK_MEMBER_NAME(_scrollRect1,"_scrollRect1");
	HX_MARK_MEMBER_NAME(_scrollRect2,"_scrollRect2");
	HX_MARK_MEMBER_NAME(_ignoreScrollerChanges,"_ignoreScrollerChanges");
	HX_MARK_MEMBER_NAME(_viewPortBoundsChanged,"_viewPortBoundsChanged");
	HX_MARK_MEMBER_NAME(_ignoreViewPortResizing,"_ignoreViewPortResizing");
	HX_MARK_MEMBER_NAME(_previousViewPortWidth,"_previousViewPortWidth");
	HX_MARK_MEMBER_NAME(_previousViewPortHeight,"_previousViewPortHeight");
	 ::feathers::core::FeathersControl_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void BaseScrollContainer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(viewPort,"viewPort");
	HX_VISIT_MEMBER_NAME(scroller,"scroller");
	HX_VISIT_MEMBER_NAME(_scrollerDraggingX,"_scrollerDraggingX");
	HX_VISIT_MEMBER_NAME(_scrollerDraggingY,"_scrollerDraggingY");
	HX_VISIT_MEMBER_NAME(_scrollBarXHover,"_scrollBarXHover");
	HX_VISIT_MEMBER_NAME(_scrollBarYHover,"_scrollBarYHover");
	HX_VISIT_MEMBER_NAME(_currentBackgroundSkin,"_currentBackgroundSkin");
	HX_VISIT_MEMBER_NAME(_backgroundSkinMeasurements,"_backgroundSkinMeasurements");
	HX_VISIT_MEMBER_NAME(topViewPortOffset,"topViewPortOffset");
	HX_VISIT_MEMBER_NAME(rightViewPortOffset,"rightViewPortOffset");
	HX_VISIT_MEMBER_NAME(bottomViewPortOffset,"bottomViewPortOffset");
	HX_VISIT_MEMBER_NAME(leftViewPortOffset,"leftViewPortOffset");
	HX_VISIT_MEMBER_NAME(chromeMeasuredWidth,"chromeMeasuredWidth");
	HX_VISIT_MEMBER_NAME(chromeMeasuredMinWidth,"chromeMeasuredMinWidth");
	HX_VISIT_MEMBER_NAME(chromeMeasuredMaxWidth,"chromeMeasuredMaxWidth");
	HX_VISIT_MEMBER_NAME(chromeMeasuredHeight,"chromeMeasuredHeight");
	HX_VISIT_MEMBER_NAME(chromeMeasuredMinHeight,"chromeMeasuredMinHeight");
	HX_VISIT_MEMBER_NAME(chromeMeasuredMaxHeight,"chromeMeasuredMaxHeight");
	HX_VISIT_MEMBER_NAME(paddingTop,"paddingTop");
	HX_VISIT_MEMBER_NAME(paddingRight,"paddingRight");
	HX_VISIT_MEMBER_NAME(paddingBottom,"paddingBottom");
	HX_VISIT_MEMBER_NAME(paddingLeft,"paddingLeft");
	HX_VISIT_MEMBER_NAME(backgroundSkin,"backgroundSkin");
	HX_VISIT_MEMBER_NAME(disabledBackgroundSkin,"disabledBackgroundSkin");
	HX_VISIT_MEMBER_NAME(scrollBarX,"scrollBarX");
	HX_VISIT_MEMBER_NAME(scrollBarY,"scrollBarY");
	HX_VISIT_MEMBER_NAME(fixedScrollBars,"fixedScrollBars");
	HX_VISIT_MEMBER_NAME(autoHideScrollBars,"autoHideScrollBars");
	HX_VISIT_MEMBER_NAME(showScrollBarX,"showScrollBarX");
	HX_VISIT_MEMBER_NAME(showScrollBarY,"showScrollBarY");
	HX_VISIT_MEMBER_NAME(scrollBarXFactory,"scrollBarXFactory");
	HX_VISIT_MEMBER_NAME(scrollBarYFactory,"scrollBarYFactory");
	HX_VISIT_MEMBER_NAME(scrollPolicyX,"scrollPolicyX");
	HX_VISIT_MEMBER_NAME(scrollPolicyY,"scrollPolicyY");
	HX_VISIT_MEMBER_NAME(simulateTouch,"simulateTouch");
	HX_VISIT_MEMBER_NAME(elasticEdges,"elasticEdges");
	HX_VISIT_MEMBER_NAME(scrollBarXPosition,"scrollBarXPosition");
	HX_VISIT_MEMBER_NAME(scrollBarYPosition,"scrollBarYPosition");
	HX_VISIT_MEMBER_NAME(_hideScrollBarX,"_hideScrollBarX");
	HX_VISIT_MEMBER_NAME(_hideScrollBarY,"_hideScrollBarY");
	HX_VISIT_MEMBER_NAME(hideScrollBarDuration,"hideScrollBarDuration");
	HX_VISIT_MEMBER_NAME(hideScrollBarEase,"hideScrollBarEase");
	HX_VISIT_MEMBER_NAME(_currentScrollRect,"_currentScrollRect");
	HX_VISIT_MEMBER_NAME(_scrollRect1,"_scrollRect1");
	HX_VISIT_MEMBER_NAME(_scrollRect2,"_scrollRect2");
	HX_VISIT_MEMBER_NAME(_ignoreScrollerChanges,"_ignoreScrollerChanges");
	HX_VISIT_MEMBER_NAME(_viewPortBoundsChanged,"_viewPortBoundsChanged");
	HX_VISIT_MEMBER_NAME(_ignoreViewPortResizing,"_ignoreViewPortResizing");
	HX_VISIT_MEMBER_NAME(_previousViewPortWidth,"_previousViewPortWidth");
	HX_VISIT_MEMBER_NAME(_previousViewPortHeight,"_previousViewPortHeight");
	 ::feathers::core::FeathersControl_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val BaseScrollContainer_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollX") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_scrollX() ); }
		if (HX_FIELD_EQ(inName,"scrollY") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_scrollY() ); }
		if (HX_FIELD_EQ(inName,"measure") ) { return ::hx::Val( measure_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"viewPort") ) { return ::hx::Val( viewPort ); }
		if (HX_FIELD_EQ(inName,"scroller") ) { return ::hx::Val( scroller ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"paddingTop") ) { return ::hx::Val( paddingTop ); }
		if (HX_FIELD_EQ(inName,"scrollBarX") ) { return ::hx::Val( scrollBarX ); }
		if (HX_FIELD_EQ(inName,"scrollBarY") ) { return ::hx::Val( scrollBarY ); }
		if (HX_FIELD_EQ(inName,"minScrollX") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_minScrollX() ); }
		if (HX_FIELD_EQ(inName,"minScrollY") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_minScrollY() ); }
		if (HX_FIELD_EQ(inName,"maxScrollX") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_maxScrollX() ); }
		if (HX_FIELD_EQ(inName,"maxScrollY") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_maxScrollY() ); }
		if (HX_FIELD_EQ(inName,"initialize") ) { return ::hx::Val( initialize_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"paddingLeft") ) { return ::hx::Val( paddingLeft ); }
		if (HX_FIELD_EQ(inName,"get_scrollX") ) { return ::hx::Val( get_scrollX_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollX") ) { return ::hx::Val( set_scrollX_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scrollY") ) { return ::hx::Val( get_scrollY_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollY") ) { return ::hx::Val( set_scrollY_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"set_viewPort") ) { return ::hx::Val( set_viewPort_dyn() ); }
		if (HX_FIELD_EQ(inName,"paddingRight") ) { return ::hx::Val( paddingRight ); }
		if (HX_FIELD_EQ(inName,"elasticEdges") ) { return ::hx::Val( elasticEdges ); }
		if (HX_FIELD_EQ(inName,"_scrollRect1") ) { return ::hx::Val( _scrollRect1 ); }
		if (HX_FIELD_EQ(inName,"_scrollRect2") ) { return ::hx::Val( _scrollRect2 ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"paddingBottom") ) { return ::hx::Val( paddingBottom ); }
		if (HX_FIELD_EQ(inName,"scrollPolicyX") ) { return ::hx::Val( scrollPolicyX ); }
		if (HX_FIELD_EQ(inName,"scrollPolicyY") ) { return ::hx::Val( scrollPolicyY ); }
		if (HX_FIELD_EQ(inName,"simulateTouch") ) { return ::hx::Val( simulateTouch ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"backgroundSkin") ) { return ::hx::Val( backgroundSkin ); }
		if (HX_FIELD_EQ(inName,"showScrollBarX") ) { return ::hx::Val( showScrollBarX ); }
		if (HX_FIELD_EQ(inName,"showScrollBarY") ) { return ::hx::Val( showScrollBarY ); }
		if (HX_FIELD_EQ(inName,"get_minScrollX") ) { return ::hx::Val( get_minScrollX_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_minScrollY") ) { return ::hx::Val( get_minScrollY_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxScrollX") ) { return ::hx::Val( get_maxScrollX_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxScrollY") ) { return ::hx::Val( get_maxScrollY_dyn() ); }
		if (HX_FIELD_EQ(inName,"refreshEnabled") ) { return ::hx::Val( refreshEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"layoutChildren") ) { return ::hx::Val( layoutChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"hideScrollBarX") ) { return ::hx::Val( hideScrollBarX_dyn() ); }
		if (HX_FIELD_EQ(inName,"hideScrollBarY") ) { return ::hx::Val( hideScrollBarY_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingTop") ) { return ::hx::Val( set_paddingTop_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"fixedScrollBars") ) { return ::hx::Val( fixedScrollBars ); }
		if (HX_FIELD_EQ(inName,"_hideScrollBarX") ) { return ::hx::Val( _hideScrollBarX ); }
		if (HX_FIELD_EQ(inName,"_hideScrollBarY") ) { return ::hx::Val( _hideScrollBarY ); }
		if (HX_FIELD_EQ(inName,"measureViewPort") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_measureViewPort() ); }
		if (HX_FIELD_EQ(inName,"refreshViewPort") ) { return ::hx::Val( refreshViewPort_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingLeft") ) { return ::hx::Val( set_paddingLeft_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_scrollBarXHover") ) { return ::hx::Val( _scrollBarXHover ); }
		if (HX_FIELD_EQ(inName,"_scrollBarYHover") ) { return ::hx::Val( _scrollBarYHover ); }
		if (HX_FIELD_EQ(inName,"primaryDirection") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_primaryDirection() ); }
		if (HX_FIELD_EQ(inName,"needsMeasurement") ) { return ::hx::Val( needsMeasurement_dyn() ); }
		if (HX_FIELD_EQ(inName,"createScrollBars") ) { return ::hx::Val( createScrollBars_dyn() ); }
		if (HX_FIELD_EQ(inName,"layoutScrollBars") ) { return ::hx::Val( layoutScrollBars_dyn() ); }
		if (HX_FIELD_EQ(inName,"revealScrollBarX") ) { return ::hx::Val( revealScrollBarX_dyn() ); }
		if (HX_FIELD_EQ(inName,"revealScrollBarY") ) { return ::hx::Val( revealScrollBarY_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingRight") ) { return ::hx::Val( set_paddingRight_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_elasticEdges") ) { return ::hx::Val( set_elasticEdges_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"topViewPortOffset") ) { return ::hx::Val( topViewPortOffset ); }
		if (HX_FIELD_EQ(inName,"scrollBarXFactory") ) { return ::hx::Val( scrollBarXFactory ); }
		if (HX_FIELD_EQ(inName,"scrollBarYFactory") ) { return ::hx::Val( scrollBarYFactory ); }
		if (HX_FIELD_EQ(inName,"set_scrollPolicyX") ) { return ::hx::Val( set_scrollPolicyX_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollPolicyY") ) { return ::hx::Val( set_scrollPolicyY_dyn() ); }
		if (HX_FIELD_EQ(inName,"hideScrollBarEase") ) { return ::hx::Val( hideScrollBarEase ); }
		if (HX_FIELD_EQ(inName,"refreshScrollRect") ) { return ::hx::Val( refreshScrollRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingBottom") ) { return ::hx::Val( set_paddingBottom_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_simulateTouch") ) { return ::hx::Val( set_simulateTouch_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_scrollerDraggingX") ) { return ::hx::Val( _scrollerDraggingX ); }
		if (HX_FIELD_EQ(inName,"_scrollerDraggingY") ) { return ::hx::Val( _scrollerDraggingY ); }
		if (HX_FIELD_EQ(inName,"leftViewPortOffset") ) { return ::hx::Val( leftViewPortOffset ); }
		if (HX_FIELD_EQ(inName,"autoHideScrollBars") ) { return ::hx::Val( autoHideScrollBars ); }
		if (HX_FIELD_EQ(inName,"scrollBarXPosition") ) { return ::hx::Val( scrollBarXPosition ); }
		if (HX_FIELD_EQ(inName,"scrollBarYPosition") ) { return ::hx::Val( scrollBarYPosition ); }
		if (HX_FIELD_EQ(inName,"_currentScrollRect") ) { return ::hx::Val( _currentScrollRect ); }
		if (HX_FIELD_EQ(inName,"set_backgroundSkin") ) { return ::hx::Val( set_backgroundSkin_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"rightViewPortOffset") ) { return ::hx::Val( rightViewPortOffset ); }
		if (HX_FIELD_EQ(inName,"chromeMeasuredWidth") ) { return ::hx::Val( chromeMeasuredWidth ); }
		if (HX_FIELD_EQ(inName,"get_measureViewPort") ) { return ::hx::Val( get_measureViewPort_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_fixedScrollBars") ) { return ::hx::Val( set_fixedScrollBars_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"bottomViewPortOffset") ) { return ::hx::Val( bottomViewPortOffset ); }
		if (HX_FIELD_EQ(inName,"chromeMeasuredHeight") ) { return ::hx::Val( chromeMeasuredHeight ); }
		if (HX_FIELD_EQ(inName,"get_primaryDirection") ) { return ::hx::Val( get_primaryDirection_dyn() ); }
		if (HX_FIELD_EQ(inName,"layoutBackgroundSkin") ) { return ::hx::Val( layoutBackgroundSkin_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"set_scrollBarXFactory") ) { return ::hx::Val( set_scrollBarXFactory_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollBarYFactory") ) { return ::hx::Val( set_scrollBarYFactory_dyn() ); }
		if (HX_FIELD_EQ(inName,"hideScrollBarDuration") ) { return ::hx::Val( hideScrollBarDuration ); }
		if (HX_FIELD_EQ(inName,"refreshScrollerValues") ) { return ::hx::Val( refreshScrollerValues_dyn() ); }
		if (HX_FIELD_EQ(inName,"refreshBackgroundSkin") ) { return ::hx::Val( refreshBackgroundSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_paddingTop") ) { return ::hx::Val( clearStyle_paddingTop_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_hideScrollBarEase") ) { return ::hx::Val( set_hideScrollBarEase_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_currentBackgroundSkin") ) { return ::hx::Val( _currentBackgroundSkin ); }
		if (HX_FIELD_EQ(inName,"chromeMeasuredMinWidth") ) { return ::hx::Val( chromeMeasuredMinWidth ); }
		if (HX_FIELD_EQ(inName,"chromeMeasuredMaxWidth") ) { return ::hx::Val( chromeMeasuredMaxWidth ); }
		if (HX_FIELD_EQ(inName,"disabledBackgroundSkin") ) { return ::hx::Val( disabledBackgroundSkin ); }
		if (HX_FIELD_EQ(inName,"_ignoreScrollerChanges") ) { return ::hx::Val( _ignoreScrollerChanges ); }
		if (HX_FIELD_EQ(inName,"_viewPortBoundsChanged") ) { return ::hx::Val( _viewPortBoundsChanged ); }
		if (HX_FIELD_EQ(inName,"_previousViewPortWidth") ) { return ::hx::Val( _previousViewPortWidth ); }
		if (HX_FIELD_EQ(inName,"refreshScrollBarValues") ) { return ::hx::Val( refreshScrollBarValues_dyn() ); }
		if (HX_FIELD_EQ(inName,"scroller_scrollHandler") ) { return ::hx::Val( scroller_scrollHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"viewPort_resizeHandler") ) { return ::hx::Val( viewPort_resizeHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_paddingLeft") ) { return ::hx::Val( clearStyle_paddingLeft_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_autoHideScrollBars") ) { return ::hx::Val( set_autoHideScrollBars_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollBarXPosition") ) { return ::hx::Val( set_scrollBarXPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollBarYPosition") ) { return ::hx::Val( set_scrollBarYPosition_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"chromeMeasuredMinHeight") ) { return ::hx::Val( chromeMeasuredMinHeight ); }
		if (HX_FIELD_EQ(inName,"chromeMeasuredMaxHeight") ) { return ::hx::Val( chromeMeasuredMaxHeight ); }
		if (HX_FIELD_EQ(inName,"_ignoreViewPortResizing") ) { return ::hx::Val( _ignoreViewPortResizing ); }
		if (HX_FIELD_EQ(inName,"_previousViewPortHeight") ) { return ::hx::Val( _previousViewPortHeight ); }
		if (HX_FIELD_EQ(inName,"clearStyle_paddingRight") ) { return ::hx::Val( clearStyle_paddingRight_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_elasticEdges") ) { return ::hx::Val( clearStyle_elasticEdges_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"calculateViewPortOffsets") ) { return ::hx::Val( calculateViewPortOffsets_dyn() ); }
		if (HX_FIELD_EQ(inName,"getCurrentBackgroundSkin") ) { return ::hx::Val( getCurrentBackgroundSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"checkForRevealScrollBars") ) { return ::hx::Val( checkForRevealScrollBars_dyn() ); }
		if (HX_FIELD_EQ(inName,"scrollBarX_changeHandler") ) { return ::hx::Val( scrollBarX_changeHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"scrollBarY_changeHandler") ) { return ::hx::Val( scrollBarY_changeHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_paddingBottom") ) { return ::hx::Val( clearStyle_paddingBottom_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_simulateTouch") ) { return ::hx::Val( clearStyle_simulateTouch_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"scrollBarX_rollOutHandler") ) { return ::hx::Val( scrollBarX_rollOutHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"scrollBarY_rollOutHandler") ) { return ::hx::Val( scrollBarY_rollOutHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"hideScrollBarX_onComplete") ) { return ::hx::Val( hideScrollBarX_onComplete_dyn() ); }
		if (HX_FIELD_EQ(inName,"hideScrollBarY_onComplete") ) { return ::hx::Val( hideScrollBarY_onComplete_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_backgroundSkin") ) { return ::hx::Val( clearStyle_backgroundSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_hideScrollBarDuration") ) { return ::hx::Val( set_hideScrollBarDuration_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"scrollBarX_rollOverHandler") ) { return ::hx::Val( scrollBarX_rollOverHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"scrollBarY_rollOverHandler") ) { return ::hx::Val( scrollBarY_rollOverHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_disabledBackgroundSkin") ) { return ::hx::Val( set_disabledBackgroundSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_fixedScrollBars") ) { return ::hx::Val( clearStyle_fixedScrollBars_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"_backgroundSkinMeasurements") ) { return ::hx::Val( _backgroundSkinMeasurements ); }
		if (HX_FIELD_EQ(inName,"removeCurrentBackgroundSkin") ) { return ::hx::Val( removeCurrentBackgroundSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"scroller_scrollStartHandler") ) { return ::hx::Val( scroller_scrollStartHandler_dyn() ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"clearStyle_hideScrollBarEase") ) { return ::hx::Val( clearStyle_hideScrollBarEase_dyn() ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"scrollBarX_scrollStartHandler") ) { return ::hx::Val( scrollBarX_scrollStartHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"scrollBarY_scrollStartHandler") ) { return ::hx::Val( scrollBarY_scrollStartHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_autoHideScrollBars") ) { return ::hx::Val( clearStyle_autoHideScrollBars_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_scrollBarXPosition") ) { return ::hx::Val( clearStyle_scrollBarXPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_scrollBarYPosition") ) { return ::hx::Val( clearStyle_scrollBarYPosition_dyn() ); }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"refreshViewPortBoundsForLayout") ) { return ::hx::Val( refreshViewPortBoundsForLayout_dyn() ); }
		if (HX_FIELD_EQ(inName,"scroller_scrollCompleteHandler") ) { return ::hx::Val( scroller_scrollCompleteHandler_dyn() ); }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"scrollBarX_scrollCompleteHandler") ) { return ::hx::Val( scrollBarX_scrollCompleteHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"scrollBarY_scrollCompleteHandler") ) { return ::hx::Val( scrollBarY_scrollCompleteHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_hideScrollBarDuration") ) { return ::hx::Val( clearStyle_hideScrollBarDuration_dyn() ); }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"clearStyle_disabledBackgroundSkin") ) { return ::hx::Val( clearStyle_disabledBackgroundSkin_dyn() ); }
		break;
	case 35:
		if (HX_FIELD_EQ(inName,"refreshViewPortBoundsForMeasurement") ) { return ::hx::Val( refreshViewPortBoundsForMeasurement_dyn() ); }
		break;
	case 42:
		if (HX_FIELD_EQ(inName,"calculateViewPortOffsetsForFixedScrollBarX") ) { return ::hx::Val( calculateViewPortOffsetsForFixedScrollBarX_dyn() ); }
		if (HX_FIELD_EQ(inName,"calculateViewPortOffsetsForFixedScrollBarY") ) { return ::hx::Val( calculateViewPortOffsetsForFixedScrollBarY_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool BaseScrollContainer_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 24:
		if (HX_FIELD_EQ(inName,"defaultScrollBarXFactory") ) { outValue = defaultScrollBarXFactory_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"defaultScrollBarYFactory") ) { outValue = defaultScrollBarYFactory_dyn(); return true; }
		break;
	case 36:
		if (HX_FIELD_EQ(inName,"INVALIDATION_FLAG_SCROLL_BAR_FACTORY") ) { outValue = ( INVALIDATION_FLAG_SCROLL_BAR_FACTORY ); return true; }
	}
	return false;
}

::hx::Val BaseScrollContainer_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"scrollX") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scrollX(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"scrollY") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scrollY(inValue.Cast< Float >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"viewPort") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_viewPort(inValue.Cast< ::Dynamic >()) );viewPort=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scroller") ) { scroller=inValue.Cast<  ::feathers::utils::Scroller >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"paddingTop") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingTop(inValue.Cast< Float >()) );paddingTop=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollBarX") ) { scrollBarX=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollBarY") ) { scrollBarY=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"paddingLeft") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingLeft(inValue.Cast< Float >()) );paddingLeft=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"paddingRight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingRight(inValue.Cast< Float >()) );paddingRight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"elasticEdges") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_elasticEdges(inValue.Cast< bool >()) );elasticEdges=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_scrollRect1") ) { _scrollRect1=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_scrollRect2") ) { _scrollRect2=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"paddingBottom") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingBottom(inValue.Cast< Float >()) );paddingBottom=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollPolicyX") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scrollPolicyX(inValue.Cast<  ::feathers::controls::ScrollPolicy >()) );scrollPolicyX=inValue.Cast<  ::feathers::controls::ScrollPolicy >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollPolicyY") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scrollPolicyY(inValue.Cast<  ::feathers::controls::ScrollPolicy >()) );scrollPolicyY=inValue.Cast<  ::feathers::controls::ScrollPolicy >(); return inValue; }
		if (HX_FIELD_EQ(inName,"simulateTouch") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_simulateTouch(inValue.Cast< bool >()) );simulateTouch=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"backgroundSkin") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_backgroundSkin(inValue.Cast<  ::openfl::display::DisplayObject >()) );backgroundSkin=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"showScrollBarX") ) { showScrollBarX=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"showScrollBarY") ) { showScrollBarY=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"fixedScrollBars") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_fixedScrollBars(inValue.Cast< bool >()) );fixedScrollBars=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_hideScrollBarX") ) { _hideScrollBarX=inValue.Cast<  ::motion::actuators::SimpleActuator >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_hideScrollBarY") ) { _hideScrollBarY=inValue.Cast<  ::motion::actuators::SimpleActuator >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_scrollBarXHover") ) { _scrollBarXHover=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_scrollBarYHover") ) { _scrollBarYHover=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"topViewPortOffset") ) { topViewPortOffset=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollBarXFactory") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scrollBarXFactory(inValue.Cast<  ::Dynamic >()) );scrollBarXFactory=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollBarYFactory") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scrollBarYFactory(inValue.Cast<  ::Dynamic >()) );scrollBarYFactory=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hideScrollBarEase") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_hideScrollBarEase(inValue.Cast< ::Dynamic >()) );hideScrollBarEase=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_scrollerDraggingX") ) { _scrollerDraggingX=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_scrollerDraggingY") ) { _scrollerDraggingY=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"leftViewPortOffset") ) { leftViewPortOffset=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"autoHideScrollBars") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_autoHideScrollBars(inValue.Cast< bool >()) );autoHideScrollBars=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollBarXPosition") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scrollBarXPosition(inValue.Cast<  ::feathers::layout::RelativePosition >()) );scrollBarXPosition=inValue.Cast<  ::feathers::layout::RelativePosition >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollBarYPosition") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scrollBarYPosition(inValue.Cast<  ::feathers::layout::RelativePosition >()) );scrollBarYPosition=inValue.Cast<  ::feathers::layout::RelativePosition >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_currentScrollRect") ) { _currentScrollRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"rightViewPortOffset") ) { rightViewPortOffset=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"chromeMeasuredWidth") ) { chromeMeasuredWidth=inValue.Cast< Float >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"bottomViewPortOffset") ) { bottomViewPortOffset=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"chromeMeasuredHeight") ) { chromeMeasuredHeight=inValue.Cast< Float >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"hideScrollBarDuration") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_hideScrollBarDuration(inValue.Cast< Float >()) );hideScrollBarDuration=inValue.Cast< Float >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_currentBackgroundSkin") ) { _currentBackgroundSkin=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"chromeMeasuredMinWidth") ) { chromeMeasuredMinWidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"chromeMeasuredMaxWidth") ) { chromeMeasuredMaxWidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"disabledBackgroundSkin") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_disabledBackgroundSkin(inValue.Cast<  ::openfl::display::DisplayObject >()) );disabledBackgroundSkin=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_ignoreScrollerChanges") ) { _ignoreScrollerChanges=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_viewPortBoundsChanged") ) { _viewPortBoundsChanged=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_previousViewPortWidth") ) { _previousViewPortWidth=inValue.Cast< Float >(); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"chromeMeasuredMinHeight") ) { chromeMeasuredMinHeight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"chromeMeasuredMaxHeight") ) { chromeMeasuredMaxHeight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_ignoreViewPortResizing") ) { _ignoreViewPortResizing=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_previousViewPortHeight") ) { _previousViewPortHeight=inValue.Cast< Float >(); return inValue; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"_backgroundSkinMeasurements") ) { _backgroundSkinMeasurements=inValue.Cast<  ::feathers::layout::Measurements >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool BaseScrollContainer_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 36:
		if (HX_FIELD_EQ(inName,"INVALIDATION_FLAG_SCROLL_BAR_FACTORY") ) { INVALIDATION_FLAG_SCROLL_BAR_FACTORY=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void BaseScrollContainer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("viewPort",86,78,7e,87));
	outFields->push(HX_("scroller",ba,0d,55,8c));
	outFields->push(HX_("_scrollerDraggingX",50,e8,4d,17));
	outFields->push(HX_("_scrollerDraggingY",51,e8,4d,17));
	outFields->push(HX_("_scrollBarXHover",0b,c9,ca,b0));
	outFields->push(HX_("_scrollBarYHover",6a,25,26,17));
	outFields->push(HX_("_currentBackgroundSkin",e5,c0,55,58));
	outFields->push(HX_("_backgroundSkinMeasurements",41,46,9b,f8));
	outFields->push(HX_("topViewPortOffset",2e,22,81,2f));
	outFields->push(HX_("rightViewPortOffset",b5,d5,8c,35));
	outFields->push(HX_("bottomViewPortOffset",04,4d,09,29));
	outFields->push(HX_("leftViewPortOffset",20,a7,9d,98));
	outFields->push(HX_("chromeMeasuredWidth",06,83,cc,1b));
	outFields->push(HX_("chromeMeasuredMinWidth",14,76,8e,f8));
	outFields->push(HX_("chromeMeasuredMaxWidth",c2,5b,74,ab));
	outFields->push(HX_("chromeMeasuredHeight",e7,9a,75,ed));
	outFields->push(HX_("chromeMeasuredMinHeight",19,54,68,3a));
	outFields->push(HX_("chromeMeasuredMaxHeight",ab,66,ab,10));
	outFields->push(HX_("paddingTop",44,fd,05,3a));
	outFields->push(HX_("paddingRight",4b,ec,a7,1a));
	outFields->push(HX_("paddingBottom",9c,67,99,4f));
	outFields->push(HX_("paddingLeft",78,4a,e6,85));
	outFields->push(HX_("backgroundSkin",8b,65,6f,20));
	outFields->push(HX_("disabledBackgroundSkin",27,5c,3a,d3));
	outFields->push(HX_("scrollBarX",d2,75,d0,fe));
	outFields->push(HX_("scrollBarY",d3,75,d0,fe));
	outFields->push(HX_("fixedScrollBars",81,4c,7d,24));
	outFields->push(HX_("autoHideScrollBars",1e,ed,f4,84));
	outFields->push(HX_("showScrollBarX",2f,4d,f5,28));
	outFields->push(HX_("showScrollBarY",30,4d,f5,28));
	outFields->push(HX_("scrollX",ab,33,d8,30));
	outFields->push(HX_("scrollY",ac,33,d8,30));
	outFields->push(HX_("minScrollX",39,80,8f,f6));
	outFields->push(HX_("minScrollY",3a,80,8f,f6));
	outFields->push(HX_("maxScrollX",67,ad,fc,9a));
	outFields->push(HX_("maxScrollY",68,ad,fc,9a));
	outFields->push(HX_("scrollPolicyX",99,b3,41,7a));
	outFields->push(HX_("scrollPolicyY",9a,b3,41,7a));
	outFields->push(HX_("simulateTouch",7b,1d,d4,98));
	outFields->push(HX_("elasticEdges",81,17,91,78));
	outFields->push(HX_("scrollBarXPosition",9b,f4,81,52));
	outFields->push(HX_("scrollBarYPosition",9c,5d,73,25));
	outFields->push(HX_("_hideScrollBarX",d3,3d,c6,77));
	outFields->push(HX_("_hideScrollBarY",d4,3d,c6,77));
	outFields->push(HX_("hideScrollBarDuration",18,6a,9a,c2));
	outFields->push(HX_("hideScrollBarEase",b2,34,1b,26));
	outFields->push(HX_("_currentScrollRect",2b,02,b2,b3));
	outFields->push(HX_("_scrollRect1",41,29,a3,96));
	outFields->push(HX_("_scrollRect2",42,29,a3,96));
	outFields->push(HX_("_ignoreScrollerChanges",b8,42,c7,e7));
	outFields->push(HX_("_viewPortBoundsChanged",da,4f,f9,55));
	outFields->push(HX_("_ignoreViewPortResizing",a8,2b,c8,fb));
	outFields->push(HX_("_previousViewPortWidth",2a,9e,35,60));
	outFields->push(HX_("_previousViewPortHeight",43,3f,04,85));
	outFields->push(HX_("measureViewPort",04,be,b1,55));
	outFields->push(HX_("primaryDirection",1d,fa,05,eb));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo BaseScrollContainer_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(BaseScrollContainer_obj,viewPort),HX_("viewPort",86,78,7e,87)},
	{::hx::fsObject /*  ::feathers::utils::Scroller */ ,(int)offsetof(BaseScrollContainer_obj,scroller),HX_("scroller",ba,0d,55,8c)},
	{::hx::fsBool,(int)offsetof(BaseScrollContainer_obj,_scrollerDraggingX),HX_("_scrollerDraggingX",50,e8,4d,17)},
	{::hx::fsBool,(int)offsetof(BaseScrollContainer_obj,_scrollerDraggingY),HX_("_scrollerDraggingY",51,e8,4d,17)},
	{::hx::fsBool,(int)offsetof(BaseScrollContainer_obj,_scrollBarXHover),HX_("_scrollBarXHover",0b,c9,ca,b0)},
	{::hx::fsBool,(int)offsetof(BaseScrollContainer_obj,_scrollBarYHover),HX_("_scrollBarYHover",6a,25,26,17)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(BaseScrollContainer_obj,_currentBackgroundSkin),HX_("_currentBackgroundSkin",e5,c0,55,58)},
	{::hx::fsObject /*  ::feathers::layout::Measurements */ ,(int)offsetof(BaseScrollContainer_obj,_backgroundSkinMeasurements),HX_("_backgroundSkinMeasurements",41,46,9b,f8)},
	{::hx::fsFloat,(int)offsetof(BaseScrollContainer_obj,topViewPortOffset),HX_("topViewPortOffset",2e,22,81,2f)},
	{::hx::fsFloat,(int)offsetof(BaseScrollContainer_obj,rightViewPortOffset),HX_("rightViewPortOffset",b5,d5,8c,35)},
	{::hx::fsFloat,(int)offsetof(BaseScrollContainer_obj,bottomViewPortOffset),HX_("bottomViewPortOffset",04,4d,09,29)},
	{::hx::fsFloat,(int)offsetof(BaseScrollContainer_obj,leftViewPortOffset),HX_("leftViewPortOffset",20,a7,9d,98)},
	{::hx::fsFloat,(int)offsetof(BaseScrollContainer_obj,chromeMeasuredWidth),HX_("chromeMeasuredWidth",06,83,cc,1b)},
	{::hx::fsFloat,(int)offsetof(BaseScrollContainer_obj,chromeMeasuredMinWidth),HX_("chromeMeasuredMinWidth",14,76,8e,f8)},
	{::hx::fsFloat,(int)offsetof(BaseScrollContainer_obj,chromeMeasuredMaxWidth),HX_("chromeMeasuredMaxWidth",c2,5b,74,ab)},
	{::hx::fsFloat,(int)offsetof(BaseScrollContainer_obj,chromeMeasuredHeight),HX_("chromeMeasuredHeight",e7,9a,75,ed)},
	{::hx::fsFloat,(int)offsetof(BaseScrollContainer_obj,chromeMeasuredMinHeight),HX_("chromeMeasuredMinHeight",19,54,68,3a)},
	{::hx::fsFloat,(int)offsetof(BaseScrollContainer_obj,chromeMeasuredMaxHeight),HX_("chromeMeasuredMaxHeight",ab,66,ab,10)},
	{::hx::fsFloat,(int)offsetof(BaseScrollContainer_obj,paddingTop),HX_("paddingTop",44,fd,05,3a)},
	{::hx::fsFloat,(int)offsetof(BaseScrollContainer_obj,paddingRight),HX_("paddingRight",4b,ec,a7,1a)},
	{::hx::fsFloat,(int)offsetof(BaseScrollContainer_obj,paddingBottom),HX_("paddingBottom",9c,67,99,4f)},
	{::hx::fsFloat,(int)offsetof(BaseScrollContainer_obj,paddingLeft),HX_("paddingLeft",78,4a,e6,85)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(BaseScrollContainer_obj,backgroundSkin),HX_("backgroundSkin",8b,65,6f,20)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(BaseScrollContainer_obj,disabledBackgroundSkin),HX_("disabledBackgroundSkin",27,5c,3a,d3)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(BaseScrollContainer_obj,scrollBarX),HX_("scrollBarX",d2,75,d0,fe)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(BaseScrollContainer_obj,scrollBarY),HX_("scrollBarY",d3,75,d0,fe)},
	{::hx::fsBool,(int)offsetof(BaseScrollContainer_obj,fixedScrollBars),HX_("fixedScrollBars",81,4c,7d,24)},
	{::hx::fsBool,(int)offsetof(BaseScrollContainer_obj,autoHideScrollBars),HX_("autoHideScrollBars",1e,ed,f4,84)},
	{::hx::fsBool,(int)offsetof(BaseScrollContainer_obj,showScrollBarX),HX_("showScrollBarX",2f,4d,f5,28)},
	{::hx::fsBool,(int)offsetof(BaseScrollContainer_obj,showScrollBarY),HX_("showScrollBarY",30,4d,f5,28)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(BaseScrollContainer_obj,scrollBarXFactory),HX_("scrollBarXFactory",18,0d,e3,e9)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(BaseScrollContainer_obj,scrollBarYFactory),HX_("scrollBarYFactory",37,7f,15,23)},
	{::hx::fsObject /*  ::feathers::controls::ScrollPolicy */ ,(int)offsetof(BaseScrollContainer_obj,scrollPolicyX),HX_("scrollPolicyX",99,b3,41,7a)},
	{::hx::fsObject /*  ::feathers::controls::ScrollPolicy */ ,(int)offsetof(BaseScrollContainer_obj,scrollPolicyY),HX_("scrollPolicyY",9a,b3,41,7a)},
	{::hx::fsBool,(int)offsetof(BaseScrollContainer_obj,simulateTouch),HX_("simulateTouch",7b,1d,d4,98)},
	{::hx::fsBool,(int)offsetof(BaseScrollContainer_obj,elasticEdges),HX_("elasticEdges",81,17,91,78)},
	{::hx::fsObject /*  ::feathers::layout::RelativePosition */ ,(int)offsetof(BaseScrollContainer_obj,scrollBarXPosition),HX_("scrollBarXPosition",9b,f4,81,52)},
	{::hx::fsObject /*  ::feathers::layout::RelativePosition */ ,(int)offsetof(BaseScrollContainer_obj,scrollBarYPosition),HX_("scrollBarYPosition",9c,5d,73,25)},
	{::hx::fsObject /*  ::motion::actuators::SimpleActuator */ ,(int)offsetof(BaseScrollContainer_obj,_hideScrollBarX),HX_("_hideScrollBarX",d3,3d,c6,77)},
	{::hx::fsObject /*  ::motion::actuators::SimpleActuator */ ,(int)offsetof(BaseScrollContainer_obj,_hideScrollBarY),HX_("_hideScrollBarY",d4,3d,c6,77)},
	{::hx::fsFloat,(int)offsetof(BaseScrollContainer_obj,hideScrollBarDuration),HX_("hideScrollBarDuration",18,6a,9a,c2)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(BaseScrollContainer_obj,hideScrollBarEase),HX_("hideScrollBarEase",b2,34,1b,26)},
	{::hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(BaseScrollContainer_obj,_currentScrollRect),HX_("_currentScrollRect",2b,02,b2,b3)},
	{::hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(BaseScrollContainer_obj,_scrollRect1),HX_("_scrollRect1",41,29,a3,96)},
	{::hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(BaseScrollContainer_obj,_scrollRect2),HX_("_scrollRect2",42,29,a3,96)},
	{::hx::fsBool,(int)offsetof(BaseScrollContainer_obj,_ignoreScrollerChanges),HX_("_ignoreScrollerChanges",b8,42,c7,e7)},
	{::hx::fsBool,(int)offsetof(BaseScrollContainer_obj,_viewPortBoundsChanged),HX_("_viewPortBoundsChanged",da,4f,f9,55)},
	{::hx::fsBool,(int)offsetof(BaseScrollContainer_obj,_ignoreViewPortResizing),HX_("_ignoreViewPortResizing",a8,2b,c8,fb)},
	{::hx::fsFloat,(int)offsetof(BaseScrollContainer_obj,_previousViewPortWidth),HX_("_previousViewPortWidth",2a,9e,35,60)},
	{::hx::fsFloat,(int)offsetof(BaseScrollContainer_obj,_previousViewPortHeight),HX_("_previousViewPortHeight",43,3f,04,85)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo BaseScrollContainer_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &BaseScrollContainer_obj::INVALIDATION_FLAG_SCROLL_BAR_FACTORY,HX_("INVALIDATION_FLAG_SCROLL_BAR_FACTORY",3e,06,b0,07)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String BaseScrollContainer_obj_sMemberFields[] = {
	HX_("viewPort",86,78,7e,87),
	HX_("set_viewPort",03,50,91,51),
	HX_("scroller",ba,0d,55,8c),
	HX_("_scrollerDraggingX",50,e8,4d,17),
	HX_("_scrollerDraggingY",51,e8,4d,17),
	HX_("_scrollBarXHover",0b,c9,ca,b0),
	HX_("_scrollBarYHover",6a,25,26,17),
	HX_("_currentBackgroundSkin",e5,c0,55,58),
	HX_("_backgroundSkinMeasurements",41,46,9b,f8),
	HX_("topViewPortOffset",2e,22,81,2f),
	HX_("rightViewPortOffset",b5,d5,8c,35),
	HX_("bottomViewPortOffset",04,4d,09,29),
	HX_("leftViewPortOffset",20,a7,9d,98),
	HX_("chromeMeasuredWidth",06,83,cc,1b),
	HX_("chromeMeasuredMinWidth",14,76,8e,f8),
	HX_("chromeMeasuredMaxWidth",c2,5b,74,ab),
	HX_("chromeMeasuredHeight",e7,9a,75,ed),
	HX_("chromeMeasuredMinHeight",19,54,68,3a),
	HX_("chromeMeasuredMaxHeight",ab,66,ab,10),
	HX_("paddingTop",44,fd,05,3a),
	HX_("paddingRight",4b,ec,a7,1a),
	HX_("paddingBottom",9c,67,99,4f),
	HX_("paddingLeft",78,4a,e6,85),
	HX_("backgroundSkin",8b,65,6f,20),
	HX_("disabledBackgroundSkin",27,5c,3a,d3),
	HX_("scrollBarX",d2,75,d0,fe),
	HX_("scrollBarY",d3,75,d0,fe),
	HX_("fixedScrollBars",81,4c,7d,24),
	HX_("autoHideScrollBars",1e,ed,f4,84),
	HX_("showScrollBarX",2f,4d,f5,28),
	HX_("showScrollBarY",30,4d,f5,28),
	HX_("scrollBarXFactory",18,0d,e3,e9),
	HX_("set_scrollBarXFactory",fb,dd,99,bc),
	HX_("scrollBarYFactory",37,7f,15,23),
	HX_("set_scrollBarYFactory",1a,50,cc,f5),
	HX_("get_scrollX",c2,93,d2,b6),
	HX_("set_scrollX",ce,9a,3f,c1),
	HX_("get_scrollY",c3,93,d2,b6),
	HX_("set_scrollY",cf,9a,3f,c1),
	HX_("get_minScrollX",82,08,85,6c),
	HX_("get_minScrollY",83,08,85,6c),
	HX_("get_maxScrollX",b0,35,f2,10),
	HX_("get_maxScrollY",b1,35,f2,10),
	HX_("scrollPolicyX",99,b3,41,7a),
	HX_("set_scrollPolicyX",fc,96,1f,a4),
	HX_("scrollPolicyY",9a,b3,41,7a),
	HX_("set_scrollPolicyY",fd,96,1f,a4),
	HX_("simulateTouch",7b,1d,d4,98),
	HX_("elasticEdges",81,17,91,78),
	HX_("scrollBarXPosition",9b,f4,81,52),
	HX_("scrollBarYPosition",9c,5d,73,25),
	HX_("_hideScrollBarX",d3,3d,c6,77),
	HX_("_hideScrollBarY",d4,3d,c6,77),
	HX_("hideScrollBarDuration",18,6a,9a,c2),
	HX_("hideScrollBarEase",b2,34,1b,26),
	HX_("_currentScrollRect",2b,02,b2,b3),
	HX_("_scrollRect1",41,29,a3,96),
	HX_("_scrollRect2",42,29,a3,96),
	HX_("_ignoreScrollerChanges",b8,42,c7,e7),
	HX_("_viewPortBoundsChanged",da,4f,f9,55),
	HX_("_ignoreViewPortResizing",a8,2b,c8,fb),
	HX_("_previousViewPortWidth",2a,9e,35,60),
	HX_("_previousViewPortHeight",43,3f,04,85),
	HX_("get_measureViewPort",1b,8d,bc,e0),
	HX_("get_primaryDirection",26,5f,70,09),
	HX_("initialize",50,31,bb,ec),
	HX_("update",09,86,05,87),
	HX_("needsMeasurement",9f,bb,c2,39),
	HX_("createScrollBars",09,f4,fd,33),
	HX_("refreshEnabled",e6,13,46,f3),
	HX_("refreshViewPort",81,e1,d6,84),
	HX_("calculateViewPortOffsets",d4,ea,5f,26),
	HX_("calculateViewPortOffsetsForFixedScrollBarX",51,33,fe,54),
	HX_("calculateViewPortOffsetsForFixedScrollBarY",52,33,fe,54),
	HX_("refreshViewPortBoundsForMeasurement",e9,64,87,e5),
	HX_("refreshViewPortBoundsForLayout",dd,b8,a7,47),
	HX_("refreshScrollerValues",77,64,22,59),
	HX_("refreshScrollBarValues",ad,64,b7,cc),
	HX_("measure",5e,fb,e9,3c),
	HX_("refreshBackgroundSkin",c6,3c,91,2d),
	HX_("getCurrentBackgroundSkin",2e,6b,dc,9d),
	HX_("removeCurrentBackgroundSkin",c0,fc,70,a2),
	HX_("layoutChildren",09,3e,82,44),
	HX_("layoutBackgroundSkin",d5,3d,2a,eb),
	HX_("layoutScrollBars",37,e1,d2,24),
	HX_("refreshScrollRect",8c,b9,67,5c),
	HX_("revealScrollBarX",3f,8b,6d,f8),
	HX_("revealScrollBarY",40,8b,6d,f8),
	HX_("hideScrollBarX",34,f5,65,2e),
	HX_("hideScrollBarY",35,f5,65,2e),
	HX_("checkForRevealScrollBars",9b,0c,4d,62),
	HX_("scroller_scrollStartHandler",da,49,c4,3f),
	HX_("scroller_scrollHandler",b8,9a,72,93),
	HX_("scroller_scrollCompleteHandler",ff,d8,d9,01),
	HX_("scrollBarX_changeHandler",cd,85,38,66),
	HX_("scrollBarY_changeHandler",8e,25,34,fb),
	HX_("scrollBarX_rollOverHandler",ac,e8,a9,7b),
	HX_("scrollBarX_rollOutHandler",c6,c1,6c,a4),
	HX_("scrollBarY_rollOverHandler",ad,ba,9d,fe),
	HX_("scrollBarY_rollOutHandler",e5,ea,9c,6b),
	HX_("scrollBarX_scrollStartHandler",c2,50,79,a2),
	HX_("scrollBarX_scrollCompleteHandler",17,13,e6,0e),
	HX_("scrollBarY_scrollStartHandler",61,f5,dd,08),
	HX_("scrollBarY_scrollCompleteHandler",d8,db,18,8f),
	HX_("hideScrollBarX_onComplete",63,11,8f,90),
	HX_("hideScrollBarY_onComplete",02,7f,4e,d2),
	HX_("viewPort_resizeHandler",7d,6b,b5,82),
	HX_("set_paddingTop",01,6e,1b,d0),
	HX_("clearStyle_paddingTop",7f,38,31,33),
	HX_("set_paddingRight",48,c6,88,75),
	HX_("clearStyle_paddingRight",46,ac,84,21),
	HX_("set_paddingBottom",ff,4a,77,79),
	HX_("clearStyle_paddingBottom",41,a3,e4,49),
	HX_("set_paddingLeft",1b,7f,93,42),
	HX_("clearStyle_paddingLeft",dd,e2,8e,92),
	HX_("set_backgroundSkin",c8,78,b8,98),
	HX_("clearStyle_backgroundSkin",46,5a,f8,27),
	HX_("set_disabledBackgroundSkin",64,74,d4,6a),
	HX_("clearStyle_disabledBackgroundSkin",e2,03,2f,d1),
	HX_("set_fixedScrollBars",a4,0e,25,ec),
	HX_("clearStyle_fixedScrollBars",66,7b,ca,b4),
	HX_("set_autoHideScrollBars",db,e2,34,12),
	HX_("clearStyle_autoHideScrollBars",59,5b,f6,61),
	HX_("set_simulateTouch",de,00,b2,c2),
	HX_("clearStyle_simulateTouch",20,59,1f,93),
	HX_("set_elasticEdges",7e,f1,71,d3),
	HX_("clearStyle_elasticEdges",7c,d7,6d,7f),
	HX_("set_scrollBarXPosition",58,ea,c1,df),
	HX_("clearStyle_scrollBarXPosition",d6,62,83,2f),
	HX_("set_scrollBarYPosition",59,53,b3,b2),
	HX_("clearStyle_scrollBarYPosition",d7,cb,74,02),
	HX_("set_hideScrollBarDuration",7b,e8,ee,34),
	HX_("clearStyle_hideScrollBarDuration",bd,52,b1,18),
	HX_("set_hideScrollBarEase",95,05,d2,f8),
	HX_("clearStyle_hideScrollBarEase",d7,a6,3d,47),
	::String(null()) };

static void BaseScrollContainer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BaseScrollContainer_obj::INVALIDATION_FLAG_SCROLL_BAR_FACTORY,"INVALIDATION_FLAG_SCROLL_BAR_FACTORY");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BaseScrollContainer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BaseScrollContainer_obj::INVALIDATION_FLAG_SCROLL_BAR_FACTORY,"INVALIDATION_FLAG_SCROLL_BAR_FACTORY");
};

#endif

::hx::Class BaseScrollContainer_obj::__mClass;

static ::String BaseScrollContainer_obj_sStaticFields[] = {
	HX_("INVALIDATION_FLAG_SCROLL_BAR_FACTORY",3e,06,b0,07),
	HX_("defaultScrollBarXFactory",17,0b,29,b3),
	HX_("defaultScrollBarYFactory",36,7d,5b,ec),
	::String(null())
};

void BaseScrollContainer_obj::__register()
{
	BaseScrollContainer_obj _hx_dummy;
	BaseScrollContainer_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("feathers.controls.supportClasses.BaseScrollContainer",26,91,0b,bd);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BaseScrollContainer_obj::__GetStatic;
	__mClass->mSetStaticField = &BaseScrollContainer_obj::__SetStatic;
	__mClass->mMarkFunc = BaseScrollContainer_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(BaseScrollContainer_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BaseScrollContainer_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BaseScrollContainer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BaseScrollContainer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BaseScrollContainer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BaseScrollContainer_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void BaseScrollContainer_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_4200ed2106c74172_43_boot)
HXDLIN(  43)		INVALIDATION_FLAG_SCROLL_BAR_FACTORY = HX_("scrollBarFactory",a4,11,7a,90);
            	}
}

} // end namespace feathers
} // end namespace controls
} // end namespace supportClasses
