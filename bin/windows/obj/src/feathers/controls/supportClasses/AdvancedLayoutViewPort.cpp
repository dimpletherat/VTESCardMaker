// Generated by Haxe 4.1.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_feathers_controls_supportClasses_AdvancedLayoutViewPort
#include <feathers/controls/supportClasses/AdvancedLayoutViewPort.h>
#endif
#ifndef INCLUDED_feathers_controls_supportClasses_IViewPort
#include <feathers/controls/supportClasses/IViewPort.h>
#endif
#ifndef INCLUDED_feathers_core_FeathersControl
#include <feathers/core/FeathersControl.h>
#endif
#ifndef INCLUDED_feathers_core_IDisplayObject
#include <feathers/core/IDisplayObject.h>
#endif
#ifndef INCLUDED_feathers_core_IMeasureObject
#include <feathers/core/IMeasureObject.h>
#endif
#ifndef INCLUDED_feathers_core_IUIControl
#include <feathers/core/IUIControl.h>
#endif
#ifndef INCLUDED_feathers_core_IValidating
#include <feathers/core/IValidating.h>
#endif
#ifndef INCLUDED_feathers_core_MeasureSprite
#include <feathers/core/MeasureSprite.h>
#endif
#ifndef INCLUDED_feathers_core_ValidatingSprite
#include <feathers/core/ValidatingSprite.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayout
#include <feathers/layout/ILayout.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayoutObject
#include <feathers/layout/ILayoutObject.h>
#endif
#ifndef INCLUDED_feathers_layout_IScrollLayout
#include <feathers/layout/IScrollLayout.h>
#endif
#ifndef INCLUDED_feathers_layout_LayoutBoundsResult
#include <feathers/layout/LayoutBoundsResult.h>
#endif
#ifndef INCLUDED_feathers_layout_Measurements
#include <feathers/layout/Measurements.h>
#endif
#ifndef INCLUDED_feathers_style_IStyleObject
#include <feathers/style/IStyleObject.h>
#endif
#ifndef INCLUDED_feathers_style_IVariantStyleObject
#include <feathers/style/IVariantStyleObject.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_errors_ArgumentError
#include <openfl/errors/ArgumentError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_339c9bf22ce0a244_24_new,"feathers.controls.supportClasses.AdvancedLayoutViewPort","new",0x7bd0d021,"feathers.controls.supportClasses.AdvancedLayoutViewPort.new","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",24,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_47_get_minVisibleWidth,"feathers.controls.supportClasses.AdvancedLayoutViewPort","get_minVisibleWidth",0x9f7161be,"feathers.controls.supportClasses.AdvancedLayoutViewPort.get_minVisibleWidth","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",47,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_54_set_minVisibleWidth,"feathers.controls.supportClasses.AdvancedLayoutViewPort","set_minVisibleWidth",0xdc0e54ca,"feathers.controls.supportClasses.AdvancedLayoutViewPort.set_minVisibleWidth","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",54,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_78_set_maxVisibleWidth,"feathers.controls.supportClasses.AdvancedLayoutViewPort","set_maxVisibleWidth",0x8028a0dc,"feathers.controls.supportClasses.AdvancedLayoutViewPort.set_maxVisibleWidth","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",78,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_102_get_visibleWidth,"feathers.controls.supportClasses.AdvancedLayoutViewPort","get_visibleWidth",0xb642385c,"feathers.controls.supportClasses.AdvancedLayoutViewPort.get_visibleWidth","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",102,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_109_set_visibleWidth,"feathers.controls.supportClasses.AdvancedLayoutViewPort","set_visibleWidth",0x0c8425d0,"feathers.controls.supportClasses.AdvancedLayoutViewPort.set_visibleWidth","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",109,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_128_get_minVisibleHeight,"feathers.controls.supportClasses.AdvancedLayoutViewPort","get_minVisibleHeight",0x9a139d2f,"feathers.controls.supportClasses.AdvancedLayoutViewPort.get_minVisibleHeight","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",128,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_135_set_minVisibleHeight,"feathers.controls.supportClasses.AdvancedLayoutViewPort","set_minVisibleHeight",0x66cb54a3,"feathers.controls.supportClasses.AdvancedLayoutViewPort.set_minVisibleHeight","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",135,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_160_get_maxVisibleHeight,"feathers.controls.supportClasses.AdvancedLayoutViewPort","get_maxVisibleHeight",0x8cfbe0dd,"feathers.controls.supportClasses.AdvancedLayoutViewPort.get_maxVisibleHeight","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",160,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_163_set_maxVisibleHeight,"feathers.controls.supportClasses.AdvancedLayoutViewPort","set_maxVisibleHeight",0x59b39851,"feathers.controls.supportClasses.AdvancedLayoutViewPort.set_maxVisibleHeight","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",163,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_187_get_visibleHeight,"feathers.controls.supportClasses.AdvancedLayoutViewPort","get_visibleHeight",0x79fe90d1,"feathers.controls.supportClasses.AdvancedLayoutViewPort.get_visibleHeight","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",187,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_194_set_visibleHeight,"feathers.controls.supportClasses.AdvancedLayoutViewPort","set_visibleHeight",0x9d6c68dd,"feathers.controls.supportClasses.AdvancedLayoutViewPort.set_visibleHeight","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",194,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_207_set_layout,"feathers.controls.supportClasses.AdvancedLayoutViewPort","set_layout",0xd776a746,"feathers.controls.supportClasses.AdvancedLayoutViewPort.set_layout","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",207,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_229_get_requiresMeasurementOnScroll,"feathers.controls.supportClasses.AdvancedLayoutViewPort","get_requiresMeasurementOnScroll",0x3b6676b2,"feathers.controls.supportClasses.AdvancedLayoutViewPort.get_requiresMeasurementOnScroll","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",229,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_247_get_scrollX,"feathers.controls.supportClasses.AdvancedLayoutViewPort","get_scrollX",0x8de6bc83,"feathers.controls.supportClasses.AdvancedLayoutViewPort.get_scrollX","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",247,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_250_set_scrollX,"feathers.controls.supportClasses.AdvancedLayoutViewPort","set_scrollX",0x9853c38f,"feathers.controls.supportClasses.AdvancedLayoutViewPort.set_scrollX","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",250,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_266_get_scrollY,"feathers.controls.supportClasses.AdvancedLayoutViewPort","get_scrollY",0x8de6bc84,"feathers.controls.supportClasses.AdvancedLayoutViewPort.get_scrollY","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",266,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_269_set_scrollY,"feathers.controls.supportClasses.AdvancedLayoutViewPort","set_scrollY",0x9853c390,"feathers.controls.supportClasses.AdvancedLayoutViewPort.set_scrollY","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",269,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_278___default_refreshChildren,"feathers.controls.supportClasses.AdvancedLayoutViewPort","__default_refreshChildren",0xd66a98dd,"feathers.controls.supportClasses.AdvancedLayoutViewPort.__default_refreshChildren","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",278,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_280_update,"feathers.controls.supportClasses.AdvancedLayoutViewPort","update",0x6e0414e8,"feathers.controls.supportClasses.AdvancedLayoutViewPort.update","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",280,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_288_refreshLayoutProperties,"feathers.controls.supportClasses.AdvancedLayoutViewPort","refreshLayoutProperties",0x50928979,"feathers.controls.supportClasses.AdvancedLayoutViewPort.refreshLayoutProperties","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",288,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_299_refreshLayoutMeasurements,"feathers.controls.supportClasses.AdvancedLayoutViewPort","refreshLayoutMeasurements",0x06fe2ffd,"feathers.controls.supportClasses.AdvancedLayoutViewPort.refreshLayoutMeasurements","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",299,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_330_handleLayoutResult,"feathers.controls.supportClasses.AdvancedLayoutViewPort","handleLayoutResult",0x662c744e,"feathers.controls.supportClasses.AdvancedLayoutViewPort.handleLayoutResult","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",330,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_347_layout_changeHandler,"feathers.controls.supportClasses.AdvancedLayoutViewPort","layout_changeHandler",0x46acbfc4,"feathers.controls.supportClasses.AdvancedLayoutViewPort.layout_changeHandler","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",347,0xbf058c2e)
namespace feathers{
namespace controls{
namespace supportClasses{

void AdvancedLayoutViewPort_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_339c9bf22ce0a244_24_new)
HXLINE( 263)		this->scrollY = ((Float)0.0);
HXLINE( 244)		this->scrollX = ((Float)0.0);
HXLINE( 238)		this->_ignoreLayoutChanges = false;
HXLINE( 237)		this->_layoutResult =  ::feathers::layout::LayoutBoundsResult_obj::__alloc( HX_CTX );
HXLINE( 236)		this->_layoutMeasurements =  ::feathers::layout::Measurements_obj::__alloc( HX_CTX ,null());
HXLINE( 222)		this->_layoutItems = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 180)		this->_explicitVisibleHeight = null();
HXLINE( 179)		this->_actualVisibleHeight = ((Float)0.0);
HXLINE( 157)		this->maxVisibleHeight = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 120)		this->_actualMinVisibleHeight = ((Float)0.0);
HXLINE(  95)		this->_explicitVisibleWidth = null();
HXLINE(  94)		this->_actualVisibleWidth = ((Float)0.0);
HXLINE(  76)		this->maxVisibleWidth = ::Math_obj::POSITIVE_INFINITY;
HXLINE(  40)		this->_explicitMinVisibleWidth = null();
HXLINE(  39)		this->_actualMinVisibleWidth = ((Float)0.0);
HXLINE(  26)		super::__construct();
HXLINE(  30)		this->_background =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE(  31)		this->_background->get_graphics()->beginFill(16711935,((Float)0.0));
HXLINE(  32)		this->_background->get_graphics()->drawRect(((Float)0.0),((Float)0.0),((Float)1.0),((Float)1.0));
HXLINE(  33)		this->_background->get_graphics()->endFill();
HXLINE(  34)		this->addChild(this->_background);
            	}

Dynamic AdvancedLayoutViewPort_obj::__CreateEmpty() { return new AdvancedLayoutViewPort_obj; }

void *AdvancedLayoutViewPort_obj::_hx_vtable = 0;

Dynamic AdvancedLayoutViewPort_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AdvancedLayoutViewPort_obj > _hx_result = new AdvancedLayoutViewPort_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool AdvancedLayoutViewPort_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2d343e6f) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x093ab78b) {
				if (inClassId<=(int)0x0330636f) {
					return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
				} else {
					return inClassId==(int)0x093ab78b;
				}
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x2d343e6f;
		}
	} else {
		if (inClassId<=(int)0x58123034) {
			if (inClassId<=(int)0x4af7dd8e) {
				return inClassId==(int)0x4033f4be || inClassId==(int)0x4af7dd8e;
			} else {
				return inClassId==(int)0x58123034;
			}
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

static ::feathers::controls::supportClasses::IViewPort_obj _hx_feathers_controls_supportClasses_AdvancedLayoutViewPort__hx_feathers_controls_supportClasses_IViewPort= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_scaleY,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_alpha,
	( bool (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_visible,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_explicitWidth,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_explicitHeight,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_explicitMinWidth,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_explicitMinHeight,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_explicitMaxWidth,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_explicitMaxHeight,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_minWidth,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_minWidth,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_minHeight,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_minHeight,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_maxWidth,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_maxWidth,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_maxHeight,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_maxHeight,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::resetWidth,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::resetHeight,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::resetMinWidth,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::resetMinHeight,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::resetMaxWidth,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::resetMaxHeight,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_visibleWidth,
	(  ::Dynamic (::hx::Object::*)( ::Dynamic))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_visibleWidth,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_visibleHeight,
	(  ::Dynamic (::hx::Object::*)( ::Dynamic))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_visibleHeight,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_minVisibleWidth,
	(  ::Dynamic (::hx::Object::*)( ::Dynamic))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_minVisibleWidth,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_minVisibleHeight,
	(  ::Dynamic (::hx::Object::*)( ::Dynamic))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_minVisibleHeight,
	(  ::Dynamic (::hx::Object::*)( ::Dynamic))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_maxVisibleWidth,
	(  ::Dynamic (::hx::Object::*)( ::Dynamic))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_maxVisibleHeight,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_scrollX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_scrollX,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_scrollY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_scrollY,
	( bool (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_requiresMeasurementOnScroll,
};

static ::openfl::events::IEventDispatcher_obj _hx_feathers_controls_supportClasses_AdvancedLayoutViewPort__hx_openfl_events_IEventDispatcher= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::willTrigger,
};

static ::feathers::core::IMeasureObject_obj _hx_feathers_controls_supportClasses_AdvancedLayoutViewPort__hx_feathers_core_IMeasureObject= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_scaleY,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_alpha,
	( bool (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_visible,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_explicitWidth,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_explicitHeight,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_explicitMinWidth,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_explicitMinHeight,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_explicitMaxWidth,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_explicitMaxHeight,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_minWidth,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_minWidth,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_minHeight,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_minHeight,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_maxWidth,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_maxWidth,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_maxHeight,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_maxHeight,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::resetWidth,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::resetHeight,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::resetMinWidth,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::resetMinHeight,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::resetMaxWidth,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::resetMaxHeight,
};

static ::feathers::core::IValidating_obj _hx_feathers_controls_supportClasses_AdvancedLayoutViewPort__hx_feathers_core_IValidating= {
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::validateNow,
};

static ::feathers::core::IUIControl_obj _hx_feathers_controls_supportClasses_AdvancedLayoutViewPort__hx_feathers_core_IUIControl= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_scaleY,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_alpha,
	( bool (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_visible,
	( bool (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_enabled,
	( bool (::hx::Object::*)(bool))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_enabled,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::initializeNow,
};

static ::feathers::core::IDisplayObject_obj _hx_feathers_controls_supportClasses_AdvancedLayoutViewPort__hx_feathers_core_IDisplayObject= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_scaleY,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_alpha,
	( bool (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_visible,
};

void *AdvancedLayoutViewPort_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xd5cd7712: return &_hx_feathers_controls_supportClasses_AdvancedLayoutViewPort__hx_feathers_controls_supportClasses_IViewPort;
		case (int)0x87530281: return &_hx_feathers_controls_supportClasses_AdvancedLayoutViewPort__hx_openfl_events_IEventDispatcher;
		case (int)0xcfc32883: return &_hx_feathers_controls_supportClasses_AdvancedLayoutViewPort__hx_feathers_core_IMeasureObject;
		case (int)0x64d4b3cd: return &_hx_feathers_controls_supportClasses_AdvancedLayoutViewPort__hx_feathers_core_IValidating;
		case (int)0x2696a04f: return &_hx_feathers_controls_supportClasses_AdvancedLayoutViewPort__hx_feathers_core_IUIControl;
		case (int)0x3a979a67: return &_hx_feathers_controls_supportClasses_AdvancedLayoutViewPort__hx_feathers_core_IDisplayObject;
	}
	return super::_hx_getInterface(inHash);
}

 ::Dynamic AdvancedLayoutViewPort_obj::get_minVisibleWidth(){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_47_get_minVisibleWidth)
HXLINE(  48)		if (::hx::IsNull( this->_explicitMinVisibleWidth )) {
HXLINE(  49)			return this->_actualMinVisibleWidth;
            		}
HXLINE(  51)		return this->_explicitMinVisibleWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AdvancedLayoutViewPort_obj,get_minVisibleWidth,return )

 ::Dynamic AdvancedLayoutViewPort_obj::set_minVisibleWidth( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_54_set_minVisibleWidth)
HXLINE(  55)		if (::hx::IsEq( this->_explicitMinVisibleWidth,value )) {
HXLINE(  56)			return this->_explicitMinVisibleWidth;
            		}
HXLINE(  58)		 ::Dynamic oldValue = this->_explicitMinVisibleWidth;
HXLINE(  59)		this->_explicitMinVisibleWidth = value;
HXLINE(  60)		if (::hx::IsNull( value )) {
HXLINE(  61)			this->_actualMinVisibleWidth = ((Float)0.0);
HXLINE(  62)			this->setInvalid(HX_("size",c1,a0,53,4c));
            		}
            		else {
HXLINE(  64)			this->_actualMinVisibleWidth = ( (Float)(value) );
HXLINE(  65)			bool _hx_tmp;
HXDLIN(  65)			if (::hx::IsNull( this->_explicitVisibleWidth )) {
HXLINE(  65)				if (!(::hx::IsLess( this->_actualVisibleWidth,value ))) {
HXLINE(  65)					_hx_tmp = ::hx::IsEq( this->_actualVisibleWidth,oldValue );
            				}
            				else {
HXLINE(  65)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE(  65)				_hx_tmp = false;
            			}
HXDLIN(  65)			if (_hx_tmp) {
HXLINE(  67)				this->setInvalid(HX_("size",c1,a0,53,4c));
            			}
            		}
HXLINE(  70)		return this->_explicitMinVisibleWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AdvancedLayoutViewPort_obj,set_minVisibleWidth,return )

 ::Dynamic AdvancedLayoutViewPort_obj::set_maxVisibleWidth( ::Dynamic value){
            	HX_GC_STACKFRAME(&_hx_pos_339c9bf22ce0a244_78_set_maxVisibleWidth)
HXLINE(  79)		if (::hx::IsEq( this->maxVisibleWidth,value )) {
HXLINE(  80)			return this->maxVisibleWidth;
            		}
HXLINE(  82)		if (::hx::IsNull( value )) {
HXLINE(  83)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("maxVisibleWidth cannot be null",0f,a6,fe,b9))));
            		}
HXLINE(  85)		 ::Dynamic oldValue = this->maxVisibleWidth;
HXLINE(  86)		this->maxVisibleWidth = value;
HXLINE(  87)		bool _hx_tmp;
HXDLIN(  87)		if (::hx::IsNull( this->_explicitVisibleWidth )) {
HXLINE(  87)			if (!(::hx::IsGreater( this->_actualVisibleWidth,value ))) {
HXLINE(  87)				_hx_tmp = ::hx::IsEq( this->_actualVisibleWidth,oldValue );
            			}
            			else {
HXLINE(  87)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE(  87)			_hx_tmp = false;
            		}
HXDLIN(  87)		if (_hx_tmp) {
HXLINE(  89)			this->setInvalid(HX_("size",c1,a0,53,4c));
            		}
HXLINE(  91)		return this->maxVisibleWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AdvancedLayoutViewPort_obj,set_maxVisibleWidth,return )

 ::Dynamic AdvancedLayoutViewPort_obj::get_visibleWidth(){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_102_get_visibleWidth)
HXLINE( 103)		if (::hx::IsNull( this->_explicitVisibleWidth )) {
HXLINE( 104)			return this->_actualVisibleWidth;
            		}
HXLINE( 106)		return this->_explicitVisibleWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AdvancedLayoutViewPort_obj,get_visibleWidth,return )

 ::Dynamic AdvancedLayoutViewPort_obj::set_visibleWidth( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_109_set_visibleWidth)
HXLINE( 110)		if (::hx::IsEq( this->_explicitVisibleWidth,value )) {
HXLINE( 111)			return this->_explicitVisibleWidth;
            		}
HXLINE( 113)		this->_explicitVisibleWidth = value;
HXLINE( 114)		if (::hx::IsNotEq( this->_actualVisibleWidth,value )) {
HXLINE( 115)			this->setInvalid(HX_("size",c1,a0,53,4c));
            		}
HXLINE( 117)		return this->_explicitVisibleWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AdvancedLayoutViewPort_obj,set_visibleWidth,return )

 ::Dynamic AdvancedLayoutViewPort_obj::get_minVisibleHeight(){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_128_get_minVisibleHeight)
HXLINE( 129)		if (::hx::IsNull( this->_explicitMinVisibleHeight )) {
HXLINE( 130)			return this->_actualMinVisibleHeight;
            		}
HXLINE( 132)		return this->_explicitMinVisibleHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AdvancedLayoutViewPort_obj,get_minVisibleHeight,return )

 ::Dynamic AdvancedLayoutViewPort_obj::set_minVisibleHeight( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_135_set_minVisibleHeight)
HXLINE( 136)		if (::hx::IsEq( this->_explicitMinVisibleHeight,value )) {
HXLINE( 137)			return this->_explicitMinVisibleHeight;
            		}
HXLINE( 139)		 ::Dynamic oldValue = this->_explicitMinVisibleHeight;
HXLINE( 140)		this->_explicitMinVisibleHeight = value;
HXLINE( 141)		if (::hx::IsNull( value )) {
HXLINE( 142)			this->_actualMinVisibleHeight = ((Float)0.0);
HXLINE( 143)			this->setInvalid(HX_("size",c1,a0,53,4c));
            		}
            		else {
HXLINE( 145)			this->_actualMinVisibleHeight = ( (Float)(value) );
HXLINE( 146)			bool _hx_tmp;
HXDLIN( 146)			if (::hx::IsNull( this->_explicitVisibleHeight )) {
HXLINE( 146)				if (!(::hx::IsLess( this->_actualVisibleHeight,value ))) {
HXLINE( 146)					_hx_tmp = ::hx::IsEq( this->_actualVisibleHeight,oldValue );
            				}
            				else {
HXLINE( 146)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE( 146)				_hx_tmp = false;
            			}
HXDLIN( 146)			if (_hx_tmp) {
HXLINE( 148)				this->setInvalid(HX_("size",c1,a0,53,4c));
            			}
            		}
HXLINE( 151)		return this->_explicitMinVisibleHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AdvancedLayoutViewPort_obj,set_minVisibleHeight,return )

 ::Dynamic AdvancedLayoutViewPort_obj::get_maxVisibleHeight(){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_160_get_maxVisibleHeight)
HXDLIN( 160)		return this->maxVisibleHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AdvancedLayoutViewPort_obj,get_maxVisibleHeight,return )

 ::Dynamic AdvancedLayoutViewPort_obj::set_maxVisibleHeight( ::Dynamic value){
            	HX_GC_STACKFRAME(&_hx_pos_339c9bf22ce0a244_163_set_maxVisibleHeight)
HXLINE( 164)		if (::hx::IsEq( this->maxVisibleHeight,value )) {
HXLINE( 165)			return this->maxVisibleHeight;
            		}
HXLINE( 167)		if (::hx::IsNull( value )) {
HXLINE( 168)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("maxVisibleHeight cannot be null",f2,2a,d1,66))));
            		}
HXLINE( 170)		 ::Dynamic oldValue = this->maxVisibleHeight;
HXLINE( 171)		this->maxVisibleHeight = value;
HXLINE( 172)		bool _hx_tmp;
HXDLIN( 172)		if (::hx::IsNull( this->_explicitVisibleHeight )) {
HXLINE( 172)			if (!(::hx::IsGreater( this->_actualVisibleHeight,value ))) {
HXLINE( 172)				_hx_tmp = ::hx::IsEq( this->_actualVisibleHeight,oldValue );
            			}
            			else {
HXLINE( 172)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE( 172)			_hx_tmp = false;
            		}
HXDLIN( 172)		if (_hx_tmp) {
HXLINE( 174)			this->setInvalid(HX_("size",c1,a0,53,4c));
            		}
HXLINE( 176)		return this->maxVisibleHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AdvancedLayoutViewPort_obj,set_maxVisibleHeight,return )

 ::Dynamic AdvancedLayoutViewPort_obj::get_visibleHeight(){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_187_get_visibleHeight)
HXLINE( 188)		if (::hx::IsNull( this->_explicitVisibleHeight )) {
HXLINE( 189)			return this->_actualVisibleHeight;
            		}
HXLINE( 191)		return this->_explicitVisibleHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AdvancedLayoutViewPort_obj,get_visibleHeight,return )

 ::Dynamic AdvancedLayoutViewPort_obj::set_visibleHeight( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_194_set_visibleHeight)
HXLINE( 195)		if (::hx::IsEq( this->_explicitVisibleHeight,value )) {
HXLINE( 196)			return this->_explicitVisibleHeight;
            		}
HXLINE( 198)		this->_explicitVisibleHeight = value;
HXLINE( 199)		if (::hx::IsNotEq( this->_actualVisibleHeight,value )) {
HXLINE( 200)			this->setInvalid(HX_("size",c1,a0,53,4c));
            		}
HXLINE( 202)		return this->_explicitVisibleWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AdvancedLayoutViewPort_obj,set_visibleHeight,return )

::Dynamic AdvancedLayoutViewPort_obj::set_layout(::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_207_set_layout)
HXLINE( 208)		if (::hx::IsEq( this->layout,value )) {
HXLINE( 209)			return this->layout;
            		}
HXLINE( 211)		if (::hx::IsNotNull( this->layout )) {
HXLINE( 212)			::openfl::events::IEventDispatcher_obj::removeEventListener(this->layout,HX_("change",70,91,72,b7),this->layout_changeHandler_dyn(),null());
            		}
HXLINE( 214)		this->layout = value;
HXLINE( 215)		if (::hx::IsNotNull( this->layout )) {
HXLINE( 216)			::openfl::events::IEventDispatcher_obj::addEventListener(this->layout,HX_("change",70,91,72,b7),this->layout_changeHandler_dyn(),null(),null(),null());
            		}
HXLINE( 218)		this->setInvalid(HX_("layout",aa,ae,b8,58));
HXLINE( 219)		return this->layout;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AdvancedLayoutViewPort_obj,set_layout,return )

bool AdvancedLayoutViewPort_obj::get_requiresMeasurementOnScroll(){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_229_get_requiresMeasurementOnScroll)
HXLINE( 230)		if (!(::Std_obj::isOfType(this->layout,( ( ::Dynamic)(::hx::ClassOf< ::feathers::layout::IScrollLayout >()) )))) {
HXLINE( 231)			return false;
            		}
HXLINE( 233)		return ::feathers::layout::IScrollLayout_obj::get_requiresLayoutOnScroll(this->layout);
            	}


HX_DEFINE_DYNAMIC_FUNC0(AdvancedLayoutViewPort_obj,get_requiresMeasurementOnScroll,return )

Float AdvancedLayoutViewPort_obj::get_scrollX(){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_247_get_scrollX)
HXDLIN( 247)		return this->scrollX;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AdvancedLayoutViewPort_obj,get_scrollX,return )

Float AdvancedLayoutViewPort_obj::set_scrollX(Float value){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_250_set_scrollX)
HXLINE( 251)		if ((this->get_scrollX() == value)) {
HXLINE( 252)			return this->get_scrollX();
            		}
HXLINE( 254)		this->scrollX = value;
HXLINE( 255)		this->setInvalid(HX_("scroll",0d,d8,64,47));
HXLINE( 256)		return this->get_scrollX();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AdvancedLayoutViewPort_obj,set_scrollX,return )

Float AdvancedLayoutViewPort_obj::get_scrollY(){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_266_get_scrollY)
HXDLIN( 266)		return this->scrollY;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AdvancedLayoutViewPort_obj,get_scrollY,return )

Float AdvancedLayoutViewPort_obj::set_scrollY(Float value){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_269_set_scrollY)
HXLINE( 270)		if ((this->get_scrollY() == value)) {
HXLINE( 271)			return this->get_scrollY();
            		}
HXLINE( 273)		this->scrollY = value;
HXLINE( 274)		this->setInvalid(HX_("scroll",0d,d8,64,47));
HXLINE( 275)		return this->get_scrollY();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AdvancedLayoutViewPort_obj,set_scrollY,return )

HX_BEGIN_DEFAULT_FUNC(__default_refreshChildren,AdvancedLayoutViewPort_obj)
void _hx_run(::Array< ::Dynamic> items){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_278___default_refreshChildren)
            	}
HX_END_LOCAL_FUNC1((void))
HX_END_DEFAULT_FUNC

void AdvancedLayoutViewPort_obj::update(){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_280_update)
HXLINE( 281)		this->refreshLayoutMeasurements();
HXLINE( 282)		this->refreshLayoutProperties();
HXLINE( 283)		this->refreshChildren(this->_layoutItems);
HXLINE( 284)		::feathers::layout::ILayout_obj::layout(this->layout,this->_layoutItems,this->_layoutMeasurements,this->_layoutResult);
HXLINE( 285)		this->handleLayoutResult();
            	}


void AdvancedLayoutViewPort_obj::refreshLayoutProperties(){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_288_refreshLayoutProperties)
HXLINE( 289)		bool oldIgnoreLayoutChanges = this->_ignoreLayoutChanges;
HXLINE( 290)		this->_ignoreLayoutChanges = true;
HXLINE( 291)		if (::Std_obj::isOfType(this->layout,( ( ::Dynamic)(::hx::ClassOf< ::feathers::layout::IScrollLayout >()) ))) {
HXLINE( 292)			::Dynamic scrollLayout = this->layout;
HXLINE( 293)			::feathers::layout::IScrollLayout_obj::set_scrollX(scrollLayout,this->get_scrollX());
HXLINE( 294)			::feathers::layout::IScrollLayout_obj::set_scrollY(scrollLayout,this->get_scrollY());
            		}
HXLINE( 296)		this->_ignoreLayoutChanges = oldIgnoreLayoutChanges;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AdvancedLayoutViewPort_obj,refreshLayoutProperties,(void))

void AdvancedLayoutViewPort_obj::refreshLayoutMeasurements(){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_299_refreshLayoutMeasurements)
HXLINE( 300)		bool needsMinWidth = ::hx::IsNull( this->_explicitMinVisibleWidth );
HXLINE( 301)		bool needsMinHeight = ::hx::IsNull( this->_explicitMinVisibleHeight );
HXLINE( 302)		bool needsMaxWidth = ::hx::IsNull( this->maxVisibleWidth );
HXLINE( 303)		bool needsMaxHeight = ::hx::IsNull( this->maxVisibleHeight );
HXLINE( 305)		this->_layoutMeasurements->width = this->_explicitVisibleWidth;
HXLINE( 306)		this->_layoutMeasurements->height = this->_explicitVisibleHeight;
HXLINE( 308)		 ::Dynamic viewPortMinWidth = this->_explicitMinVisibleWidth;
HXLINE( 309)		if (needsMinWidth) {
HXLINE( 310)			viewPortMinWidth = ((Float)0.0);
            		}
HXLINE( 312)		 ::Dynamic viewPortMinHeight = this->_explicitMinVisibleHeight;
HXLINE( 313)		if (needsMinHeight) {
HXLINE( 314)			viewPortMinHeight = ((Float)0.0);
            		}
HXLINE( 316)		 ::Dynamic viewPortMaxWidth = this->maxVisibleWidth;
HXLINE( 317)		if (needsMaxWidth) {
HXLINE( 318)			viewPortMaxWidth = ::Math_obj::POSITIVE_INFINITY;
            		}
HXLINE( 320)		 ::Dynamic viewPortMaxHeight = this->maxVisibleHeight;
HXLINE( 321)		if (needsMaxHeight) {
HXLINE( 322)			viewPortMaxHeight = ::Math_obj::POSITIVE_INFINITY;
            		}
HXLINE( 324)		this->_layoutMeasurements->minWidth = viewPortMinWidth;
HXLINE( 325)		this->_layoutMeasurements->minHeight = viewPortMinHeight;
HXLINE( 326)		this->_layoutMeasurements->maxWidth = viewPortMaxWidth;
HXLINE( 327)		this->_layoutMeasurements->maxHeight = viewPortMaxHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AdvancedLayoutViewPort_obj,refreshLayoutMeasurements,(void))

void AdvancedLayoutViewPort_obj::handleLayoutResult(){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_330_handleLayoutResult)
HXLINE( 331)		Float contentWidth = this->_layoutResult->contentWidth;
HXLINE( 332)		Float contentHeight = this->_layoutResult->contentHeight;
HXLINE( 333)		this->saveMeasurements(contentWidth,contentHeight,contentWidth,contentHeight,::Math_obj::POSITIVE_INFINITY,::Math_obj::POSITIVE_INFINITY);
HXLINE( 334)		Float viewPortWidth = this->_layoutResult->viewPortWidth;
HXLINE( 335)		Float viewPortHeight = this->_layoutResult->viewPortHeight;
HXLINE( 336)		this->_actualVisibleWidth = viewPortWidth;
HXLINE( 337)		this->_actualVisibleHeight = viewPortHeight;
HXLINE( 338)		this->_actualMinVisibleWidth = viewPortWidth;
HXLINE( 339)		this->_actualMinVisibleHeight = viewPortHeight;
HXLINE( 341)		this->_background->set_x(((Float)0.0));
HXLINE( 342)		this->_background->set_y(((Float)0.0));
HXLINE( 343)		this->_background->set_width(this->actualWidth);
HXLINE( 344)		this->_background->set_height(this->actualHeight);
            	}


HX_DEFINE_DYNAMIC_FUNC0(AdvancedLayoutViewPort_obj,handleLayoutResult,(void))

void AdvancedLayoutViewPort_obj::layout_changeHandler( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_347_layout_changeHandler)
HXLINE( 348)		if (this->_ignoreLayoutChanges) {
HXLINE( 349)			return;
            		}
HXLINE( 351)		this->setInvalid(HX_("layout",aa,ae,b8,58));
            	}


HX_DEFINE_DYNAMIC_FUNC1(AdvancedLayoutViewPort_obj,layout_changeHandler,(void))


void AdvancedLayoutViewPort_obj::__alloc_dynamic_functions(::hx::Ctx *_hx_ctx,AdvancedLayoutViewPort_obj *_hx_obj) {
	if (!_hx_obj->refreshChildren.mPtr) _hx_obj->refreshChildren = new __default_refreshChildren(_hx_obj);
}
::hx::ObjectPtr< AdvancedLayoutViewPort_obj > AdvancedLayoutViewPort_obj::__new() {
	::hx::ObjectPtr< AdvancedLayoutViewPort_obj > __this = new AdvancedLayoutViewPort_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< AdvancedLayoutViewPort_obj > AdvancedLayoutViewPort_obj::__alloc(::hx::Ctx *_hx_ctx) {
	AdvancedLayoutViewPort_obj *__this = (AdvancedLayoutViewPort_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(AdvancedLayoutViewPort_obj), true, "feathers.controls.supportClasses.AdvancedLayoutViewPort"));
	*(void **)__this = AdvancedLayoutViewPort_obj::_hx_vtable;
	feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::__alloc_dynamic_functions(_hx_ctx,__this);
	__this->__construct();
	return __this;
}

AdvancedLayoutViewPort_obj::AdvancedLayoutViewPort_obj()
{
	refreshChildren = new __default_refreshChildren(this);
}

void AdvancedLayoutViewPort_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AdvancedLayoutViewPort);
	HX_MARK_MEMBER_NAME(_background,"_background");
	HX_MARK_MEMBER_NAME(_actualMinVisibleWidth,"_actualMinVisibleWidth");
	HX_MARK_MEMBER_NAME(_explicitMinVisibleWidth,"_explicitMinVisibleWidth");
	HX_MARK_MEMBER_NAME(maxVisibleWidth,"maxVisibleWidth");
	HX_MARK_MEMBER_NAME(_actualVisibleWidth,"_actualVisibleWidth");
	HX_MARK_MEMBER_NAME(_explicitVisibleWidth,"_explicitVisibleWidth");
	HX_MARK_MEMBER_NAME(_actualMinVisibleHeight,"_actualMinVisibleHeight");
	HX_MARK_MEMBER_NAME(_explicitMinVisibleHeight,"_explicitMinVisibleHeight");
	HX_MARK_MEMBER_NAME(maxVisibleHeight,"maxVisibleHeight");
	HX_MARK_MEMBER_NAME(_actualVisibleHeight,"_actualVisibleHeight");
	HX_MARK_MEMBER_NAME(_explicitVisibleHeight,"_explicitVisibleHeight");
	HX_MARK_MEMBER_NAME(layout,"layout");
	HX_MARK_MEMBER_NAME(_layoutItems,"_layoutItems");
	HX_MARK_MEMBER_NAME(_layoutMeasurements,"_layoutMeasurements");
	HX_MARK_MEMBER_NAME(_layoutResult,"_layoutResult");
	HX_MARK_MEMBER_NAME(_ignoreLayoutChanges,"_ignoreLayoutChanges");
	HX_MARK_MEMBER_NAME(scrollX,"scrollX");
	HX_MARK_MEMBER_NAME(scrollY,"scrollY");
	HX_MARK_MEMBER_NAME(refreshChildren,"refreshChildren");
	 ::feathers::core::FeathersControl_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void AdvancedLayoutViewPort_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_background,"_background");
	HX_VISIT_MEMBER_NAME(_actualMinVisibleWidth,"_actualMinVisibleWidth");
	HX_VISIT_MEMBER_NAME(_explicitMinVisibleWidth,"_explicitMinVisibleWidth");
	HX_VISIT_MEMBER_NAME(maxVisibleWidth,"maxVisibleWidth");
	HX_VISIT_MEMBER_NAME(_actualVisibleWidth,"_actualVisibleWidth");
	HX_VISIT_MEMBER_NAME(_explicitVisibleWidth,"_explicitVisibleWidth");
	HX_VISIT_MEMBER_NAME(_actualMinVisibleHeight,"_actualMinVisibleHeight");
	HX_VISIT_MEMBER_NAME(_explicitMinVisibleHeight,"_explicitMinVisibleHeight");
	HX_VISIT_MEMBER_NAME(maxVisibleHeight,"maxVisibleHeight");
	HX_VISIT_MEMBER_NAME(_actualVisibleHeight,"_actualVisibleHeight");
	HX_VISIT_MEMBER_NAME(_explicitVisibleHeight,"_explicitVisibleHeight");
	HX_VISIT_MEMBER_NAME(layout,"layout");
	HX_VISIT_MEMBER_NAME(_layoutItems,"_layoutItems");
	HX_VISIT_MEMBER_NAME(_layoutMeasurements,"_layoutMeasurements");
	HX_VISIT_MEMBER_NAME(_layoutResult,"_layoutResult");
	HX_VISIT_MEMBER_NAME(_ignoreLayoutChanges,"_ignoreLayoutChanges");
	HX_VISIT_MEMBER_NAME(scrollX,"scrollX");
	HX_VISIT_MEMBER_NAME(scrollY,"scrollY");
	HX_VISIT_MEMBER_NAME(refreshChildren,"refreshChildren");
	 ::feathers::core::FeathersControl_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val AdvancedLayoutViewPort_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"layout") ) { return ::hx::Val( layout ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollX") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_scrollX() : scrollX ); }
		if (HX_FIELD_EQ(inName,"scrollY") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_scrollY() : scrollY ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"set_layout") ) { return ::hx::Val( set_layout_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_background") ) { return ::hx::Val( _background ); }
		if (HX_FIELD_EQ(inName,"get_scrollX") ) { return ::hx::Val( get_scrollX_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollX") ) { return ::hx::Val( set_scrollX_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scrollY") ) { return ::hx::Val( get_scrollY_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollY") ) { return ::hx::Val( set_scrollY_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"visibleWidth") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_visibleWidth() ); }
		if (HX_FIELD_EQ(inName,"_layoutItems") ) { return ::hx::Val( _layoutItems ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"visibleHeight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_visibleHeight() ); }
		if (HX_FIELD_EQ(inName,"_layoutResult") ) { return ::hx::Val( _layoutResult ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"minVisibleWidth") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_minVisibleWidth() ); }
		if (HX_FIELD_EQ(inName,"maxVisibleWidth") ) { return ::hx::Val( maxVisibleWidth ); }
		if (HX_FIELD_EQ(inName,"refreshChildren") ) { return ::hx::Val( refreshChildren ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_visibleWidth") ) { return ::hx::Val( get_visibleWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_visibleWidth") ) { return ::hx::Val( set_visibleWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"minVisibleHeight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_minVisibleHeight() ); }
		if (HX_FIELD_EQ(inName,"maxVisibleHeight") ) { return ::hx::Val( maxVisibleHeight ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_visibleHeight") ) { return ::hx::Val( get_visibleHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_visibleHeight") ) { return ::hx::Val( set_visibleHeight_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"handleLayoutResult") ) { return ::hx::Val( handleLayoutResult_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"get_minVisibleWidth") ) { return ::hx::Val( get_minVisibleWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_minVisibleWidth") ) { return ::hx::Val( set_minVisibleWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_maxVisibleWidth") ) { return ::hx::Val( set_maxVisibleWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"_actualVisibleWidth") ) { return ::hx::Val( _actualVisibleWidth ); }
		if (HX_FIELD_EQ(inName,"_layoutMeasurements") ) { return ::hx::Val( _layoutMeasurements ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"get_minVisibleHeight") ) { return ::hx::Val( get_minVisibleHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_minVisibleHeight") ) { return ::hx::Val( set_minVisibleHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxVisibleHeight") ) { return ::hx::Val( get_maxVisibleHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_maxVisibleHeight") ) { return ::hx::Val( set_maxVisibleHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"_actualVisibleHeight") ) { return ::hx::Val( _actualVisibleHeight ); }
		if (HX_FIELD_EQ(inName,"_ignoreLayoutChanges") ) { return ::hx::Val( _ignoreLayoutChanges ); }
		if (HX_FIELD_EQ(inName,"layout_changeHandler") ) { return ::hx::Val( layout_changeHandler_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_explicitVisibleWidth") ) { return ::hx::Val( _explicitVisibleWidth ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_actualMinVisibleWidth") ) { return ::hx::Val( _actualMinVisibleWidth ); }
		if (HX_FIELD_EQ(inName,"_explicitVisibleHeight") ) { return ::hx::Val( _explicitVisibleHeight ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"_actualMinVisibleHeight") ) { return ::hx::Val( _actualMinVisibleHeight ); }
		if (HX_FIELD_EQ(inName,"refreshLayoutProperties") ) { return ::hx::Val( refreshLayoutProperties_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"_explicitMinVisibleWidth") ) { return ::hx::Val( _explicitMinVisibleWidth ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"_explicitMinVisibleHeight") ) { return ::hx::Val( _explicitMinVisibleHeight ); }
		if (HX_FIELD_EQ(inName,"refreshLayoutMeasurements") ) { return ::hx::Val( refreshLayoutMeasurements_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"requiresMeasurementOnScroll") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_requiresMeasurementOnScroll() ); }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"get_requiresMeasurementOnScroll") ) { return ::hx::Val( get_requiresMeasurementOnScroll_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val AdvancedLayoutViewPort_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"layout") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_layout(inValue.Cast< ::Dynamic >()) );layout=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollX") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scrollX(inValue.Cast< Float >()) );scrollX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollY") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scrollY(inValue.Cast< Float >()) );scrollY=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_background") ) { _background=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"visibleWidth") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_visibleWidth(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"_layoutItems") ) { _layoutItems=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"visibleHeight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_visibleHeight(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"_layoutResult") ) { _layoutResult=inValue.Cast<  ::feathers::layout::LayoutBoundsResult >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"minVisibleWidth") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_minVisibleWidth(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"maxVisibleWidth") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_maxVisibleWidth(inValue.Cast<  ::Dynamic >()) );maxVisibleWidth=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"refreshChildren") ) { refreshChildren=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"minVisibleHeight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_minVisibleHeight(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"maxVisibleHeight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_maxVisibleHeight(inValue.Cast<  ::Dynamic >()) );maxVisibleHeight=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_actualVisibleWidth") ) { _actualVisibleWidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_layoutMeasurements") ) { _layoutMeasurements=inValue.Cast<  ::feathers::layout::Measurements >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_actualVisibleHeight") ) { _actualVisibleHeight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_ignoreLayoutChanges") ) { _ignoreLayoutChanges=inValue.Cast< bool >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_explicitVisibleWidth") ) { _explicitVisibleWidth=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_actualMinVisibleWidth") ) { _actualMinVisibleWidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_explicitVisibleHeight") ) { _explicitVisibleHeight=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"_actualMinVisibleHeight") ) { _actualMinVisibleHeight=inValue.Cast< Float >(); return inValue; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"_explicitMinVisibleWidth") ) { _explicitMinVisibleWidth=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"_explicitMinVisibleHeight") ) { _explicitMinVisibleHeight=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AdvancedLayoutViewPort_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_background",0d,61,a7,f8));
	outFields->push(HX_("_actualMinVisibleWidth",39,a7,ae,c5));
	outFields->push(HX_("_explicitMinVisibleWidth",d3,43,12,41));
	outFields->push(HX_("minVisibleWidth",e6,40,ea,48));
	outFields->push(HX_("maxVisibleWidth",f8,8c,04,ed));
	outFields->push(HX_("_actualVisibleWidth",01,88,b0,0d));
	outFields->push(HX_("_explicitVisibleWidth",27,67,60,49));
	outFields->push(HX_("visibleWidth",34,d0,e7,3f));
	outFields->push(HX_("_actualMinVisibleHeight",54,23,73,e9));
	outFields->push(HX_("_explicitMinVisibleHeight",7a,8d,38,65));
	outFields->push(HX_("minVisibleHeight",07,01,5e,3a));
	outFields->push(HX_("maxVisibleHeight",b5,44,46,2d));
	outFields->push(HX_("_actualVisibleHeight",8c,f1,15,a3));
	outFields->push(HX_("_explicitVisibleHeight",a6,53,49,a1));
	outFields->push(HX_("visibleHeight",f9,d5,3d,61));
	outFields->push(HX_("layout",aa,ae,b8,58));
	outFields->push(HX_("_layoutItems",f7,b2,ff,d8));
	outFields->push(HX_("requiresMeasurementOnScroll",da,71,45,cc));
	outFields->push(HX_("_layoutMeasurements",e0,8a,1d,e1));
	outFields->push(HX_("_layoutResult",06,7a,37,06));
	outFields->push(HX_("_ignoreLayoutChanges",08,9e,67,16));
	outFields->push(HX_("scrollX",ab,33,d8,30));
	outFields->push(HX_("scrollY",ac,33,d8,30));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo AdvancedLayoutViewPort_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(AdvancedLayoutViewPort_obj,_background),HX_("_background",0d,61,a7,f8)},
	{::hx::fsFloat,(int)offsetof(AdvancedLayoutViewPort_obj,_actualMinVisibleWidth),HX_("_actualMinVisibleWidth",39,a7,ae,c5)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(AdvancedLayoutViewPort_obj,_explicitMinVisibleWidth),HX_("_explicitMinVisibleWidth",d3,43,12,41)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(AdvancedLayoutViewPort_obj,maxVisibleWidth),HX_("maxVisibleWidth",f8,8c,04,ed)},
	{::hx::fsFloat,(int)offsetof(AdvancedLayoutViewPort_obj,_actualVisibleWidth),HX_("_actualVisibleWidth",01,88,b0,0d)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(AdvancedLayoutViewPort_obj,_explicitVisibleWidth),HX_("_explicitVisibleWidth",27,67,60,49)},
	{::hx::fsFloat,(int)offsetof(AdvancedLayoutViewPort_obj,_actualMinVisibleHeight),HX_("_actualMinVisibleHeight",54,23,73,e9)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(AdvancedLayoutViewPort_obj,_explicitMinVisibleHeight),HX_("_explicitMinVisibleHeight",7a,8d,38,65)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(AdvancedLayoutViewPort_obj,maxVisibleHeight),HX_("maxVisibleHeight",b5,44,46,2d)},
	{::hx::fsFloat,(int)offsetof(AdvancedLayoutViewPort_obj,_actualVisibleHeight),HX_("_actualVisibleHeight",8c,f1,15,a3)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(AdvancedLayoutViewPort_obj,_explicitVisibleHeight),HX_("_explicitVisibleHeight",a6,53,49,a1)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(AdvancedLayoutViewPort_obj,layout),HX_("layout",aa,ae,b8,58)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(AdvancedLayoutViewPort_obj,_layoutItems),HX_("_layoutItems",f7,b2,ff,d8)},
	{::hx::fsObject /*  ::feathers::layout::Measurements */ ,(int)offsetof(AdvancedLayoutViewPort_obj,_layoutMeasurements),HX_("_layoutMeasurements",e0,8a,1d,e1)},
	{::hx::fsObject /*  ::feathers::layout::LayoutBoundsResult */ ,(int)offsetof(AdvancedLayoutViewPort_obj,_layoutResult),HX_("_layoutResult",06,7a,37,06)},
	{::hx::fsBool,(int)offsetof(AdvancedLayoutViewPort_obj,_ignoreLayoutChanges),HX_("_ignoreLayoutChanges",08,9e,67,16)},
	{::hx::fsFloat,(int)offsetof(AdvancedLayoutViewPort_obj,scrollX),HX_("scrollX",ab,33,d8,30)},
	{::hx::fsFloat,(int)offsetof(AdvancedLayoutViewPort_obj,scrollY),HX_("scrollY",ac,33,d8,30)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(AdvancedLayoutViewPort_obj,refreshChildren),HX_("refreshChildren",3a,82,c2,6d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *AdvancedLayoutViewPort_obj_sStaticStorageInfo = 0;
#endif

static ::String AdvancedLayoutViewPort_obj_sMemberFields[] = {
	HX_("_background",0d,61,a7,f8),
	HX_("_actualMinVisibleWidth",39,a7,ae,c5),
	HX_("_explicitMinVisibleWidth",d3,43,12,41),
	HX_("get_minVisibleWidth",fd,0f,f5,d3),
	HX_("set_minVisibleWidth",09,03,92,10),
	HX_("maxVisibleWidth",f8,8c,04,ed),
	HX_("set_maxVisibleWidth",1b,4f,ac,b4),
	HX_("_actualVisibleWidth",01,88,b0,0d),
	HX_("_explicitVisibleWidth",27,67,60,49),
	HX_("get_visibleWidth",bd,bc,86,44),
	HX_("set_visibleWidth",31,aa,c8,9a),
	HX_("_actualMinVisibleHeight",54,23,73,e9),
	HX_("_explicitMinVisibleHeight",7a,8d,38,65),
	HX_("get_minVisibleHeight",10,66,c8,58),
	HX_("set_minVisibleHeight",84,1d,80,25),
	HX_("maxVisibleHeight",b5,44,46,2d),
	HX_("get_maxVisibleHeight",be,a9,b0,4b),
	HX_("set_maxVisibleHeight",32,61,68,18),
	HX_("_actualVisibleHeight",8c,f1,15,a3),
	HX_("_explicitVisibleHeight",a6,53,49,a1),
	HX_("get_visibleHeight",50,e1,ad,67),
	HX_("set_visibleHeight",5c,b9,1b,8b),
	HX_("layout",aa,ae,b8,58),
	HX_("set_layout",e7,bc,bd,4c),
	HX_("_layoutItems",f7,b2,ff,d8),
	HX_("get_requiresMeasurementOnScroll",71,07,16,a8),
	HX_("_layoutMeasurements",e0,8a,1d,e1),
	HX_("_layoutResult",06,7a,37,06),
	HX_("_ignoreLayoutChanges",08,9e,67,16),
	HX_("scrollX",ab,33,d8,30),
	HX_("get_scrollX",c2,93,d2,b6),
	HX_("set_scrollX",ce,9a,3f,c1),
	HX_("scrollY",ac,33,d8,30),
	HX_("get_scrollY",c3,93,d2,b6),
	HX_("set_scrollY",cf,9a,3f,c1),
	HX_("refreshChildren",3a,82,c2,6d),
	HX_("update",09,86,05,87),
	HX_("refreshLayoutProperties",38,c3,c3,81),
	HX_("refreshLayoutMeasurements",7c,97,40,d2),
	HX_("handleLayoutResult",ef,92,e3,71),
	HX_("layout_changeHandler",a5,88,61,05),
	::String(null()) };

::hx::Class AdvancedLayoutViewPort_obj::__mClass;

void AdvancedLayoutViewPort_obj::__register()
{
	AdvancedLayoutViewPort_obj _hx_dummy;
	AdvancedLayoutViewPort_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("feathers.controls.supportClasses.AdvancedLayoutViewPort",af,2b,04,8d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(AdvancedLayoutViewPort_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< AdvancedLayoutViewPort_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AdvancedLayoutViewPort_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AdvancedLayoutViewPort_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace feathers
} // end namespace controls
} // end namespace supportClasses
