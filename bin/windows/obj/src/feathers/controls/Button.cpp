// Generated by Haxe 4.1.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_feathers_controls_BasicButton
#include <feathers/controls/BasicButton.h>
#endif
#ifndef INCLUDED_feathers_controls_Button
#include <feathers/controls/Button.h>
#endif
#ifndef INCLUDED_feathers_controls_ButtonState
#include <feathers/controls/ButtonState.h>
#endif
#ifndef INCLUDED_feathers_core_FeathersControl
#include <feathers/core/FeathersControl.h>
#endif
#ifndef INCLUDED_feathers_core_IDisplayObject
#include <feathers/core/IDisplayObject.h>
#endif
#ifndef INCLUDED_feathers_core_IFocusObject
#include <feathers/core/IFocusObject.h>
#endif
#ifndef INCLUDED_feathers_core_IMeasureObject
#include <feathers/core/IMeasureObject.h>
#endif
#ifndef INCLUDED_feathers_core_IStateContext
#include <feathers/core/IStateContext.h>
#endif
#ifndef INCLUDED_feathers_core_IStateObserver
#include <feathers/core/IStateObserver.h>
#endif
#ifndef INCLUDED_feathers_core_ITextControl
#include <feathers/core/ITextControl.h>
#endif
#ifndef INCLUDED_feathers_core_IUIControl
#include <feathers/core/IUIControl.h>
#endif
#ifndef INCLUDED_feathers_core_IValidating
#include <feathers/core/IValidating.h>
#endif
#ifndef INCLUDED_feathers_core_MeasureSprite
#include <feathers/core/MeasureSprite.h>
#endif
#ifndef INCLUDED_feathers_core_ValidatingSprite
#include <feathers/core/ValidatingSprite.h>
#endif
#ifndef INCLUDED_feathers_layout_HorizontalAlign
#include <feathers/layout/HorizontalAlign.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayoutObject
#include <feathers/layout/ILayoutObject.h>
#endif
#ifndef INCLUDED_feathers_layout_Measurements
#include <feathers/layout/Measurements.h>
#endif
#ifndef INCLUDED_feathers_layout_RelativePosition
#include <feathers/layout/RelativePosition.h>
#endif
#ifndef INCLUDED_feathers_layout_VerticalAlign
#include <feathers/layout/VerticalAlign.h>
#endif
#ifndef INCLUDED_feathers_style_IDarkModeTheme
#include <feathers/style/IDarkModeTheme.h>
#endif
#ifndef INCLUDED_feathers_style_IStyleObject
#include <feathers/style/IStyleObject.h>
#endif
#ifndef INCLUDED_feathers_style_ITheme
#include <feathers/style/ITheme.h>
#endif
#ifndef INCLUDED_feathers_style_IVariantStyleObject
#include <feathers/style/IVariantStyleObject.h>
#endif
#ifndef INCLUDED_feathers_themes_ClassVariantTheme
#include <feathers/themes/ClassVariantTheme.h>
#endif
#ifndef INCLUDED_feathers_themes_steel_BaseSteelTheme
#include <feathers/themes/steel/BaseSteelTheme.h>
#endif
#ifndef INCLUDED_feathers_themes_steel_components_SteelButtonStyles
#include <feathers/themes/steel/components/SteelButtonStyles.h>
#endif
#ifndef INCLUDED_feathers_utils_MeasurementsUtil
#include <feathers/utils/MeasurementsUtil.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <haxe/ds/EnumValueMap.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_204fe09b9701645f_49_new,"feathers.controls.Button","new",0x1240707e,"feathers.controls.Button.new","feathers/controls/Button.hx",49,0x5bcf34d2)
HX_LOCAL_STACK_FRAME(_hx_pos_204fe09b9701645f_90_get_text,"feathers.controls.Button","get_text",0x5bb8bb58,"feathers.controls.Button.get_text","feathers/controls/Button.hx",90,0x5bcf34d2)
HX_LOCAL_STACK_FRAME(_hx_pos_204fe09b9701645f_93_set_text,"feathers.controls.Button","set_text",0x0a1614cc,"feathers.controls.Button.set_text","feathers/controls/Button.hx",93,0x5bcf34d2)
HX_LOCAL_STACK_FRAME(_hx_pos_204fe09b9701645f_358_getTextFormatForState,"feathers.controls.Button","getTextFormatForState",0x6933b000,"feathers.controls.Button.getTextFormatForState","feathers/controls/Button.hx",358,0x5bcf34d2)
HX_LOCAL_STACK_FRAME(_hx_pos_204fe09b9701645f_376_setTextFormatForState,"feathers.controls.Button","setTextFormatForState",0xbd3c7e0c,"feathers.controls.Button.setTextFormatForState","feathers/controls/Button.hx",376,0x5bcf34d2)
HX_LOCAL_STACK_FRAME(_hx_pos_204fe09b9701645f_402_getIconForState,"feathers.controls.Button","getIconForState",0x0ae3edb5,"feathers.controls.Button.getIconForState","feathers/controls/Button.hx",402,0x5bcf34d2)
HX_LOCAL_STACK_FRAME(_hx_pos_204fe09b9701645f_420_setIconForState,"feathers.controls.Button","setIconForState",0x06af6ac1,"feathers.controls.Button.setIconForState","feathers/controls/Button.hx",420,0x5bcf34d2)
HX_LOCAL_STACK_FRAME(_hx_pos_204fe09b9701645f_438_initializeButtonTheme,"feathers.controls.Button","initializeButtonTheme",0xd97386e5,"feathers.controls.Button.initializeButtonTheme","feathers/controls/Button.hx",438,0x5bcf34d2)
HX_LOCAL_STACK_FRAME(_hx_pos_204fe09b9701645f_441_initialize,"feathers.controls.Button","initialize",0x6b8bf0f2,"feathers.controls.Button.initialize","feathers/controls/Button.hx",441,0x5bcf34d2)
HX_LOCAL_STACK_FRAME(_hx_pos_204fe09b9701645f_450_update,"feathers.controls.Button","update",0x46914cab,"feathers.controls.Button.update","feathers/controls/Button.hx",450,0x5bcf34d2)
HX_LOCAL_STACK_FRAME(_hx_pos_204fe09b9701645f_474_measure,"feathers.controls.Button","measure",0x17ac027c,"feathers.controls.Button.measure","feathers/controls/Button.hx",474,0x5bcf34d2)
HX_LOCAL_STACK_FRAME(_hx_pos_204fe09b9701645f_632_refreshTextStyles,"feathers.controls.Button","refreshTextStyles",0x70059d08,"feathers.controls.Button.refreshTextStyles","feathers/controls/Button.hx",632,0x5bcf34d2)
HX_LOCAL_STACK_FRAME(_hx_pos_204fe09b9701645f_649_refreshText,"feathers.controls.Button","refreshText",0xb96c4a46,"feathers.controls.Button.refreshText","feathers/controls/Button.hx",649,0x5bcf34d2)
HX_LOCAL_STACK_FRAME(_hx_pos_204fe09b9701645f_671_getCurrentTextFormat,"feathers.controls.Button","getCurrentTextFormat",0xd4bf2609,"feathers.controls.Button.getCurrentTextFormat","feathers/controls/Button.hx",671,0x5bcf34d2)
HX_LOCAL_STACK_FRAME(_hx_pos_204fe09b9701645f_679_layoutContent,"feathers.controls.Button","layoutContent",0x2826c14d,"feathers.controls.Button.layoutContent","feathers/controls/Button.hx",679,0x5bcf34d2)
HX_LOCAL_STACK_FRAME(_hx_pos_204fe09b9701645f_694_refreshTextFieldDimensions,"feathers.controls.Button","refreshTextFieldDimensions",0x24ed8001,"feathers.controls.Button.refreshTextFieldDimensions","feathers/controls/Button.hx",694,0x5bcf34d2)
HX_LOCAL_STACK_FRAME(_hx_pos_204fe09b9701645f_755_positionSingleChild,"feathers.controls.Button","positionSingleChild",0x089797e9,"feathers.controls.Button.positionSingleChild","feathers/controls/Button.hx",755,0x5bcf34d2)
HX_LOCAL_STACK_FRAME(_hx_pos_204fe09b9701645f_774_positionTextAndIcon,"feathers.controls.Button","positionTextAndIcon",0x361c52b8,"feathers.controls.Button.positionTextAndIcon","feathers/controls/Button.hx",774,0x5bcf34d2)
HX_LOCAL_STACK_FRAME(_hx_pos_204fe09b9701645f_845_refreshIcon,"feathers.controls.Button","refreshIcon",0xb2256512,"feathers.controls.Button.refreshIcon","feathers/controls/Button.hx",845,0x5bcf34d2)
HX_LOCAL_STACK_FRAME(_hx_pos_204fe09b9701645f_870_getCurrentIcon,"feathers.controls.Button","getCurrentIcon",0xfc694bfe,"feathers.controls.Button.getCurrentIcon","feathers/controls/Button.hx",870,0x5bcf34d2)
HX_LOCAL_STACK_FRAME(_hx_pos_204fe09b9701645f_878_removeCurrentIcon,"feathers.controls.Button","removeCurrentIcon",0x08d6b30c,"feathers.controls.Button.removeCurrentIcon","feathers/controls/Button.hx",878,0x5bcf34d2)
HX_LOCAL_STACK_FRAME(_hx_pos_5368d83f6b2d6dc3_42_get_styleContext,"feathers.controls.Button","get_styleContext",0x9a1fa269,"feathers.controls.Button.get_styleContext","feathers/macros/StyleContextMacro.hx",42,0xea61cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_d6db11cb6d2c03a9_68_set_textFormat,"feathers.controls.Button","set_textFormat",0xc11ab923,"feathers.controls.Button.set_textFormat","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_d6db11cb6d2c03a9_94_clearStyle_textFormat,"feathers.controls.Button","clearStyle_textFormat",0xeec74a9d,"feathers.controls.Button.clearStyle_textFormat","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_d6db11cb6d2c03a9_68_set_embedFonts,"feathers.controls.Button","set_embedFonts",0x1b7d708a,"feathers.controls.Button.set_embedFonts","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_d6db11cb6d2c03a9_94_clearStyle_embedFonts,"feathers.controls.Button","clearStyle_embedFonts",0x492a0204,"feathers.controls.Button.clearStyle_embedFonts","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_d6db11cb6d2c03a9_68_set_icon,"feathers.controls.Button","set_icon",0x02cf2f98,"feathers.controls.Button.set_icon","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_d6db11cb6d2c03a9_94_clearStyle_icon,"feathers.controls.Button","clearStyle_icon",0x2b1d0992,"feathers.controls.Button.clearStyle_icon","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_d6db11cb6d2c03a9_68_set_paddingTop,"feathers.controls.Button","set_paddingTop",0xc6a1a6a3,"feathers.controls.Button.set_paddingTop","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_d6db11cb6d2c03a9_94_clearStyle_paddingTop,"feathers.controls.Button","clearStyle_paddingTop",0xf44e381d,"feathers.controls.Button.clearStyle_paddingTop","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_d6db11cb6d2c03a9_68_set_paddingRight,"feathers.controls.Button","set_paddingRight",0xc487eb6a,"feathers.controls.Button.set_paddingRight","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_d6db11cb6d2c03a9_94_clearStyle_paddingRight,"feathers.controls.Button","clearStyle_paddingRight",0x23974f64,"feathers.controls.Button.clearStyle_paddingRight","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_d6db11cb6d2c03a9_68_set_paddingBottom,"feathers.controls.Button","set_paddingBottom",0x49b8a39d,"feathers.controls.Button.set_paddingBottom","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_d6db11cb6d2c03a9_94_clearStyle_paddingBottom,"feathers.controls.Button","clearStyle_paddingBottom",0x1820ba63,"feathers.controls.Button.clearStyle_paddingBottom","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_d6db11cb6d2c03a9_68_set_paddingLeft,"feathers.controls.Button","set_paddingLeft",0x017ed439,"feathers.controls.Button.set_paddingLeft","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_d6db11cb6d2c03a9_94_clearStyle_paddingLeft,"feathers.controls.Button","clearStyle_paddingLeft",0xcad18d7f,"feathers.controls.Button.clearStyle_paddingLeft","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_d6db11cb6d2c03a9_68_set_horizontalAlign,"feathers.controls.Button","set_horizontalAlign",0x21ce8d82,"feathers.controls.Button.set_horizontalAlign","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_d6db11cb6d2c03a9_94_clearStyle_horizontalAlign,"feathers.controls.Button","clearStyle_horizontalAlign",0x6b7e61c8,"feathers.controls.Button.clearStyle_horizontalAlign","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_d6db11cb6d2c03a9_68_set_verticalAlign,"feathers.controls.Button","set_verticalAlign",0xde9b5a70,"feathers.controls.Button.set_verticalAlign","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_d6db11cb6d2c03a9_94_clearStyle_verticalAlign,"feathers.controls.Button","clearStyle_verticalAlign",0xad037136,"feathers.controls.Button.clearStyle_verticalAlign","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_d6db11cb6d2c03a9_68_set_iconPosition,"feathers.controls.Button","set_iconPosition",0x2018e461,"feathers.controls.Button.set_iconPosition","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_d6db11cb6d2c03a9_94_clearStyle_iconPosition,"feathers.controls.Button","clearStyle_iconPosition",0x7f28485b,"feathers.controls.Button.clearStyle_iconPosition","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_d6db11cb6d2c03a9_68_set_gap,"feathers.controls.Button","set_gap",0xf486ddd7,"feathers.controls.Button.set_gap","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_d6db11cb6d2c03a9_94_clearStyle_gap,"feathers.controls.Button","clearStyle_gap",0x9e9be11d,"feathers.controls.Button.clearStyle_gap","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_d6db11cb6d2c03a9_68_set_minGap,"feathers.controls.Button","set_minGap",0xc5bab883,"feathers.controls.Button.set_minGap","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_d6db11cb6d2c03a9_94_clearStyle_minGap,"feathers.controls.Button","clearStyle_minGap",0x00ae84fd,"feathers.controls.Button.clearStyle_minGap","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_204fe09b9701645f_49_boot,"feathers.controls.Button","boot",0xde3afe54,"feathers.controls.Button.boot","feathers/controls/Button.hx",49,0x5bcf34d2)
namespace feathers{
namespace controls{

void Button_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_204fe09b9701645f_49_new)
HXLINE( 342)		this->_stateToTextFormat =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
HXLINE( 338)		this->minGap = ((Float)0.0);
HXLINE( 317)		this->gap = ((Float)0.0);
HXLINE( 292)		this->iconPosition = ::feathers::layout::RelativePosition_obj::LEFT_dyn();
HXLINE( 274)		this->verticalAlign = ::feathers::layout::VerticalAlign_obj::MIDDLE_dyn();
HXLINE( 254)		this->horizontalAlign = ::feathers::layout::HorizontalAlign_obj::CENTER_dyn();
HXLINE( 234)		this->paddingLeft = ((Float)0.0);
HXLINE( 218)		this->paddingBottom = ((Float)0.0);
HXLINE( 202)		this->paddingRight = ((Float)0.0);
HXLINE( 186)		this->paddingTop = ((Float)0.0);
HXLINE( 171)		this->icon = null();
HXLINE( 140)		this->_ignoreIconResizes = false;
HXLINE( 139)		this->_currentIcon = null();
HXLINE( 138)		this->_iconMeasurements = null();
HXLINE( 137)		this->_stateToIcon =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
HXLINE( 135)		this->embedFonts = false;
HXLINE( 119)		this->textFormat = null();
HXLINE(  69)		this->_updatedTextStyles = false;
HXLINE(  68)		this->_previousTextFormat = null();
HXLINE(  67)		this->_previousText = null();
HXLINE(  56)		this->initializeButtonTheme();
HXLINE(  58)		super::__construct();
HXLINE(  60)		this->set_tabEnabled(true);
HXLINE(  61)		this->set_tabChildren(false);
HXLINE(  62)		this->focusRect = false;
            	}

Dynamic Button_obj::__CreateEmpty() { return new Button_obj; }

void *Button_obj::_hx_vtable = 0;

Dynamic Button_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Button_obj > _hx_result = new Button_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Button_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x093ab78b) {
				if (inClassId<=(int)0x0330636f) {
					return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
				} else {
					return inClassId==(int)0x093ab78b;
				}
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1085bfba || inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			if (inClassId<=(int)0x4033f4be) {
				return inClassId==(int)0x249cabb8 || inClassId==(int)0x4033f4be;
			} else {
				return inClassId==(int)0x4af7dd8e;
			}
		} else {
			return inClassId==(int)0x58123034 || inClassId==(int)0x6b353933;
		}
	}
}

static ::openfl::events::IEventDispatcher_obj _hx_feathers_controls_Button__hx_openfl_events_IEventDispatcher= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::Button_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::Button_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::Button_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::Button_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::Button_obj::willTrigger,
};

static ::feathers::core::ITextControl_obj _hx_feathers_controls_Button__hx_feathers_core_ITextControl= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::Button_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::Button_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::Button_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::Button_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::Button_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::Button_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::Button_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::Button_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::Button_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::Button_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::Button_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::Button_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::Button_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::Button_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::Button_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::Button_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::Button_obj::set_scaleY,
	( Float (::hx::Object::*)())&::feathers::controls::Button_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::Button_obj::set_alpha,
	( bool (::hx::Object::*)())&::feathers::controls::Button_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::Button_obj::set_visible,
	( bool (::hx::Object::*)())&::feathers::controls::Button_obj::get_enabled,
	( bool (::hx::Object::*)(bool))&::feathers::controls::Button_obj::set_enabled,
	( void (::hx::Object::*)())&::feathers::controls::Button_obj::initializeNow,
	( ::String (::hx::Object::*)())&::feathers::controls::Button_obj::get_text,
	( ::String (::hx::Object::*)(::String))&::feathers::controls::Button_obj::set_text,
};

static ::feathers::core::IFocusObject_obj _hx_feathers_controls_Button__hx_feathers_core_IFocusObject= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::Button_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::Button_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::Button_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::Button_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::Button_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::Button_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::Button_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::Button_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::Button_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::Button_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::Button_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::Button_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::Button_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::Button_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::Button_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::Button_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::Button_obj::set_scaleY,
	( Float (::hx::Object::*)())&::feathers::controls::Button_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::Button_obj::set_alpha,
	( bool (::hx::Object::*)())&::feathers::controls::Button_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::Button_obj::set_visible,
	( ::Dynamic (::hx::Object::*)())&::feathers::controls::Button_obj::get_focusManager,
	( ::Dynamic (::hx::Object::*)(::Dynamic))&::feathers::controls::Button_obj::set_focusManager,
	( bool (::hx::Object::*)())&::feathers::controls::Button_obj::get_focusEnabled,
	( bool (::hx::Object::*)(bool))&::feathers::controls::Button_obj::set_focusEnabled,
	( void (::hx::Object::*)(bool))&::feathers::controls::Button_obj::showFocus,
};

static ::feathers::core::IUIControl_obj _hx_feathers_controls_Button__hx_feathers_core_IUIControl= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::Button_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::Button_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::Button_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::Button_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::Button_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::Button_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::Button_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::Button_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::Button_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::Button_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::Button_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::Button_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::Button_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::Button_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::Button_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::Button_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::Button_obj::set_scaleY,
	( Float (::hx::Object::*)())&::feathers::controls::Button_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::Button_obj::set_alpha,
	( bool (::hx::Object::*)())&::feathers::controls::Button_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::Button_obj::set_visible,
	( bool (::hx::Object::*)())&::feathers::controls::Button_obj::get_enabled,
	( bool (::hx::Object::*)(bool))&::feathers::controls::Button_obj::set_enabled,
	( void (::hx::Object::*)())&::feathers::controls::Button_obj::initializeNow,
};

static ::feathers::core::IDisplayObject_obj _hx_feathers_controls_Button__hx_feathers_core_IDisplayObject= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::Button_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::Button_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::Button_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::Button_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::Button_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::Button_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::Button_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::Button_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::Button_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::Button_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::Button_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::Button_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::Button_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::Button_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::Button_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::Button_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::Button_obj::set_scaleY,
	( Float (::hx::Object::*)())&::feathers::controls::Button_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::Button_obj::set_alpha,
	( bool (::hx::Object::*)())&::feathers::controls::Button_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::Button_obj::set_visible,
};

void *Button_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x87530281: return &_hx_feathers_controls_Button__hx_openfl_events_IEventDispatcher;
		case (int)0xfccd2876: return &_hx_feathers_controls_Button__hx_feathers_core_ITextControl;
		case (int)0x701686fd: return &_hx_feathers_controls_Button__hx_feathers_core_IFocusObject;
		case (int)0x2696a04f: return &_hx_feathers_controls_Button__hx_feathers_core_IUIControl;
		case (int)0x3a979a67: return &_hx_feathers_controls_Button__hx_feathers_core_IDisplayObject;
	}
	return super::_hx_getInterface(inHash);
}

::String Button_obj::get_text(){
            	HX_STACKFRAME(&_hx_pos_204fe09b9701645f_90_get_text)
HXDLIN(  90)		return this->text;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Button_obj,get_text,return )

::String Button_obj::set_text(::String value){
            	HX_STACKFRAME(&_hx_pos_204fe09b9701645f_93_set_text)
HXLINE(  94)		if ((this->get_text() == value)) {
HXLINE(  95)			return this->get_text();
            		}
HXLINE(  97)		this->text = value;
HXLINE(  98)		this->setInvalid(HX_("data",2a,56,63,42));
HXLINE(  99)		return this->get_text();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Button_obj,set_text,return )

 ::openfl::text::TextFormat Button_obj::getTextFormatForState( ::feathers::controls::ButtonState state){
            	HX_STACKFRAME(&_hx_pos_204fe09b9701645f_358_getTextFormatForState)
HXDLIN( 358)		return this->_stateToTextFormat->get(state).StaticCast<  ::openfl::text::TextFormat >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Button_obj,getTextFormatForState,return )

void Button_obj::setTextFormatForState( ::feathers::controls::ButtonState state, ::openfl::text::TextFormat textFormat){
            	HX_STACKFRAME(&_hx_pos_204fe09b9701645f_376_setTextFormatForState)
HXLINE( 377)		if (!(this->setStyle(HX_("setTextFormatForState",6e,7e,1f,fc),state))) {
HXLINE( 378)			return;
            		}
HXLINE( 380)		if (::hx::IsNull( textFormat )) {
HXLINE( 381)			this->_stateToTextFormat->remove(state);
            		}
            		else {
HXLINE( 383)			this->_stateToTextFormat->set(state,textFormat);
            		}
HXLINE( 385)		this->setInvalid(HX_("styles",22,e6,d2,15));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Button_obj,setTextFormatForState,(void))

 ::openfl::display::DisplayObject Button_obj::getIconForState( ::feathers::controls::ButtonState state){
            	HX_STACKFRAME(&_hx_pos_204fe09b9701645f_402_getIconForState)
HXDLIN( 402)		return this->_stateToIcon->get(state).StaticCast<  ::openfl::display::DisplayObject >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Button_obj,getIconForState,return )

void Button_obj::setIconForState( ::feathers::controls::ButtonState state, ::openfl::display::DisplayObject icon){
            	HX_STACKFRAME(&_hx_pos_204fe09b9701645f_420_setIconForState)
HXLINE( 421)		if (!(this->setStyle(HX_("setIconForState",a3,15,c4,47),state))) {
HXLINE( 422)			return;
            		}
HXLINE( 424)		 ::openfl::display::DisplayObject oldIcon = this->_stateToIcon->get(state).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 425)		bool _hx_tmp;
HXDLIN( 425)		if (::hx::IsNotNull( oldIcon )) {
HXLINE( 425)			_hx_tmp = ::hx::IsEq( oldIcon,this->_currentIcon );
            		}
            		else {
HXLINE( 425)			_hx_tmp = false;
            		}
HXDLIN( 425)		if (_hx_tmp) {
HXLINE( 426)			this->removeCurrentIcon(oldIcon);
HXLINE( 427)			this->_currentIcon = null();
            		}
HXLINE( 429)		if (::hx::IsNull( icon )) {
HXLINE( 430)			this->_stateToIcon->remove(state);
            		}
            		else {
HXLINE( 432)			this->_stateToIcon->set(state,icon);
            		}
HXLINE( 434)		this->setInvalid(HX_("styles",22,e6,d2,15));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Button_obj,setIconForState,(void))

void Button_obj::initializeButtonTheme(){
            	HX_STACKFRAME(&_hx_pos_204fe09b9701645f_438_initializeButtonTheme)
HXDLIN( 438)		::feathers::themes::steel::components::SteelButtonStyles_obj::initialize(null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Button_obj,initializeButtonTheme,(void))

void Button_obj::initialize(){
            	HX_GC_STACKFRAME(&_hx_pos_204fe09b9701645f_441_initialize)
HXLINE( 442)		this->super::initialize();
HXLINE( 443)		if (::hx::IsNull( this->textField )) {
HXLINE( 444)			this->textField =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE( 445)			this->textField->set_selectable(false);
HXLINE( 446)			this->addChild(this->textField);
            		}
            	}


void Button_obj::update(){
            	HX_STACKFRAME(&_hx_pos_204fe09b9701645f_450_update)
HXLINE( 451)		bool dataInvalid = this->isInvalid(HX_("data",2a,56,63,42));
HXLINE( 452)		bool stateInvalid = this->isInvalid(HX_("state",11,76,0b,84));
HXLINE( 453)		bool stylesInvalid = this->isInvalid(HX_("styles",22,e6,d2,15));
HXLINE( 455)		this->_updatedTextStyles = false;
HXLINE( 457)		bool _hx_tmp;
HXDLIN( 457)		if (!(stylesInvalid)) {
HXLINE( 457)			_hx_tmp = stateInvalid;
            		}
            		else {
HXLINE( 457)			_hx_tmp = true;
            		}
HXDLIN( 457)		if (_hx_tmp) {
HXLINE( 458)			this->refreshIcon();
            		}
HXLINE( 461)		bool _hx_tmp1;
HXDLIN( 461)		if (!(stylesInvalid)) {
HXLINE( 461)			_hx_tmp1 = stateInvalid;
            		}
            		else {
HXLINE( 461)			_hx_tmp1 = true;
            		}
HXDLIN( 461)		if (_hx_tmp1) {
HXLINE( 462)			this->refreshTextStyles();
            		}
HXLINE( 465)		bool _hx_tmp2;
HXDLIN( 465)		bool _hx_tmp3;
HXDLIN( 465)		if (!(dataInvalid)) {
HXLINE( 465)			_hx_tmp3 = stylesInvalid;
            		}
            		else {
HXLINE( 465)			_hx_tmp3 = true;
            		}
HXDLIN( 465)		if (!(_hx_tmp3)) {
HXLINE( 465)			_hx_tmp2 = stateInvalid;
            		}
            		else {
HXLINE( 465)			_hx_tmp2 = true;
            		}
HXDLIN( 465)		if (_hx_tmp2) {
HXLINE( 466)			this->refreshText();
            		}
HXLINE( 469)		this->super::update();
HXLINE( 471)		this->layoutContent();
            	}


bool Button_obj::measure(){
            	HX_STACKFRAME(&_hx_pos_204fe09b9701645f_474_measure)
HXLINE( 475)		bool needsWidth = ::hx::IsNull( this->get_explicitWidth() );
HXLINE( 476)		bool needsHeight = ::hx::IsNull( this->get_explicitHeight() );
HXLINE( 477)		bool needsMinWidth = ::hx::IsNull( this->get_explicitMinWidth() );
HXLINE( 478)		bool needsMinHeight = ::hx::IsNull( this->get_explicitMinHeight() );
HXLINE( 479)		bool needsMaxWidth = ::hx::IsNull( this->get_explicitMaxWidth() );
HXLINE( 480)		bool needsMaxHeight = ::hx::IsNull( this->get_explicitMaxHeight() );
HXLINE( 481)		bool _hx_tmp;
HXDLIN( 481)		bool _hx_tmp1;
HXDLIN( 481)		bool _hx_tmp2;
HXDLIN( 481)		bool _hx_tmp3;
HXDLIN( 481)		bool _hx_tmp4;
HXDLIN( 481)		if (!(needsWidth)) {
HXLINE( 481)			_hx_tmp4 = !(needsHeight);
            		}
            		else {
HXLINE( 481)			_hx_tmp4 = false;
            		}
HXDLIN( 481)		if (_hx_tmp4) {
HXLINE( 481)			_hx_tmp3 = !(needsMinWidth);
            		}
            		else {
HXLINE( 481)			_hx_tmp3 = false;
            		}
HXDLIN( 481)		if (_hx_tmp3) {
HXLINE( 481)			_hx_tmp2 = !(needsMinHeight);
            		}
            		else {
HXLINE( 481)			_hx_tmp2 = false;
            		}
HXDLIN( 481)		if (_hx_tmp2) {
HXLINE( 481)			_hx_tmp1 = !(needsMaxWidth);
            		}
            		else {
HXLINE( 481)			_hx_tmp1 = false;
            		}
HXDLIN( 481)		if (_hx_tmp1) {
HXLINE( 481)			_hx_tmp = !(needsMaxHeight);
            		}
            		else {
HXLINE( 481)			_hx_tmp = false;
            		}
HXDLIN( 481)		if (_hx_tmp) {
HXLINE( 482)			return false;
            		}
HXLINE( 485)		bool hasText;
HXDLIN( 485)		if (::hx::IsNotNull( this->get_text() )) {
HXLINE( 485)			hasText = (this->get_text().length > 0);
            		}
            		else {
HXLINE( 485)			hasText = false;
            		}
HXLINE( 486)		if (hasText) {
HXLINE( 487)			this->refreshTextFieldDimensions(true);
            		}
HXLINE( 490)		if (::hx::IsNotNull( this->_currentBackgroundSkin )) {
HXLINE( 491)			::feathers::utils::MeasurementsUtil_obj::resetFluidlyWithParent(this->_backgroundSkinMeasurements,this->_currentBackgroundSkin,::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 494)		::Dynamic measureSkin = null();
HXLINE( 495)		if (::Std_obj::isOfType(this->_currentBackgroundSkin,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IMeasureObject >()) ))) {
HXLINE( 496)			measureSkin =  ::hx::interface_check(this->_currentBackgroundSkin,0xcfc32883);
            		}
HXLINE( 499)		if (::Std_obj::isOfType(this->_currentBackgroundSkin,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IValidating >()) ))) {
HXLINE( 500)			::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->_currentBackgroundSkin,0x64d4b3cd));
            		}
HXLINE( 503)		if (::Std_obj::isOfType(this->_currentIcon,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IValidating >()) ))) {
HXLINE( 504)			::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->_currentIcon,0x64d4b3cd));
            		}
HXLINE( 507)		Float adjustedGap = this->gap;
HXLINE( 508)		if ((adjustedGap == ::Math_obj::POSITIVE_INFINITY)) {
HXLINE( 509)			adjustedGap = this->minGap;
            		}
HXLINE( 512)		 ::Dynamic newWidth = this->get_explicitWidth();
HXLINE( 513)		if (needsWidth) {
HXLINE( 514)			if (hasText) {
HXLINE( 515)				newWidth = this->_textMeasuredWidth;
            			}
            			else {
HXLINE( 517)				newWidth = ((Float)0.0);
            			}
HXLINE( 519)			if (::hx::IsNotNull( this->_currentIcon )) {
HXLINE( 520)				bool _hx_tmp;
HXDLIN( 520)				if (::hx::IsNotEq( this->iconPosition,::feathers::layout::RelativePosition_obj::LEFT_dyn() )) {
HXLINE( 520)					_hx_tmp = ::hx::IsEq( this->iconPosition,::feathers::layout::RelativePosition_obj::RIGHT_dyn() );
            				}
            				else {
HXLINE( 520)					_hx_tmp = true;
            				}
HXDLIN( 520)				if (_hx_tmp) {
HXLINE( 521)					if (hasText) {
HXLINE( 522)						newWidth = (newWidth + adjustedGap);
            					}
HXLINE( 524)					newWidth = (newWidth + this->_currentIcon->get_width());
            				}
            				else {
HXLINE( 525)					bool _hx_tmp;
HXDLIN( 525)					if (::hx::IsNotEq( this->iconPosition,::feathers::layout::RelativePosition_obj::TOP_dyn() )) {
HXLINE( 525)						_hx_tmp = ::hx::IsEq( this->iconPosition,::feathers::layout::RelativePosition_obj::BOTTOM_dyn() );
            					}
            					else {
HXLINE( 525)						_hx_tmp = true;
            					}
HXDLIN( 525)					if (_hx_tmp) {
HXLINE( 526)						newWidth = ::Math_obj::max(( (Float)(newWidth) ),this->_currentIcon->get_width());
            					}
            				}
            			}
HXLINE( 529)			newWidth = (newWidth + (this->paddingLeft + this->paddingRight));
HXLINE( 530)			if (::hx::IsNotNull( this->_currentBackgroundSkin )) {
HXLINE( 531)				newWidth = ::Math_obj::max(this->_currentBackgroundSkin->get_width(),( (Float)(newWidth) ));
            			}
            		}
HXLINE( 535)		 ::Dynamic newHeight = this->get_explicitHeight();
HXLINE( 536)		if (needsHeight) {
HXLINE( 537)			if (hasText) {
HXLINE( 538)				newHeight = this->_textMeasuredHeight;
            			}
            			else {
HXLINE( 540)				newHeight = ((Float)0.0);
            			}
HXLINE( 542)			if (::hx::IsNotNull( this->_currentIcon )) {
HXLINE( 543)				bool _hx_tmp;
HXDLIN( 543)				if (::hx::IsNotEq( this->iconPosition,::feathers::layout::RelativePosition_obj::TOP_dyn() )) {
HXLINE( 543)					_hx_tmp = ::hx::IsEq( this->iconPosition,::feathers::layout::RelativePosition_obj::BOTTOM_dyn() );
            				}
            				else {
HXLINE( 543)					_hx_tmp = true;
            				}
HXDLIN( 543)				if (_hx_tmp) {
HXLINE( 544)					if (hasText) {
HXLINE( 545)						newHeight = (newHeight + adjustedGap);
            					}
HXLINE( 547)					newHeight = (newHeight + this->_currentIcon->get_height());
            				}
            				else {
HXLINE( 548)					bool _hx_tmp;
HXDLIN( 548)					if (::hx::IsNotEq( this->iconPosition,::feathers::layout::RelativePosition_obj::LEFT_dyn() )) {
HXLINE( 548)						_hx_tmp = ::hx::IsEq( this->iconPosition,::feathers::layout::RelativePosition_obj::RIGHT_dyn() );
            					}
            					else {
HXLINE( 548)						_hx_tmp = true;
            					}
HXDLIN( 548)					if (_hx_tmp) {
HXLINE( 549)						newHeight = ::Math_obj::max(( (Float)(newHeight) ),this->_currentIcon->get_height());
            					}
            				}
            			}
HXLINE( 552)			newHeight = (newHeight + (this->paddingTop + this->paddingBottom));
HXLINE( 553)			if (::hx::IsNotNull( this->_currentBackgroundSkin )) {
HXLINE( 554)				newHeight = ::Math_obj::max(this->_currentBackgroundSkin->get_height(),( (Float)(newHeight) ));
            			}
            		}
HXLINE( 558)		 ::Dynamic newMinWidth = this->get_explicitMinWidth();
HXLINE( 559)		if (needsMinWidth) {
HXLINE( 560)			if (hasText) {
HXLINE( 561)				newMinWidth = this->_textMeasuredWidth;
            			}
            			else {
HXLINE( 563)				newMinWidth = ((Float)0.0);
            			}
HXLINE( 565)			if (::hx::IsNotNull( this->_currentIcon )) {
HXLINE( 566)				bool _hx_tmp;
HXDLIN( 566)				if (::hx::IsNotEq( this->iconPosition,::feathers::layout::RelativePosition_obj::LEFT_dyn() )) {
HXLINE( 566)					_hx_tmp = ::hx::IsEq( this->iconPosition,::feathers::layout::RelativePosition_obj::RIGHT_dyn() );
            				}
            				else {
HXLINE( 566)					_hx_tmp = true;
            				}
HXDLIN( 566)				if (_hx_tmp) {
HXLINE( 567)					if (hasText) {
HXLINE( 568)						newMinWidth = (newMinWidth + adjustedGap);
            					}
HXLINE( 570)					newMinWidth = (newMinWidth + this->_currentIcon->get_width());
            				}
            				else {
HXLINE( 571)					bool _hx_tmp;
HXDLIN( 571)					if (::hx::IsNotEq( this->iconPosition,::feathers::layout::RelativePosition_obj::TOP_dyn() )) {
HXLINE( 571)						_hx_tmp = ::hx::IsEq( this->iconPosition,::feathers::layout::RelativePosition_obj::BOTTOM_dyn() );
            					}
            					else {
HXLINE( 571)						_hx_tmp = true;
            					}
HXDLIN( 571)					if (_hx_tmp) {
HXLINE( 572)						newMinWidth = ::Math_obj::max(( (Float)(newMinWidth) ),this->_currentIcon->get_width());
            					}
            				}
            			}
HXLINE( 575)			newMinWidth = (newMinWidth + (this->paddingLeft + this->paddingRight));
HXLINE( 576)			if (::hx::IsNotNull( measureSkin )) {
HXLINE( 577)				newMinWidth = ::Math_obj::max(::feathers::core::IMeasureObject_obj::get_minWidth(measureSkin),( (Float)(newMinWidth) ));
            			}
            			else {
HXLINE( 578)				if (::hx::IsNotNull( this->_backgroundSkinMeasurements )) {
HXLINE( 579)					newMinWidth = ::Math_obj::max(( (Float)(this->_backgroundSkinMeasurements->minWidth) ),( (Float)(newMinWidth) ));
            				}
            			}
            		}
HXLINE( 583)		 ::Dynamic newMinHeight = this->get_explicitMinHeight();
HXLINE( 584)		if (needsMinHeight) {
HXLINE( 585)			if (hasText) {
HXLINE( 586)				newMinHeight = this->_textMeasuredHeight;
            			}
            			else {
HXLINE( 588)				newMinHeight = ((Float)0.0);
            			}
HXLINE( 590)			if (::hx::IsNotNull( this->_currentIcon )) {
HXLINE( 591)				bool _hx_tmp;
HXDLIN( 591)				if (::hx::IsNotEq( this->iconPosition,::feathers::layout::RelativePosition_obj::TOP_dyn() )) {
HXLINE( 591)					_hx_tmp = ::hx::IsEq( this->iconPosition,::feathers::layout::RelativePosition_obj::BOTTOM_dyn() );
            				}
            				else {
HXLINE( 591)					_hx_tmp = true;
            				}
HXDLIN( 591)				if (_hx_tmp) {
HXLINE( 592)					if (hasText) {
HXLINE( 593)						newMinHeight = (newMinHeight + adjustedGap);
            					}
HXLINE( 595)					newMinHeight = (newMinHeight + this->_currentIcon->get_height());
            				}
            				else {
HXLINE( 596)					bool _hx_tmp;
HXDLIN( 596)					if (::hx::IsNotEq( this->iconPosition,::feathers::layout::RelativePosition_obj::LEFT_dyn() )) {
HXLINE( 596)						_hx_tmp = ::hx::IsEq( this->iconPosition,::feathers::layout::RelativePosition_obj::RIGHT_dyn() );
            					}
            					else {
HXLINE( 596)						_hx_tmp = true;
            					}
HXDLIN( 596)					if (_hx_tmp) {
HXLINE( 597)						newMinHeight = ::Math_obj::max(( (Float)(newMinHeight) ),this->_currentIcon->get_height());
            					}
            				}
            			}
HXLINE( 600)			newMinHeight = (newMinHeight + (this->paddingTop + this->paddingBottom));
HXLINE( 601)			if (::hx::IsNotNull( measureSkin )) {
HXLINE( 602)				newMinHeight = ::Math_obj::max(::feathers::core::IMeasureObject_obj::get_minHeight(measureSkin),( (Float)(newMinHeight) ));
            			}
            			else {
HXLINE( 603)				if (::hx::IsNotNull( this->_backgroundSkinMeasurements )) {
HXLINE( 604)					newMinHeight = ::Math_obj::max(( (Float)(this->_backgroundSkinMeasurements->minHeight) ),( (Float)(newMinHeight) ));
            				}
            			}
            		}
HXLINE( 607)		 ::Dynamic newMaxWidth = this->get_explicitMaxWidth();
HXLINE( 608)		if (needsMaxWidth) {
HXLINE( 609)			if (::hx::IsNotNull( measureSkin )) {
HXLINE( 610)				newMaxWidth = ::feathers::core::IMeasureObject_obj::get_maxWidth(measureSkin);
            			}
            			else {
HXLINE( 611)				if (::hx::IsNotNull( this->_backgroundSkinMeasurements )) {
HXLINE( 612)					newMaxWidth = this->_backgroundSkinMeasurements->maxWidth;
            				}
            				else {
HXLINE( 614)					newMaxWidth = ::Math_obj::POSITIVE_INFINITY;
            				}
            			}
            		}
HXLINE( 618)		 ::Dynamic newMaxHeight = this->get_explicitMaxHeight();
HXLINE( 619)		if (needsMaxHeight) {
HXLINE( 620)			if (::hx::IsNotNull( measureSkin )) {
HXLINE( 621)				newMaxHeight = ::feathers::core::IMeasureObject_obj::get_maxHeight(measureSkin);
            			}
            			else {
HXLINE( 622)				if (::hx::IsNotNull( this->_backgroundSkinMeasurements )) {
HXLINE( 623)					newMaxHeight = this->_backgroundSkinMeasurements->maxHeight;
            				}
            				else {
HXLINE( 625)					newMaxHeight = ::Math_obj::POSITIVE_INFINITY;
            				}
            			}
            		}
HXLINE( 629)		return this->saveMeasurements(( (Float)(newWidth) ),( (Float)(newHeight) ),newMinWidth,newMinHeight,newMaxWidth,newMaxHeight);
            	}


void Button_obj::refreshTextStyles(){
            	HX_STACKFRAME(&_hx_pos_204fe09b9701645f_632_refreshTextStyles)
HXLINE( 633)		bool _hx_tmp = this->textField->get_embedFonts();
HXDLIN( 633)		if ((_hx_tmp != this->embedFonts)) {
HXLINE( 634)			this->textField->set_embedFonts(this->embedFonts);
HXLINE( 635)			this->_updatedTextStyles = true;
            		}
HXLINE( 637)		 ::openfl::text::TextFormat textFormat = this->getCurrentTextFormat();
HXLINE( 638)		if (::hx::IsEq( textFormat,this->_previousTextFormat )) {
HXLINE( 640)			return;
            		}
HXLINE( 642)		if (::hx::IsNotNull( textFormat )) {
HXLINE( 643)			this->textField->set_defaultTextFormat(textFormat);
HXLINE( 644)			this->_updatedTextStyles = true;
HXLINE( 645)			this->_previousTextFormat = textFormat;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Button_obj,refreshTextStyles,(void))

void Button_obj::refreshText(){
            	HX_STACKFRAME(&_hx_pos_204fe09b9701645f_649_refreshText)
HXLINE( 650)		bool _hx_tmp;
HXDLIN( 650)		::String _hx_tmp1 = this->get_text();
HXDLIN( 650)		if ((_hx_tmp1 == this->_previousText)) {
HXLINE( 650)			_hx_tmp = !(this->_updatedTextStyles);
            		}
            		else {
HXLINE( 650)			_hx_tmp = false;
            		}
HXDLIN( 650)		if (_hx_tmp) {
HXLINE( 652)			return;
            		}
HXLINE( 654)		bool hasText;
HXDLIN( 654)		if (::hx::IsNotNull( this->get_text() )) {
HXLINE( 654)			hasText = (this->get_text().length > 0);
            		}
            		else {
HXLINE( 654)			hasText = false;
            		}
HXLINE( 655)		if (hasText) {
HXLINE( 656)			 ::openfl::text::TextField _hx_tmp = this->textField;
HXDLIN( 656)			_hx_tmp->set_text(this->get_text());
            		}
            		else {
HXLINE( 658)			this->textField->set_text(HX_W(u"\u8203",81e3,00b0));
            		}
HXLINE( 660)		this->textField->set_autoSize(1);
HXLINE( 661)		this->_textMeasuredWidth = this->textField->get_width();
HXLINE( 662)		this->_textMeasuredHeight = this->textField->get_height();
HXLINE( 663)		this->textField->set_autoSize(2);
HXLINE( 664)		if (!(hasText)) {
HXLINE( 665)			this->textField->set_text(HX_("",00,00,00,00));
            		}
HXLINE( 667)		this->textField->set_visible(hasText);
HXLINE( 668)		this->_previousText = this->get_text();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Button_obj,refreshText,(void))

 ::openfl::text::TextFormat Button_obj::getCurrentTextFormat(){
            	HX_STACKFRAME(&_hx_pos_204fe09b9701645f_671_getCurrentTextFormat)
HXLINE( 672)		::Dynamic this1 = this->_stateToTextFormat;
HXDLIN( 672)		 ::openfl::text::TextFormat result = ( ( ::haxe::ds::EnumValueMap)(this1) )->get(this->get_currentState()).StaticCast<  ::openfl::text::TextFormat >();
HXLINE( 673)		if (::hx::IsNotNull( result )) {
HXLINE( 674)			return result;
            		}
HXLINE( 676)		return this->textFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Button_obj,getCurrentTextFormat,return )

void Button_obj::layoutContent(){
            	HX_STACKFRAME(&_hx_pos_204fe09b9701645f_679_layoutContent)
HXLINE( 680)		this->refreshTextFieldDimensions(false);
HXLINE( 682)		bool hasText;
HXDLIN( 682)		if (::hx::IsNotNull( this->get_text() )) {
HXLINE( 682)			hasText = (this->get_text().length > 0);
            		}
            		else {
HXLINE( 682)			hasText = false;
            		}
HXLINE( 683)		bool iconIsInLayout;
HXDLIN( 683)		if (::hx::IsNotNull( this->_currentIcon )) {
HXLINE( 683)			iconIsInLayout = ::hx::IsNotEq( this->iconPosition,::feathers::layout::RelativePosition_obj::MANUAL_dyn() );
            		}
            		else {
HXLINE( 683)			iconIsInLayout = false;
            		}
HXLINE( 684)		bool _hx_tmp;
HXDLIN( 684)		if (hasText) {
HXLINE( 684)			_hx_tmp = iconIsInLayout;
            		}
            		else {
HXLINE( 684)			_hx_tmp = false;
            		}
HXDLIN( 684)		if (_hx_tmp) {
HXLINE( 685)			this->positionSingleChild(this->textField);
HXLINE( 686)			this->positionTextAndIcon();
            		}
            		else {
HXLINE( 687)			if (hasText) {
HXLINE( 688)				this->positionSingleChild(this->textField);
            			}
            			else {
HXLINE( 689)				if (iconIsInLayout) {
HXLINE( 690)					this->positionSingleChild(this->_currentIcon);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Button_obj,layoutContent,(void))

void Button_obj::refreshTextFieldDimensions(bool forMeasurement){
            	HX_STACKFRAME(&_hx_pos_204fe09b9701645f_694_refreshTextFieldDimensions)
HXLINE( 695)		bool oldIgnoreIconResizes = this->_ignoreIconResizes;
HXLINE( 696)		this->_ignoreIconResizes = true;
HXLINE( 697)		if (::Std_obj::isOfType(this->_currentIcon,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IValidating >()) ))) {
HXLINE( 698)			::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->_currentIcon,0x64d4b3cd));
            		}
HXLINE( 700)		this->_ignoreIconResizes = oldIgnoreIconResizes;
HXLINE( 701)		bool _hx_tmp;
HXDLIN( 701)		if (::hx::IsNotNull( this->get_text() )) {
HXLINE( 701)			_hx_tmp = (this->get_text().length == 0);
            		}
            		else {
HXLINE( 701)			_hx_tmp = true;
            		}
HXDLIN( 701)		if (_hx_tmp) {
HXLINE( 702)			return;
            		}
HXLINE( 705)		Float calculatedWidth = this->actualWidth;
HXLINE( 706)		Float calculatedHeight = this->actualHeight;
HXLINE( 707)		if (forMeasurement) {
HXLINE( 708)			calculatedWidth = ((Float)0.0);
HXLINE( 709)			 ::Dynamic explicitCalculatedWidth = this->get_explicitWidth();
HXLINE( 710)			if (::hx::IsNull( explicitCalculatedWidth )) {
HXLINE( 711)				explicitCalculatedWidth = this->get_explicitMaxWidth();
            			}
HXLINE( 713)			if (::hx::IsNotNull( explicitCalculatedWidth )) {
HXLINE( 714)				calculatedWidth = ( (Float)(explicitCalculatedWidth) );
            			}
HXLINE( 716)			calculatedHeight = ((Float)0.0);
HXLINE( 717)			 ::Dynamic explicitCalculatedHeight = this->get_explicitHeight();
HXLINE( 718)			if (::hx::IsNull( explicitCalculatedHeight )) {
HXLINE( 719)				explicitCalculatedHeight = this->get_explicitMaxHeight();
            			}
HXLINE( 721)			if (::hx::IsNotNull( explicitCalculatedHeight )) {
HXLINE( 722)				calculatedHeight = ( (Float)(explicitCalculatedHeight) );
            			}
            		}
HXLINE( 725)		calculatedWidth = (calculatedWidth - (this->paddingLeft + this->paddingRight));
HXLINE( 726)		calculatedHeight = (calculatedHeight - (this->paddingTop + this->paddingBottom));
HXLINE( 727)		if (::hx::IsNotNull( this->_currentIcon )) {
HXLINE( 728)			Float adjustedGap = this->gap;
HXLINE( 729)			if ((adjustedGap == ::Math_obj::POSITIVE_INFINITY)) {
HXLINE( 730)				adjustedGap = this->minGap;
            			}
HXLINE( 732)			bool _hx_tmp;
HXDLIN( 732)			if (::hx::IsNotEq( this->iconPosition,::feathers::layout::RelativePosition_obj::LEFT_dyn() )) {
HXLINE( 732)				_hx_tmp = ::hx::IsEq( this->iconPosition,::feathers::layout::RelativePosition_obj::RIGHT_dyn() );
            			}
            			else {
HXLINE( 732)				_hx_tmp = true;
            			}
HXDLIN( 732)			if (_hx_tmp) {
HXLINE( 733)				calculatedWidth = (calculatedWidth - (this->_currentIcon->get_width() + adjustedGap));
            			}
HXLINE( 735)			bool _hx_tmp1;
HXDLIN( 735)			if (::hx::IsNotEq( this->iconPosition,::feathers::layout::RelativePosition_obj::TOP_dyn() )) {
HXLINE( 735)				_hx_tmp1 = ::hx::IsEq( this->iconPosition,::feathers::layout::RelativePosition_obj::BOTTOM_dyn() );
            			}
            			else {
HXLINE( 735)				_hx_tmp1 = true;
            			}
HXDLIN( 735)			if (_hx_tmp1) {
HXLINE( 736)				calculatedHeight = (calculatedHeight - (this->_currentIcon->get_height() + adjustedGap));
            			}
            		}
HXLINE( 739)		if ((calculatedWidth < ((Float)0.0))) {
HXLINE( 740)			calculatedWidth = ((Float)0.0);
            		}
HXLINE( 742)		if ((calculatedHeight < ((Float)0.0))) {
HXLINE( 743)			calculatedHeight = ((Float)0.0);
            		}
HXLINE( 745)		if ((calculatedWidth > this->_textMeasuredWidth)) {
HXLINE( 746)			calculatedWidth = this->_textMeasuredWidth;
            		}
HXLINE( 748)		if ((calculatedHeight > this->_textMeasuredHeight)) {
HXLINE( 749)			calculatedHeight = this->_textMeasuredHeight;
            		}
HXLINE( 751)		this->textField->set_width(calculatedWidth);
HXLINE( 752)		this->textField->set_height(calculatedHeight);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Button_obj,refreshTextFieldDimensions,(void))

void Button_obj::positionSingleChild( ::openfl::display::DisplayObject displayObject){
            	HX_STACKFRAME(&_hx_pos_204fe09b9701645f_755_positionSingleChild)
HXLINE( 756)		if (::hx::IsEq( this->horizontalAlign,::feathers::layout::HorizontalAlign_obj::LEFT_dyn() )) {
HXLINE( 757)			displayObject->set_x(this->paddingLeft);
            		}
            		else {
HXLINE( 758)			if (::hx::IsEq( this->horizontalAlign,::feathers::layout::HorizontalAlign_obj::RIGHT_dyn() )) {
HXLINE( 759)				Float _hx_tmp = (this->actualWidth - this->paddingRight);
HXDLIN( 759)				displayObject->set_x((_hx_tmp - displayObject->get_width()));
            			}
            			else {
HXLINE( 762)				Float _hx_tmp = this->paddingLeft;
HXDLIN( 762)				Float _hx_tmp1 = ((this->actualWidth - this->paddingLeft) - this->paddingRight);
HXDLIN( 762)				displayObject->set_x((_hx_tmp + ((_hx_tmp1 - displayObject->get_width()) / ((Float)2.0))));
            			}
            		}
HXLINE( 764)		if (::hx::IsEq( this->verticalAlign,::feathers::layout::VerticalAlign_obj::TOP_dyn() )) {
HXLINE( 765)			displayObject->set_y(this->paddingTop);
            		}
            		else {
HXLINE( 766)			if (::hx::IsEq( this->verticalAlign,::feathers::layout::VerticalAlign_obj::BOTTOM_dyn() )) {
HXLINE( 767)				Float _hx_tmp = (this->actualHeight - this->paddingBottom);
HXDLIN( 767)				displayObject->set_y((_hx_tmp - displayObject->get_height()));
            			}
            			else {
HXLINE( 770)				Float _hx_tmp = this->paddingTop;
HXDLIN( 770)				Float _hx_tmp1 = ((this->actualHeight - this->paddingTop) - this->paddingBottom);
HXDLIN( 770)				displayObject->set_y((_hx_tmp + ((_hx_tmp1 - displayObject->get_height()) / ((Float)2.0))));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Button_obj,positionSingleChild,(void))

void Button_obj::positionTextAndIcon(){
            	HX_STACKFRAME(&_hx_pos_204fe09b9701645f_774_positionTextAndIcon)
HXLINE( 775)		if (::hx::IsEq( this->iconPosition,::feathers::layout::RelativePosition_obj::TOP_dyn() )) {
HXLINE( 776)			if ((this->gap == ::Math_obj::POSITIVE_INFINITY)) {
HXLINE( 777)				this->_currentIcon->set_y(this->paddingTop);
HXLINE( 778)				 ::openfl::text::TextField _hx_tmp = this->textField;
HXDLIN( 778)				Float _hx_tmp1 = (this->actualHeight - this->paddingBottom);
HXDLIN( 778)				_hx_tmp->set_y((_hx_tmp1 - this->textField->get_height()));
            			}
            			else {
HXLINE( 780)				if (::hx::IsEq( this->verticalAlign,::feathers::layout::VerticalAlign_obj::TOP_dyn() )) {
HXLINE( 781)					 ::openfl::text::TextField _g = this->textField;
HXDLIN( 781)					Float _hx_tmp = _g->get_y();
HXDLIN( 781)					Float _hx_tmp1 = this->_currentIcon->get_height();
HXDLIN( 781)					_g->set_y((_hx_tmp + (_hx_tmp1 + this->gap)));
            				}
            				else {
HXLINE( 782)					if (::hx::IsEq( this->verticalAlign,::feathers::layout::VerticalAlign_obj::MIDDLE_dyn() )) {
HXLINE( 783)						 ::openfl::text::TextField _g = this->textField;
HXDLIN( 783)						Float _hx_tmp = _g->get_y();
HXDLIN( 783)						Float _hx_tmp1 = this->_currentIcon->get_height();
HXDLIN( 783)						_g->set_y((_hx_tmp + ((_hx_tmp1 + this->gap) / ((Float)2.0))));
            					}
            				}
HXLINE( 785)				 ::openfl::display::DisplayObject _hx_tmp = this->_currentIcon;
HXDLIN( 785)				Float _hx_tmp1 = this->textField->get_y();
HXDLIN( 785)				Float _hx_tmp2 = (_hx_tmp1 - this->_currentIcon->get_height());
HXDLIN( 785)				_hx_tmp->set_y((_hx_tmp2 - this->gap));
            			}
            		}
            		else {
HXLINE( 787)			if (::hx::IsEq( this->iconPosition,::feathers::layout::RelativePosition_obj::RIGHT_dyn() )) {
HXLINE( 788)				if ((this->gap == ::Math_obj::POSITIVE_INFINITY)) {
HXLINE( 789)					this->textField->set_x(this->paddingLeft);
HXLINE( 790)					 ::openfl::display::DisplayObject _hx_tmp = this->_currentIcon;
HXDLIN( 790)					Float _hx_tmp1 = (this->actualWidth - this->paddingRight);
HXDLIN( 790)					_hx_tmp->set_x((_hx_tmp1 - this->_currentIcon->get_width()));
            				}
            				else {
HXLINE( 792)					if (::hx::IsEq( this->horizontalAlign,::feathers::layout::HorizontalAlign_obj::RIGHT_dyn() )) {
HXLINE( 793)						 ::openfl::text::TextField _g = this->textField;
HXDLIN( 793)						Float _hx_tmp = _g->get_x();
HXDLIN( 793)						Float _hx_tmp1 = this->_currentIcon->get_width();
HXDLIN( 793)						_g->set_x((_hx_tmp - (_hx_tmp1 + this->gap)));
            					}
            					else {
HXLINE( 794)						if (::hx::IsEq( this->horizontalAlign,::feathers::layout::HorizontalAlign_obj::CENTER_dyn() )) {
HXLINE( 795)							 ::openfl::text::TextField _g = this->textField;
HXDLIN( 795)							Float _hx_tmp = _g->get_x();
HXDLIN( 795)							Float _hx_tmp1 = this->_currentIcon->get_width();
HXDLIN( 795)							_g->set_x((_hx_tmp - ((_hx_tmp1 + this->gap) / ((Float)2.0))));
            						}
            					}
HXLINE( 797)					 ::openfl::display::DisplayObject _hx_tmp = this->_currentIcon;
HXDLIN( 797)					Float _hx_tmp1 = this->textField->get_x();
HXDLIN( 797)					Float _hx_tmp2 = (_hx_tmp1 + this->textField->get_width());
HXDLIN( 797)					_hx_tmp->set_x((_hx_tmp2 + this->gap));
            				}
            			}
            			else {
HXLINE( 799)				if (::hx::IsEq( this->iconPosition,::feathers::layout::RelativePosition_obj::BOTTOM_dyn() )) {
HXLINE( 800)					if ((this->gap == ::Math_obj::POSITIVE_INFINITY)) {
HXLINE( 801)						this->textField->set_y(this->paddingTop);
HXLINE( 802)						 ::openfl::display::DisplayObject _hx_tmp = this->_currentIcon;
HXDLIN( 802)						Float _hx_tmp1 = (this->actualHeight - this->paddingBottom);
HXDLIN( 802)						_hx_tmp->set_y((_hx_tmp1 - this->_currentIcon->get_height()));
            					}
            					else {
HXLINE( 804)						if (::hx::IsEq( this->verticalAlign,::feathers::layout::VerticalAlign_obj::BOTTOM_dyn() )) {
HXLINE( 805)							 ::openfl::text::TextField _g = this->textField;
HXDLIN( 805)							Float _hx_tmp = _g->get_y();
HXDLIN( 805)							Float _hx_tmp1 = this->_currentIcon->get_height();
HXDLIN( 805)							_g->set_y((_hx_tmp - (_hx_tmp1 + this->gap)));
            						}
            						else {
HXLINE( 806)							if (::hx::IsEq( this->verticalAlign,::feathers::layout::VerticalAlign_obj::MIDDLE_dyn() )) {
HXLINE( 807)								 ::openfl::text::TextField _g = this->textField;
HXDLIN( 807)								Float _hx_tmp = _g->get_y();
HXDLIN( 807)								Float _hx_tmp1 = this->_currentIcon->get_height();
HXDLIN( 807)								_g->set_y((_hx_tmp - ((_hx_tmp1 + this->gap) / ((Float)2.0))));
            							}
            						}
HXLINE( 809)						 ::openfl::display::DisplayObject _hx_tmp = this->_currentIcon;
HXDLIN( 809)						Float _hx_tmp1 = this->textField->get_y();
HXDLIN( 809)						Float _hx_tmp2 = (_hx_tmp1 + this->textField->get_height());
HXDLIN( 809)						_hx_tmp->set_y((_hx_tmp2 + this->gap));
            					}
            				}
            				else {
HXLINE( 811)					if (::hx::IsEq( this->iconPosition,::feathers::layout::RelativePosition_obj::LEFT_dyn() )) {
HXLINE( 812)						if ((this->gap == ::Math_obj::POSITIVE_INFINITY)) {
HXLINE( 813)							this->_currentIcon->set_x(this->paddingLeft);
HXLINE( 814)							 ::openfl::text::TextField _hx_tmp = this->textField;
HXDLIN( 814)							Float _hx_tmp1 = (this->actualWidth - this->paddingRight);
HXDLIN( 814)							_hx_tmp->set_x((_hx_tmp1 - this->textField->get_width()));
            						}
            						else {
HXLINE( 816)							if (::hx::IsEq( this->horizontalAlign,::feathers::layout::HorizontalAlign_obj::LEFT_dyn() )) {
HXLINE( 817)								 ::openfl::text::TextField _g = this->textField;
HXDLIN( 817)								Float _hx_tmp = _g->get_x();
HXDLIN( 817)								Float _hx_tmp1 = this->gap;
HXDLIN( 817)								_g->set_x((_hx_tmp + (_hx_tmp1 + this->_currentIcon->get_width())));
            							}
            							else {
HXLINE( 818)								if (::hx::IsEq( this->horizontalAlign,::feathers::layout::HorizontalAlign_obj::CENTER_dyn() )) {
HXLINE( 819)									 ::openfl::text::TextField _g = this->textField;
HXDLIN( 819)									Float _hx_tmp = _g->get_x();
HXDLIN( 819)									Float _hx_tmp1 = this->gap;
HXDLIN( 819)									_g->set_x((_hx_tmp + ((_hx_tmp1 + this->_currentIcon->get_width()) / ((Float)2.0))));
            								}
            							}
HXLINE( 821)							 ::openfl::display::DisplayObject _hx_tmp = this->_currentIcon;
HXDLIN( 821)							Float _hx_tmp1 = this->textField->get_x();
HXDLIN( 821)							Float _hx_tmp2 = (_hx_tmp1 - this->gap);
HXDLIN( 821)							_hx_tmp->set_x((_hx_tmp2 - this->_currentIcon->get_width()));
            						}
            					}
            				}
            			}
            		}
HXLINE( 825)		bool _hx_tmp;
HXDLIN( 825)		if (::hx::IsNotEq( this->iconPosition,::feathers::layout::RelativePosition_obj::LEFT_dyn() )) {
HXLINE( 825)			_hx_tmp = ::hx::IsEq( this->iconPosition,::feathers::layout::RelativePosition_obj::RIGHT_dyn() );
            		}
            		else {
HXLINE( 825)			_hx_tmp = true;
            		}
HXDLIN( 825)		if (_hx_tmp) {
HXLINE( 826)			if (::hx::IsEq( this->verticalAlign,::feathers::layout::VerticalAlign_obj::TOP_dyn() )) {
HXLINE( 827)				this->_currentIcon->set_y(this->paddingTop);
            			}
            			else {
HXLINE( 828)				if (::hx::IsEq( this->verticalAlign,::feathers::layout::VerticalAlign_obj::BOTTOM_dyn() )) {
HXLINE( 829)					 ::openfl::display::DisplayObject _hx_tmp = this->_currentIcon;
HXDLIN( 829)					Float _hx_tmp1 = (this->actualHeight - this->paddingBottom);
HXDLIN( 829)					_hx_tmp->set_y((_hx_tmp1 - this->_currentIcon->get_height()));
            				}
            				else {
HXLINE( 831)					 ::openfl::display::DisplayObject _hx_tmp = this->_currentIcon;
HXDLIN( 831)					Float _hx_tmp1 = this->paddingTop;
HXDLIN( 831)					Float _hx_tmp2 = ((this->actualHeight - this->paddingTop) - this->paddingBottom);
HXDLIN( 831)					_hx_tmp->set_y((_hx_tmp1 + ((_hx_tmp2 - this->_currentIcon->get_height()) / ((Float)2.0))));
            				}
            			}
            		}
            		else {
HXLINE( 835)			if (::hx::IsEq( this->horizontalAlign,::feathers::layout::HorizontalAlign_obj::LEFT_dyn() )) {
HXLINE( 836)				this->_currentIcon->set_x(this->paddingLeft);
            			}
            			else {
HXLINE( 837)				if (::hx::IsEq( this->horizontalAlign,::feathers::layout::HorizontalAlign_obj::RIGHT_dyn() )) {
HXLINE( 838)					 ::openfl::display::DisplayObject _hx_tmp = this->_currentIcon;
HXDLIN( 838)					Float _hx_tmp1 = (this->actualWidth - this->paddingRight);
HXDLIN( 838)					_hx_tmp->set_x((_hx_tmp1 - this->_currentIcon->get_width()));
            				}
            				else {
HXLINE( 840)					 ::openfl::display::DisplayObject _hx_tmp = this->_currentIcon;
HXDLIN( 840)					Float _hx_tmp1 = this->paddingLeft;
HXDLIN( 840)					Float _hx_tmp2 = ((this->actualWidth - this->paddingLeft) - this->paddingRight);
HXDLIN( 840)					_hx_tmp->set_x((_hx_tmp1 + ((_hx_tmp2 - this->_currentIcon->get_width()) / ((Float)2.0))));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Button_obj,positionTextAndIcon,(void))

void Button_obj::refreshIcon(){
            	HX_GC_STACKFRAME(&_hx_pos_204fe09b9701645f_845_refreshIcon)
HXLINE( 846)		 ::openfl::display::DisplayObject oldIcon = this->_currentIcon;
HXLINE( 847)		this->_currentIcon = this->getCurrentIcon();
HXLINE( 848)		if (::hx::IsEq( this->_currentIcon,oldIcon )) {
HXLINE( 849)			return;
            		}
HXLINE( 851)		this->removeCurrentIcon(oldIcon);
HXLINE( 852)		if (::hx::IsNull( this->_currentIcon )) {
HXLINE( 853)			this->_iconMeasurements = null();
HXLINE( 854)			return;
            		}
HXLINE( 856)		if (::Std_obj::isOfType(this->_currentIcon,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IUIControl >()) ))) {
HXLINE( 857)			::feathers::core::IUIControl_obj::initializeNow( ::hx::interface_check(this->_currentIcon,0x2696a04f));
            		}
HXLINE( 859)		if (::hx::IsNull( this->_iconMeasurements )) {
HXLINE( 860)			this->_iconMeasurements =  ::feathers::layout::Measurements_obj::__alloc( HX_CTX ,this->_currentIcon);
            		}
            		else {
HXLINE( 862)			this->_iconMeasurements->save(this->_currentIcon);
            		}
HXLINE( 864)		if (::Std_obj::isOfType(this->_currentIcon,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IStateObserver >()) ))) {
HXLINE( 865)			::feathers::core::IStateObserver_obj::set_stateContext( ::hx::interface_check(this->_currentIcon,0xb36ec70d),::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 867)		this->addChild(this->_currentIcon);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Button_obj,refreshIcon,(void))

 ::openfl::display::DisplayObject Button_obj::getCurrentIcon(){
            	HX_STACKFRAME(&_hx_pos_204fe09b9701645f_870_getCurrentIcon)
HXLINE( 871)		::Dynamic this1 = this->_stateToIcon;
HXDLIN( 871)		 ::openfl::display::DisplayObject result = ( ( ::haxe::ds::EnumValueMap)(this1) )->get(this->get_currentState()).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 872)		if (::hx::IsNotNull( result )) {
HXLINE( 873)			return result;
            		}
HXLINE( 875)		return this->icon;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Button_obj,getCurrentIcon,return )

void Button_obj::removeCurrentIcon( ::openfl::display::DisplayObject icon){
            	HX_STACKFRAME(&_hx_pos_204fe09b9701645f_878_removeCurrentIcon)
HXLINE( 879)		if (::hx::IsNull( icon )) {
HXLINE( 880)			return;
            		}
HXLINE( 882)		if (::Std_obj::isOfType(icon,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IStateObserver >()) ))) {
HXLINE( 883)			::feathers::core::IStateObserver_obj::set_stateContext( ::hx::interface_check(icon,0xb36ec70d),null());
            		}
HXLINE( 885)		this->_iconMeasurements->restore(icon);
HXLINE( 886)		if (::hx::IsEq( icon->parent,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 889)			this->removeChild(icon);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Button_obj,removeCurrentIcon,(void))

::hx::Class Button_obj::get_styleContext(){
            	HX_STACKFRAME(&_hx_pos_5368d83f6b2d6dc3_42_get_styleContext)
HXDLIN(  42)		return ::hx::ClassOf< ::feathers::controls::Button >();
            	}


 ::openfl::text::TextFormat Button_obj::set_textFormat( ::openfl::text::TextFormat value){
            	HX_STACKFRAME(&_hx_pos_d6db11cb6d2c03a9_68_set_textFormat)
HXLINE(  69)		if (!(this->setStyle(HX_("textFormat",c4,0f,7f,34),null()))) {
HXLINE(  70)			return this->textFormat;
            		}
HXLINE(  72)		if (::hx::IsEq( this->textFormat,value )) {
HXLINE(  73)			return this->textFormat;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_textFormat_dyn();
HXLINE(  79)		this->textFormat = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->textFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Button_obj,set_textFormat,return )

 ::openfl::text::TextFormat Button_obj::clearStyle_textFormat(){
            	HX_STACKFRAME(&_hx_pos_d6db11cb6d2c03a9_94_clearStyle_textFormat)
HXLINE(  95)		this->set_textFormat(null());
HXLINE(  96)		return this->textFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Button_obj,clearStyle_textFormat,return )

bool Button_obj::set_embedFonts(bool value){
            	HX_STACKFRAME(&_hx_pos_d6db11cb6d2c03a9_68_set_embedFonts)
HXLINE(  69)		if (!(this->setStyle(HX_("embedFonts",2b,c7,e1,8e),null()))) {
HXLINE(  70)			return this->embedFonts;
            		}
HXLINE(  72)		if ((this->embedFonts == value)) {
HXLINE(  73)			return this->embedFonts;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_embedFonts_dyn();
HXLINE(  79)		this->embedFonts = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->embedFonts;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Button_obj,set_embedFonts,return )

bool Button_obj::clearStyle_embedFonts(){
            	HX_STACKFRAME(&_hx_pos_d6db11cb6d2c03a9_94_clearStyle_embedFonts)
HXLINE(  95)		this->set_embedFonts(false);
HXLINE(  96)		return this->embedFonts;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Button_obj,clearStyle_embedFonts,return )

 ::openfl::display::DisplayObject Button_obj::set_icon( ::openfl::display::DisplayObject value){
            	HX_STACKFRAME(&_hx_pos_d6db11cb6d2c03a9_68_set_icon)
HXLINE(  69)		if (!(this->setStyle(HX_("icon",79,e7,b2,45),null()))) {
HXLINE(  70)			return this->icon;
            		}
HXLINE(  72)		if (::hx::IsEq( this->icon,value )) {
HXLINE(  73)			return this->icon;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_icon_dyn();
HXLINE(  79)		this->icon = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->icon;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Button_obj,set_icon,return )

 ::openfl::display::DisplayObject Button_obj::clearStyle_icon(){
            	HX_STACKFRAME(&_hx_pos_d6db11cb6d2c03a9_94_clearStyle_icon)
HXLINE(  95)		this->set_icon(null());
HXLINE(  96)		return this->icon;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Button_obj,clearStyle_icon,return )

Float Button_obj::set_paddingTop(Float value){
            	HX_STACKFRAME(&_hx_pos_d6db11cb6d2c03a9_68_set_paddingTop)
HXLINE(  69)		if (!(this->setStyle(HX_("paddingTop",44,fd,05,3a),null()))) {
HXLINE(  70)			return this->paddingTop;
            		}
HXLINE(  72)		if ((this->paddingTop == value)) {
HXLINE(  73)			return this->paddingTop;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_paddingTop_dyn();
HXLINE(  79)		this->paddingTop = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->paddingTop;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Button_obj,set_paddingTop,return )

Float Button_obj::clearStyle_paddingTop(){
            	HX_STACKFRAME(&_hx_pos_d6db11cb6d2c03a9_94_clearStyle_paddingTop)
HXLINE(  95)		this->set_paddingTop(((Float)0.0));
HXLINE(  96)		return this->paddingTop;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Button_obj,clearStyle_paddingTop,return )

Float Button_obj::set_paddingRight(Float value){
            	HX_STACKFRAME(&_hx_pos_d6db11cb6d2c03a9_68_set_paddingRight)
HXLINE(  69)		if (!(this->setStyle(HX_("paddingRight",4b,ec,a7,1a),null()))) {
HXLINE(  70)			return this->paddingRight;
            		}
HXLINE(  72)		if ((this->paddingRight == value)) {
HXLINE(  73)			return this->paddingRight;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_paddingRight_dyn();
HXLINE(  79)		this->paddingRight = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->paddingRight;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Button_obj,set_paddingRight,return )

Float Button_obj::clearStyle_paddingRight(){
            	HX_STACKFRAME(&_hx_pos_d6db11cb6d2c03a9_94_clearStyle_paddingRight)
HXLINE(  95)		this->set_paddingRight(((Float)0.0));
HXLINE(  96)		return this->paddingRight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Button_obj,clearStyle_paddingRight,return )

Float Button_obj::set_paddingBottom(Float value){
            	HX_STACKFRAME(&_hx_pos_d6db11cb6d2c03a9_68_set_paddingBottom)
HXLINE(  69)		if (!(this->setStyle(HX_("paddingBottom",9c,67,99,4f),null()))) {
HXLINE(  70)			return this->paddingBottom;
            		}
HXLINE(  72)		if ((this->paddingBottom == value)) {
HXLINE(  73)			return this->paddingBottom;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_paddingBottom_dyn();
HXLINE(  79)		this->paddingBottom = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->paddingBottom;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Button_obj,set_paddingBottom,return )

Float Button_obj::clearStyle_paddingBottom(){
            	HX_STACKFRAME(&_hx_pos_d6db11cb6d2c03a9_94_clearStyle_paddingBottom)
HXLINE(  95)		this->set_paddingBottom(((Float)0.0));
HXLINE(  96)		return this->paddingBottom;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Button_obj,clearStyle_paddingBottom,return )

Float Button_obj::set_paddingLeft(Float value){
            	HX_STACKFRAME(&_hx_pos_d6db11cb6d2c03a9_68_set_paddingLeft)
HXLINE(  69)		if (!(this->setStyle(HX_("paddingLeft",78,4a,e6,85),null()))) {
HXLINE(  70)			return this->paddingLeft;
            		}
HXLINE(  72)		if ((this->paddingLeft == value)) {
HXLINE(  73)			return this->paddingLeft;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_paddingLeft_dyn();
HXLINE(  79)		this->paddingLeft = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->paddingLeft;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Button_obj,set_paddingLeft,return )

Float Button_obj::clearStyle_paddingLeft(){
            	HX_STACKFRAME(&_hx_pos_d6db11cb6d2c03a9_94_clearStyle_paddingLeft)
HXLINE(  95)		this->set_paddingLeft(((Float)0.0));
HXLINE(  96)		return this->paddingLeft;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Button_obj,clearStyle_paddingLeft,return )

 ::feathers::layout::HorizontalAlign Button_obj::set_horizontalAlign( ::feathers::layout::HorizontalAlign value){
            	HX_STACKFRAME(&_hx_pos_d6db11cb6d2c03a9_68_set_horizontalAlign)
HXLINE(  69)		if (!(this->setStyle(HX_("horizontalAlign",41,8f,67,f4),null()))) {
HXLINE(  70)			return this->horizontalAlign;
            		}
HXLINE(  72)		if (::hx::IsEq( this->horizontalAlign,value )) {
HXLINE(  73)			return this->horizontalAlign;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_horizontalAlign_dyn();
HXLINE(  79)		this->horizontalAlign = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->horizontalAlign;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Button_obj,set_horizontalAlign,return )

 ::feathers::layout::HorizontalAlign Button_obj::clearStyle_horizontalAlign(){
            	HX_STACKFRAME(&_hx_pos_d6db11cb6d2c03a9_94_clearStyle_horizontalAlign)
HXLINE(  95)		this->set_horizontalAlign(::feathers::layout::HorizontalAlign_obj::CENTER_dyn());
HXLINE(  96)		return this->horizontalAlign;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Button_obj,clearStyle_horizontalAlign,return )

 ::feathers::layout::VerticalAlign Button_obj::set_verticalAlign( ::feathers::layout::VerticalAlign value){
            	HX_STACKFRAME(&_hx_pos_d6db11cb6d2c03a9_68_set_verticalAlign)
HXLINE(  69)		if (!(this->setStyle(HX_("verticalAlign",6f,1e,7c,e4),null()))) {
HXLINE(  70)			return this->verticalAlign;
            		}
HXLINE(  72)		if (::hx::IsEq( this->verticalAlign,value )) {
HXLINE(  73)			return this->verticalAlign;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_verticalAlign_dyn();
HXLINE(  79)		this->verticalAlign = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->verticalAlign;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Button_obj,set_verticalAlign,return )

 ::feathers::layout::VerticalAlign Button_obj::clearStyle_verticalAlign(){
            	HX_STACKFRAME(&_hx_pos_d6db11cb6d2c03a9_94_clearStyle_verticalAlign)
HXLINE(  95)		this->set_verticalAlign(::feathers::layout::VerticalAlign_obj::MIDDLE_dyn());
HXLINE(  96)		return this->verticalAlign;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Button_obj,clearStyle_verticalAlign,return )

 ::feathers::layout::RelativePosition Button_obj::set_iconPosition( ::feathers::layout::RelativePosition value){
            	HX_STACKFRAME(&_hx_pos_d6db11cb6d2c03a9_68_set_iconPosition)
HXLINE(  69)		if (!(this->setStyle(HX_("iconPosition",42,e5,38,76),null()))) {
HXLINE(  70)			return this->iconPosition;
            		}
HXLINE(  72)		if (::hx::IsEq( this->iconPosition,value )) {
HXLINE(  73)			return this->iconPosition;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_iconPosition_dyn();
HXLINE(  79)		this->iconPosition = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->iconPosition;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Button_obj,set_iconPosition,return )

 ::feathers::layout::RelativePosition Button_obj::clearStyle_iconPosition(){
            	HX_STACKFRAME(&_hx_pos_d6db11cb6d2c03a9_94_clearStyle_iconPosition)
HXLINE(  95)		this->set_iconPosition(::feathers::layout::RelativePosition_obj::LEFT_dyn());
HXLINE(  96)		return this->iconPosition;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Button_obj,clearStyle_iconPosition,return )

Float Button_obj::set_gap(Float value){
            	HX_STACKFRAME(&_hx_pos_d6db11cb6d2c03a9_68_set_gap)
HXLINE(  69)		if (!(this->setStyle(HX_("gap",16,7d,4e,00),null()))) {
HXLINE(  70)			return this->gap;
            		}
HXLINE(  72)		if ((this->gap == value)) {
HXLINE(  73)			return this->gap;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_gap_dyn();
HXLINE(  79)		this->gap = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->gap;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Button_obj,set_gap,return )

Float Button_obj::clearStyle_gap(){
            	HX_STACKFRAME(&_hx_pos_d6db11cb6d2c03a9_94_clearStyle_gap)
HXLINE(  95)		this->set_gap(((Float)0.0));
HXLINE(  96)		return this->gap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Button_obj,clearStyle_gap,return )

Float Button_obj::set_minGap(Float value){
            	HX_STACKFRAME(&_hx_pos_d6db11cb6d2c03a9_68_set_minGap)
HXLINE(  69)		if (!(this->setStyle(HX_("minGap",a4,ea,e4,52),null()))) {
HXLINE(  70)			return this->minGap;
            		}
HXLINE(  72)		if ((this->minGap == value)) {
HXLINE(  73)			return this->minGap;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_minGap_dyn();
HXLINE(  79)		this->minGap = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->minGap;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Button_obj,set_minGap,return )

Float Button_obj::clearStyle_minGap(){
            	HX_STACKFRAME(&_hx_pos_d6db11cb6d2c03a9_94_clearStyle_minGap)
HXLINE(  95)		this->set_minGap(((Float)0.0));
HXLINE(  96)		return this->minGap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Button_obj,clearStyle_minGap,return )


::hx::ObjectPtr< Button_obj > Button_obj::__new() {
	::hx::ObjectPtr< Button_obj > __this = new Button_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Button_obj > Button_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Button_obj *__this = (Button_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Button_obj), true, "feathers.controls.Button"));
	*(void **)__this = Button_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Button_obj::Button_obj()
{
}

void Button_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Button);
	HX_MARK_MEMBER_NAME(textField,"textField");
	HX_MARK_MEMBER_NAME(_previousText,"_previousText");
	HX_MARK_MEMBER_NAME(_previousTextFormat,"_previousTextFormat");
	HX_MARK_MEMBER_NAME(_updatedTextStyles,"_updatedTextStyles");
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(textFormat,"textFormat");
	HX_MARK_MEMBER_NAME(embedFonts,"embedFonts");
	HX_MARK_MEMBER_NAME(_stateToIcon,"_stateToIcon");
	HX_MARK_MEMBER_NAME(_iconMeasurements,"_iconMeasurements");
	HX_MARK_MEMBER_NAME(_currentIcon,"_currentIcon");
	HX_MARK_MEMBER_NAME(_ignoreIconResizes,"_ignoreIconResizes");
	HX_MARK_MEMBER_NAME(icon,"icon");
	HX_MARK_MEMBER_NAME(paddingTop,"paddingTop");
	HX_MARK_MEMBER_NAME(paddingRight,"paddingRight");
	HX_MARK_MEMBER_NAME(paddingBottom,"paddingBottom");
	HX_MARK_MEMBER_NAME(paddingLeft,"paddingLeft");
	HX_MARK_MEMBER_NAME(horizontalAlign,"horizontalAlign");
	HX_MARK_MEMBER_NAME(verticalAlign,"verticalAlign");
	HX_MARK_MEMBER_NAME(iconPosition,"iconPosition");
	HX_MARK_MEMBER_NAME(gap,"gap");
	HX_MARK_MEMBER_NAME(minGap,"minGap");
	HX_MARK_MEMBER_NAME(_textMeasuredWidth,"_textMeasuredWidth");
	HX_MARK_MEMBER_NAME(_textMeasuredHeight,"_textMeasuredHeight");
	HX_MARK_MEMBER_NAME(_stateToTextFormat,"_stateToTextFormat");
	 ::feathers::controls::BasicButton_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Button_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(textField,"textField");
	HX_VISIT_MEMBER_NAME(_previousText,"_previousText");
	HX_VISIT_MEMBER_NAME(_previousTextFormat,"_previousTextFormat");
	HX_VISIT_MEMBER_NAME(_updatedTextStyles,"_updatedTextStyles");
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(textFormat,"textFormat");
	HX_VISIT_MEMBER_NAME(embedFonts,"embedFonts");
	HX_VISIT_MEMBER_NAME(_stateToIcon,"_stateToIcon");
	HX_VISIT_MEMBER_NAME(_iconMeasurements,"_iconMeasurements");
	HX_VISIT_MEMBER_NAME(_currentIcon,"_currentIcon");
	HX_VISIT_MEMBER_NAME(_ignoreIconResizes,"_ignoreIconResizes");
	HX_VISIT_MEMBER_NAME(icon,"icon");
	HX_VISIT_MEMBER_NAME(paddingTop,"paddingTop");
	HX_VISIT_MEMBER_NAME(paddingRight,"paddingRight");
	HX_VISIT_MEMBER_NAME(paddingBottom,"paddingBottom");
	HX_VISIT_MEMBER_NAME(paddingLeft,"paddingLeft");
	HX_VISIT_MEMBER_NAME(horizontalAlign,"horizontalAlign");
	HX_VISIT_MEMBER_NAME(verticalAlign,"verticalAlign");
	HX_VISIT_MEMBER_NAME(iconPosition,"iconPosition");
	HX_VISIT_MEMBER_NAME(gap,"gap");
	HX_VISIT_MEMBER_NAME(minGap,"minGap");
	HX_VISIT_MEMBER_NAME(_textMeasuredWidth,"_textMeasuredWidth");
	HX_VISIT_MEMBER_NAME(_textMeasuredHeight,"_textMeasuredHeight");
	HX_VISIT_MEMBER_NAME(_stateToTextFormat,"_stateToTextFormat");
	 ::feathers::controls::BasicButton_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Button_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"gap") ) { return ::hx::Val( gap ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_text() : text ); }
		if (HX_FIELD_EQ(inName,"icon") ) { return ::hx::Val( icon ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"minGap") ) { return ::hx::Val( minGap ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"measure") ) { return ::hx::Val( measure_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_gap") ) { return ::hx::Val( set_gap_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_text") ) { return ::hx::Val( get_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return ::hx::Val( set_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_icon") ) { return ::hx::Val( set_icon_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"textField") ) { return ::hx::Val( textField ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"textFormat") ) { return ::hx::Val( textFormat ); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { return ::hx::Val( embedFonts ); }
		if (HX_FIELD_EQ(inName,"paddingTop") ) { return ::hx::Val( paddingTop ); }
		if (HX_FIELD_EQ(inName,"initialize") ) { return ::hx::Val( initialize_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_minGap") ) { return ::hx::Val( set_minGap_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"paddingLeft") ) { return ::hx::Val( paddingLeft ); }
		if (HX_FIELD_EQ(inName,"refreshText") ) { return ::hx::Val( refreshText_dyn() ); }
		if (HX_FIELD_EQ(inName,"refreshIcon") ) { return ::hx::Val( refreshIcon_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_stateToIcon") ) { return ::hx::Val( _stateToIcon ); }
		if (HX_FIELD_EQ(inName,"_currentIcon") ) { return ::hx::Val( _currentIcon ); }
		if (HX_FIELD_EQ(inName,"paddingRight") ) { return ::hx::Val( paddingRight ); }
		if (HX_FIELD_EQ(inName,"iconPosition") ) { return ::hx::Val( iconPosition ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_previousText") ) { return ::hx::Val( _previousText ); }
		if (HX_FIELD_EQ(inName,"paddingBottom") ) { return ::hx::Val( paddingBottom ); }
		if (HX_FIELD_EQ(inName,"verticalAlign") ) { return ::hx::Val( verticalAlign ); }
		if (HX_FIELD_EQ(inName,"layoutContent") ) { return ::hx::Val( layoutContent_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getCurrentIcon") ) { return ::hx::Val( getCurrentIcon_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_textFormat") ) { return ::hx::Val( set_textFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_embedFonts") ) { return ::hx::Val( set_embedFonts_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingTop") ) { return ::hx::Val( set_paddingTop_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_gap") ) { return ::hx::Val( clearStyle_gap_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"horizontalAlign") ) { return ::hx::Val( horizontalAlign ); }
		if (HX_FIELD_EQ(inName,"getIconForState") ) { return ::hx::Val( getIconForState_dyn() ); }
		if (HX_FIELD_EQ(inName,"setIconForState") ) { return ::hx::Val( setIconForState_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_icon") ) { return ::hx::Val( clearStyle_icon_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingLeft") ) { return ::hx::Val( set_paddingLeft_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_styleContext") ) { return ::hx::Val( get_styleContext_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingRight") ) { return ::hx::Val( set_paddingRight_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_iconPosition") ) { return ::hx::Val( set_iconPosition_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_iconMeasurements") ) { return ::hx::Val( _iconMeasurements ); }
		if (HX_FIELD_EQ(inName,"refreshTextStyles") ) { return ::hx::Val( refreshTextStyles_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeCurrentIcon") ) { return ::hx::Val( removeCurrentIcon_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingBottom") ) { return ::hx::Val( set_paddingBottom_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_verticalAlign") ) { return ::hx::Val( set_verticalAlign_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_minGap") ) { return ::hx::Val( clearStyle_minGap_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_updatedTextStyles") ) { return ::hx::Val( _updatedTextStyles ); }
		if (HX_FIELD_EQ(inName,"_ignoreIconResizes") ) { return ::hx::Val( _ignoreIconResizes ); }
		if (HX_FIELD_EQ(inName,"_textMeasuredWidth") ) { return ::hx::Val( _textMeasuredWidth ); }
		if (HX_FIELD_EQ(inName,"_stateToTextFormat") ) { return ::hx::Val( _stateToTextFormat ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_previousTextFormat") ) { return ::hx::Val( _previousTextFormat ); }
		if (HX_FIELD_EQ(inName,"_textMeasuredHeight") ) { return ::hx::Val( _textMeasuredHeight ); }
		if (HX_FIELD_EQ(inName,"positionSingleChild") ) { return ::hx::Val( positionSingleChild_dyn() ); }
		if (HX_FIELD_EQ(inName,"positionTextAndIcon") ) { return ::hx::Val( positionTextAndIcon_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_horizontalAlign") ) { return ::hx::Val( set_horizontalAlign_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getCurrentTextFormat") ) { return ::hx::Val( getCurrentTextFormat_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"getTextFormatForState") ) { return ::hx::Val( getTextFormatForState_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTextFormatForState") ) { return ::hx::Val( setTextFormatForState_dyn() ); }
		if (HX_FIELD_EQ(inName,"initializeButtonTheme") ) { return ::hx::Val( initializeButtonTheme_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_textFormat") ) { return ::hx::Val( clearStyle_textFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_embedFonts") ) { return ::hx::Val( clearStyle_embedFonts_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_paddingTop") ) { return ::hx::Val( clearStyle_paddingTop_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"clearStyle_paddingLeft") ) { return ::hx::Val( clearStyle_paddingLeft_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"clearStyle_paddingRight") ) { return ::hx::Val( clearStyle_paddingRight_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_iconPosition") ) { return ::hx::Val( clearStyle_iconPosition_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"clearStyle_paddingBottom") ) { return ::hx::Val( clearStyle_paddingBottom_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_verticalAlign") ) { return ::hx::Val( clearStyle_verticalAlign_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"refreshTextFieldDimensions") ) { return ::hx::Val( refreshTextFieldDimensions_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_horizontalAlign") ) { return ::hx::Val( clearStyle_horizontalAlign_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Button_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"gap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_gap(inValue.Cast< Float >()) );gap=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_text(inValue.Cast< ::String >()) );text=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"icon") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_icon(inValue.Cast<  ::openfl::display::DisplayObject >()) );icon=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"minGap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_minGap(inValue.Cast< Float >()) );minGap=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"textField") ) { textField=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"textFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_textFormat(inValue.Cast<  ::openfl::text::TextFormat >()) );textFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_embedFonts(inValue.Cast< bool >()) );embedFonts=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paddingTop") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingTop(inValue.Cast< Float >()) );paddingTop=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"paddingLeft") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingLeft(inValue.Cast< Float >()) );paddingLeft=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_stateToIcon") ) { _stateToIcon=inValue.Cast<  ::haxe::ds::EnumValueMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_currentIcon") ) { _currentIcon=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paddingRight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingRight(inValue.Cast< Float >()) );paddingRight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iconPosition") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_iconPosition(inValue.Cast<  ::feathers::layout::RelativePosition >()) );iconPosition=inValue.Cast<  ::feathers::layout::RelativePosition >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_previousText") ) { _previousText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paddingBottom") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingBottom(inValue.Cast< Float >()) );paddingBottom=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"verticalAlign") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_verticalAlign(inValue.Cast<  ::feathers::layout::VerticalAlign >()) );verticalAlign=inValue.Cast<  ::feathers::layout::VerticalAlign >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"horizontalAlign") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_horizontalAlign(inValue.Cast<  ::feathers::layout::HorizontalAlign >()) );horizontalAlign=inValue.Cast<  ::feathers::layout::HorizontalAlign >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_iconMeasurements") ) { _iconMeasurements=inValue.Cast<  ::feathers::layout::Measurements >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_updatedTextStyles") ) { _updatedTextStyles=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_ignoreIconResizes") ) { _ignoreIconResizes=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_textMeasuredWidth") ) { _textMeasuredWidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_stateToTextFormat") ) { _stateToTextFormat=inValue.Cast<  ::haxe::ds::EnumValueMap >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_previousTextFormat") ) { _previousTextFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_textMeasuredHeight") ) { _textMeasuredHeight=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Button_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("textField",cd,24,81,99));
	outFields->push(HX_("_previousText",63,2f,0a,d6));
	outFields->push(HX_("_previousTextFormat",fa,5e,47,b1));
	outFields->push(HX_("_updatedTextStyles",8b,09,a3,ed));
	outFields->push(HX_("text",ad,cc,f9,4c));
	outFields->push(HX_("textFormat",c4,0f,7f,34));
	outFields->push(HX_("embedFonts",2b,c7,e1,8e));
	outFields->push(HX_("_stateToIcon",86,4d,ff,5b));
	outFields->push(HX_("_iconMeasurements",6f,a8,d1,97));
	outFields->push(HX_("_currentIcon",53,6e,4e,e4));
	outFields->push(HX_("_ignoreIconResizes",55,46,52,72));
	outFields->push(HX_("icon",79,e7,b2,45));
	outFields->push(HX_("paddingTop",44,fd,05,3a));
	outFields->push(HX_("paddingRight",4b,ec,a7,1a));
	outFields->push(HX_("paddingBottom",9c,67,99,4f));
	outFields->push(HX_("paddingLeft",78,4a,e6,85));
	outFields->push(HX_("horizontalAlign",41,8f,67,f4));
	outFields->push(HX_("verticalAlign",6f,1e,7c,e4));
	outFields->push(HX_("iconPosition",42,e5,38,76));
	outFields->push(HX_("gap",16,7d,4e,00));
	outFields->push(HX_("minGap",a4,ea,e4,52));
	outFields->push(HX_("_textMeasuredWidth",b4,10,38,8f));
	outFields->push(HX_("_textMeasuredHeight",79,05,26,78));
	outFields->push(HX_("_stateToTextFormat",91,fd,b2,b5));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Button_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::text::TextField */ ,(int)offsetof(Button_obj,textField),HX_("textField",cd,24,81,99)},
	{::hx::fsString,(int)offsetof(Button_obj,_previousText),HX_("_previousText",63,2f,0a,d6)},
	{::hx::fsObject /*  ::openfl::text::TextFormat */ ,(int)offsetof(Button_obj,_previousTextFormat),HX_("_previousTextFormat",fa,5e,47,b1)},
	{::hx::fsBool,(int)offsetof(Button_obj,_updatedTextStyles),HX_("_updatedTextStyles",8b,09,a3,ed)},
	{::hx::fsString,(int)offsetof(Button_obj,text),HX_("text",ad,cc,f9,4c)},
	{::hx::fsObject /*  ::openfl::text::TextFormat */ ,(int)offsetof(Button_obj,textFormat),HX_("textFormat",c4,0f,7f,34)},
	{::hx::fsBool,(int)offsetof(Button_obj,embedFonts),HX_("embedFonts",2b,c7,e1,8e)},
	{::hx::fsObject /*  ::haxe::ds::EnumValueMap */ ,(int)offsetof(Button_obj,_stateToIcon),HX_("_stateToIcon",86,4d,ff,5b)},
	{::hx::fsObject /*  ::feathers::layout::Measurements */ ,(int)offsetof(Button_obj,_iconMeasurements),HX_("_iconMeasurements",6f,a8,d1,97)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(Button_obj,_currentIcon),HX_("_currentIcon",53,6e,4e,e4)},
	{::hx::fsBool,(int)offsetof(Button_obj,_ignoreIconResizes),HX_("_ignoreIconResizes",55,46,52,72)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(Button_obj,icon),HX_("icon",79,e7,b2,45)},
	{::hx::fsFloat,(int)offsetof(Button_obj,paddingTop),HX_("paddingTop",44,fd,05,3a)},
	{::hx::fsFloat,(int)offsetof(Button_obj,paddingRight),HX_("paddingRight",4b,ec,a7,1a)},
	{::hx::fsFloat,(int)offsetof(Button_obj,paddingBottom),HX_("paddingBottom",9c,67,99,4f)},
	{::hx::fsFloat,(int)offsetof(Button_obj,paddingLeft),HX_("paddingLeft",78,4a,e6,85)},
	{::hx::fsObject /*  ::feathers::layout::HorizontalAlign */ ,(int)offsetof(Button_obj,horizontalAlign),HX_("horizontalAlign",41,8f,67,f4)},
	{::hx::fsObject /*  ::feathers::layout::VerticalAlign */ ,(int)offsetof(Button_obj,verticalAlign),HX_("verticalAlign",6f,1e,7c,e4)},
	{::hx::fsObject /*  ::feathers::layout::RelativePosition */ ,(int)offsetof(Button_obj,iconPosition),HX_("iconPosition",42,e5,38,76)},
	{::hx::fsFloat,(int)offsetof(Button_obj,gap),HX_("gap",16,7d,4e,00)},
	{::hx::fsFloat,(int)offsetof(Button_obj,minGap),HX_("minGap",a4,ea,e4,52)},
	{::hx::fsFloat,(int)offsetof(Button_obj,_textMeasuredWidth),HX_("_textMeasuredWidth",b4,10,38,8f)},
	{::hx::fsFloat,(int)offsetof(Button_obj,_textMeasuredHeight),HX_("_textMeasuredHeight",79,05,26,78)},
	{::hx::fsObject /*  ::haxe::ds::EnumValueMap */ ,(int)offsetof(Button_obj,_stateToTextFormat),HX_("_stateToTextFormat",91,fd,b2,b5)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Button_obj_sStaticStorageInfo = 0;
#endif

static ::String Button_obj_sMemberFields[] = {
	HX_("textField",cd,24,81,99),
	HX_("_previousText",63,2f,0a,d6),
	HX_("_previousTextFormat",fa,5e,47,b1),
	HX_("_updatedTextStyles",8b,09,a3,ed),
	HX_("text",ad,cc,f9,4c),
	HX_("get_text",36,88,b4,cc),
	HX_("set_text",aa,e1,11,7b),
	HX_("textFormat",c4,0f,7f,34),
	HX_("embedFonts",2b,c7,e1,8e),
	HX_("_stateToIcon",86,4d,ff,5b),
	HX_("_iconMeasurements",6f,a8,d1,97),
	HX_("_currentIcon",53,6e,4e,e4),
	HX_("_ignoreIconResizes",55,46,52,72),
	HX_("icon",79,e7,b2,45),
	HX_("paddingTop",44,fd,05,3a),
	HX_("paddingRight",4b,ec,a7,1a),
	HX_("paddingBottom",9c,67,99,4f),
	HX_("paddingLeft",78,4a,e6,85),
	HX_("horizontalAlign",41,8f,67,f4),
	HX_("verticalAlign",6f,1e,7c,e4),
	HX_("iconPosition",42,e5,38,76),
	HX_("gap",16,7d,4e,00),
	HX_("minGap",a4,ea,e4,52),
	HX_("_textMeasuredWidth",b4,10,38,8f),
	HX_("_textMeasuredHeight",79,05,26,78),
	HX_("_stateToTextFormat",91,fd,b2,b5),
	HX_("getTextFormatForState",62,b0,16,a8),
	HX_("setTextFormatForState",6e,7e,1f,fc),
	HX_("getIconForState",97,98,f8,4b),
	HX_("setIconForState",a3,15,c4,47),
	HX_("initializeButtonTheme",47,87,56,18),
	HX_("initialize",50,31,bb,ec),
	HX_("update",09,86,05,87),
	HX_("measure",5e,fb,e9,3c),
	HX_("refreshTextStyles",6a,44,c4,9f),
	HX_("refreshText",28,5c,95,41),
	HX_("getCurrentTextFormat",e7,c7,29,33),
	HX_("layoutContent",af,8f,21,da),
	HX_("refreshTextFieldDimensions",5f,dc,23,3e),
	HX_("positionSingleChild",cb,5b,d8,a2),
	HX_("positionTextAndIcon",9a,16,5d,d0),
	HX_("refreshIcon",f4,76,4e,3a),
	HX_("getCurrentIcon",5c,13,e3,05),
	HX_("removeCurrentIcon",6e,5a,95,38),
	HX_("get_styleContext",47,7d,20,4b),
	HX_("set_textFormat",81,80,94,ca),
	HX_("clearStyle_textFormat",ff,4a,aa,2d),
	HX_("set_embedFonts",e8,37,f7,24),
	HX_("clearStyle_embedFonts",66,02,0d,88),
	HX_("set_icon",76,fc,ca,73),
	HX_("clearStyle_icon",74,b4,31,6c),
	HX_("set_paddingTop",01,6e,1b,d0),
	HX_("clearStyle_paddingTop",7f,38,31,33),
	HX_("set_paddingRight",48,c6,88,75),
	HX_("clearStyle_paddingRight",46,ac,84,21),
	HX_("set_paddingBottom",ff,4a,77,79),
	HX_("clearStyle_paddingBottom",41,a3,e4,49),
	HX_("set_paddingLeft",1b,7f,93,42),
	HX_("clearStyle_paddingLeft",dd,e2,8e,92),
	HX_("set_horizontalAlign",64,51,0f,bc),
	HX_("clearStyle_horizontalAlign",26,be,b4,84),
	HX_("set_verticalAlign",d2,01,5a,0e),
	HX_("clearStyle_verticalAlign",14,5a,c7,de),
	HX_("set_iconPosition",3f,bf,19,d1),
	HX_("clearStyle_iconPosition",3d,a5,15,7d),
	HX_("set_gap",b9,d6,c4,19),
	HX_("clearStyle_gap",7b,a8,15,a8),
	HX_("set_minGap",e1,f8,e9,46),
	HX_("clearStyle_minGap",5f,2c,6d,30),
	::String(null()) };

::hx::Class Button_obj::__mClass;

void Button_obj::__register()
{
	Button_obj _hx_dummy;
	Button_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("feathers.controls.Button",8c,19,6b,c1);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Button_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Button_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Button_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Button_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Button_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_204fe09b9701645f_49_boot)
HXDLIN(  49)		__mClass->__meta__ =  ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("fields",79,8e,8e,80), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("setTextFormatForState",6e,7e,1f,fc), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("style",31,a5,1d,84),null())))
            				->setFixed(1,HX_("setIconForState",a3,15,c4,47), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("style",31,a5,1d,84),null()))))));
            	}
}

} // end namespace feathers
} // end namespace controls
