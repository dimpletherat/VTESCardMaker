// Generated by Haxe 4.1.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_feathers_controls_HScrollBar
#include <feathers/controls/HScrollBar.h>
#endif
#ifndef INCLUDED_feathers_controls_IRange
#include <feathers/controls/IRange.h>
#endif
#ifndef INCLUDED_feathers_controls_IScrollBar
#include <feathers/controls/IScrollBar.h>
#endif
#ifndef INCLUDED_feathers_controls_supportClasses_BaseScrollBar
#include <feathers/controls/supportClasses/BaseScrollBar.h>
#endif
#ifndef INCLUDED_feathers_core_FeathersControl
#include <feathers/core/FeathersControl.h>
#endif
#ifndef INCLUDED_feathers_core_IDisplayObject
#include <feathers/core/IDisplayObject.h>
#endif
#ifndef INCLUDED_feathers_core_IMeasureObject
#include <feathers/core/IMeasureObject.h>
#endif
#ifndef INCLUDED_feathers_core_IUIControl
#include <feathers/core/IUIControl.h>
#endif
#ifndef INCLUDED_feathers_core_IValidating
#include <feathers/core/IValidating.h>
#endif
#ifndef INCLUDED_feathers_core_MeasureSprite
#include <feathers/core/MeasureSprite.h>
#endif
#ifndef INCLUDED_feathers_core_ValidatingSprite
#include <feathers/core/ValidatingSprite.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayoutObject
#include <feathers/layout/ILayoutObject.h>
#endif
#ifndef INCLUDED_feathers_layout_Measurements
#include <feathers/layout/Measurements.h>
#endif
#ifndef INCLUDED_feathers_style_IDarkModeTheme
#include <feathers/style/IDarkModeTheme.h>
#endif
#ifndef INCLUDED_feathers_style_IStyleObject
#include <feathers/style/IStyleObject.h>
#endif
#ifndef INCLUDED_feathers_style_ITheme
#include <feathers/style/ITheme.h>
#endif
#ifndef INCLUDED_feathers_style_IVariantStyleObject
#include <feathers/style/IVariantStyleObject.h>
#endif
#ifndef INCLUDED_feathers_themes_ClassVariantTheme
#include <feathers/themes/ClassVariantTheme.h>
#endif
#ifndef INCLUDED_feathers_themes_steel_BaseSteelTheme
#include <feathers/themes/steel/BaseSteelTheme.h>
#endif
#ifndef INCLUDED_feathers_themes_steel_components_SteelHScrollBarStyles
#include <feathers/themes/steel/components/SteelHScrollBarStyles.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b60b2bd14bc92e54_32_new,"feathers.controls.HScrollBar","new",0x3fb363ca,"feathers.controls.HScrollBar.new","feathers/controls/HScrollBar.hx",32,0x02dfbf06)
HX_LOCAL_STACK_FRAME(_hx_pos_b60b2bd14bc92e54_39_initializeHScrollBarTheme,"feathers.controls.HScrollBar","initializeHScrollBarTheme",0x4cdde665,"feathers.controls.HScrollBar.initializeHScrollBarTheme","feathers/controls/HScrollBar.hx",39,0x02dfbf06)
HX_LOCAL_STACK_FRAME(_hx_pos_b60b2bd14bc92e54_42_valueToLocation,"feathers.controls.HScrollBar","valueToLocation",0xcad2a80b,"feathers.controls.HScrollBar.valueToLocation","feathers/controls/HScrollBar.hx",42,0x02dfbf06)
HX_LOCAL_STACK_FRAME(_hx_pos_b60b2bd14bc92e54_52_locationToValue,"feathers.controls.HScrollBar","locationToValue",0xfb26f0ab,"feathers.controls.HScrollBar.locationToValue","feathers/controls/HScrollBar.hx",52,0x02dfbf06)
HX_LOCAL_STACK_FRAME(_hx_pos_b60b2bd14bc92e54_61_saveThumbStart,"feathers.controls.HScrollBar","saveThumbStart",0xe56580df,"feathers.controls.HScrollBar.saveThumbStart","feathers/controls/HScrollBar.hx",61,0x02dfbf06)
HX_LOCAL_STACK_FRAME(_hx_pos_b60b2bd14bc92e54_72_measure,"feathers.controls.HScrollBar","measure",0x07888bc8,"feathers.controls.HScrollBar.measure","feathers/controls/HScrollBar.hx",72,0x02dfbf06)
HX_LOCAL_STACK_FRAME(_hx_pos_b60b2bd14bc92e54_136_layoutSplitTrack,"feathers.controls.HScrollBar","layoutSplitTrack",0x7f41faf1,"feathers.controls.HScrollBar.layoutSplitTrack","feathers/controls/HScrollBar.hx",136,0x02dfbf06)
HX_LOCAL_STACK_FRAME(_hx_pos_b60b2bd14bc92e54_162_layoutSingleTrack,"feathers.controls.HScrollBar","layoutSingleTrack",0x10895943,"feathers.controls.HScrollBar.layoutSingleTrack","feathers/controls/HScrollBar.hx",162,0x02dfbf06)
HX_LOCAL_STACK_FRAME(_hx_pos_b60b2bd14bc92e54_176_layoutThumb,"feathers.controls.HScrollBar","layoutThumb",0xee1c0876,"feathers.controls.HScrollBar.layoutThumb","feathers/controls/HScrollBar.hx",176,0x02dfbf06)
HX_LOCAL_STACK_FRAME(_hx_pos_ed703b4a618d8646_42_get_styleContext,"feathers.controls.HScrollBar","get_styleContext",0xbf058f9d,"feathers.controls.HScrollBar.get_styleContext","feathers/macros/StyleContextMacro.hx",42,0xea61cbb9)
namespace feathers{
namespace controls{

void HScrollBar_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_b60b2bd14bc92e54_32_new)
HXLINE(  33)		this->initializeHScrollBarTheme();
HXLINE(  35)		super::__construct();
            	}

Dynamic HScrollBar_obj::__CreateEmpty() { return new HScrollBar_obj; }

void *HScrollBar_obj::_hx_vtable = 0;

Dynamic HScrollBar_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< HScrollBar_obj > _hx_result = new HScrollBar_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool HScrollBar_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x28846938) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x093ab78b) {
				if (inClassId<=(int)0x0330636f) {
					return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
				} else {
					return inClassId==(int)0x093ab78b;
				}
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x28846938;
		}
	} else {
		if (inClassId<=(int)0x58123034) {
			if (inClassId<=(int)0x4af7dd8e) {
				return inClassId==(int)0x4033f4be || inClassId==(int)0x4af7dd8e;
			} else {
				return inClassId==(int)0x58123034;
			}
		} else {
			return inClassId==(int)0x61879f68 || inClassId==(int)0x6b353933;
		}
	}
}

void HScrollBar_obj::initializeHScrollBarTheme(){
            	HX_STACKFRAME(&_hx_pos_b60b2bd14bc92e54_39_initializeHScrollBarTheme)
HXDLIN(  39)		::feathers::themes::steel::components::SteelHScrollBarStyles_obj::initialize(null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(HScrollBar_obj,initializeHScrollBarTheme,(void))

Float HScrollBar_obj::valueToLocation(Float value){
            	HX_STACKFRAME(&_hx_pos_b60b2bd14bc92e54_42_valueToLocation)
HXLINE(  44)		if (::Std_obj::isOfType(this->thumbSkin,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IValidating >()) ))) {
HXLINE(  45)			::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->thumbSkin,0x64d4b3cd));
            		}
HXLINE(  47)		Float normalized = this->normalizeValue();
HXLINE(  48)		Float trackScrollableWidth = ((this->actualWidth - this->paddingLeft) - this->paddingRight);
HXDLIN(  48)		Float trackScrollableWidth1 = (trackScrollableWidth - this->thumbSkin->get_width());
HXLINE(  49)		return (this->paddingLeft + (trackScrollableWidth1 * normalized));
            	}


Float HScrollBar_obj::locationToValue(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_b60b2bd14bc92e54_52_locationToValue)
HXLINE(  53)		Float percentage = ((Float)0.0);
HXLINE(  54)		Float trackScrollableWidth = ((this->actualWidth - this->paddingLeft) - this->paddingRight);
HXDLIN(  54)		Float trackScrollableWidth1 = (trackScrollableWidth - this->thumbSkin->get_width());
HXLINE(  55)		Float xOffset = (x - this->_pointerStartX);
HXLINE(  56)		Float xPosition = ::Math_obj::min(::Math_obj::max(((Float)0.0),(this->_thumbStartX + xOffset)),trackScrollableWidth1);
HXLINE(  57)		percentage = (xPosition / trackScrollableWidth1);
HXLINE(  58)		Float _hx_tmp = this->get_minimum();
HXDLIN(  58)		Float _hx_tmp1 = this->get_maximum();
HXDLIN(  58)		return (_hx_tmp + (percentage * (_hx_tmp1 - this->get_minimum())));
            	}


void HScrollBar_obj::saveThumbStart( ::openfl::geom::Point location){
            	HX_STACKFRAME(&_hx_pos_b60b2bd14bc92e54_61_saveThumbStart)
HXLINE(  62)		Float trackWidthMinusThumbWidth = this->actualWidth;
HXLINE(  63)		Float locationMinusHalfThumbWidth = location->x;
HXLINE(  64)		if (::hx::IsNotNull( this->thumbSkin )) {
HXLINE(  65)			trackWidthMinusThumbWidth = (trackWidthMinusThumbWidth - this->thumbSkin->get_width());
HXLINE(  66)			locationMinusHalfThumbWidth = (locationMinusHalfThumbWidth - (this->thumbSkin->get_width() / ((Float)2.0)));
            		}
HXLINE(  68)		this->_thumbStartX = ::Math_obj::min(trackWidthMinusThumbWidth,locationMinusHalfThumbWidth);
HXLINE(  69)		this->_thumbStartY = location->y;
            	}


bool HScrollBar_obj::measure(){
            	HX_STACKFRAME(&_hx_pos_b60b2bd14bc92e54_72_measure)
HXLINE(  73)		bool needsWidth = ::hx::IsNull( this->get_explicitWidth() );
HXLINE(  74)		bool needsHeight = ::hx::IsNull( this->get_explicitHeight() );
HXLINE(  75)		bool needsMinWidth = ::hx::IsNull( this->get_explicitMinWidth() );
HXLINE(  76)		bool needsMinHeight = ::hx::IsNull( this->get_explicitMinHeight() );
HXLINE(  77)		bool needsMaxWidth = ::hx::IsNull( this->get_explicitMaxWidth() );
HXLINE(  78)		bool needsMaxHeight = ::hx::IsNull( this->get_explicitMaxHeight() );
HXLINE(  79)		bool _hx_tmp;
HXDLIN(  79)		bool _hx_tmp1;
HXDLIN(  79)		bool _hx_tmp2;
HXDLIN(  79)		bool _hx_tmp3;
HXDLIN(  79)		bool _hx_tmp4;
HXDLIN(  79)		if (!(needsWidth)) {
HXLINE(  79)			_hx_tmp4 = !(needsHeight);
            		}
            		else {
HXLINE(  79)			_hx_tmp4 = false;
            		}
HXDLIN(  79)		if (_hx_tmp4) {
HXLINE(  79)			_hx_tmp3 = !(needsMinWidth);
            		}
            		else {
HXLINE(  79)			_hx_tmp3 = false;
            		}
HXDLIN(  79)		if (_hx_tmp3) {
HXLINE(  79)			_hx_tmp2 = !(needsMinHeight);
            		}
            		else {
HXLINE(  79)			_hx_tmp2 = false;
            		}
HXDLIN(  79)		if (_hx_tmp2) {
HXLINE(  79)			_hx_tmp1 = !(needsMaxWidth);
            		}
            		else {
HXLINE(  79)			_hx_tmp1 = false;
            		}
HXDLIN(  79)		if (_hx_tmp1) {
HXLINE(  79)			_hx_tmp = !(needsMaxHeight);
            		}
            		else {
HXLINE(  79)			_hx_tmp = false;
            		}
HXDLIN(  79)		if (_hx_tmp) {
HXLINE(  80)			return false;
            		}
HXLINE(  83)		this->_thumbSkinMeasurements->restore(this->thumbSkin);
HXLINE(  84)		if (::Std_obj::isOfType(this->thumbSkin,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IValidating >()) ))) {
HXLINE(  85)			::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->thumbSkin,0x64d4b3cd));
            		}
HXLINE(  87)		if (::hx::IsNotNull( this->trackSkin )) {
HXLINE(  88)			this->_trackSkinMeasurements->restore(this->trackSkin);
HXLINE(  89)			if (::Std_obj::isOfType(this->trackSkin,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IValidating >()) ))) {
HXLINE(  90)				::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->trackSkin,0x64d4b3cd));
            			}
            		}
HXLINE(  93)		if (::hx::IsNotNull( this->secondaryTrackSkin )) {
HXLINE(  94)			this->_secondaryTrackSkinMeasurements->restore(this->secondaryTrackSkin);
HXLINE(  95)			if (::Std_obj::isOfType(this->secondaryTrackSkin,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IValidating >()) ))) {
HXLINE(  96)				::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->secondaryTrackSkin,0x64d4b3cd));
            			}
            		}
HXLINE( 100)		 ::Dynamic newWidth = this->get_explicitWidth();
HXLINE( 101)		if (needsWidth) {
HXLINE( 102)			newWidth = ((Float)0.0);
HXLINE( 103)			if (::hx::IsNotNull( this->trackSkin )) {
HXLINE( 104)				newWidth = (newWidth + this->trackSkin->get_width());
HXLINE( 105)				if (::hx::IsNotNull( this->secondaryTrackSkin )) {
HXLINE( 106)					newWidth = (newWidth + this->secondaryTrackSkin->get_width());
            				}
            			}
HXLINE( 109)			Float thumbWidth = this->thumbSkin->get_width();
HXDLIN( 109)			Float thumbWidth1 = ((thumbWidth + this->paddingLeft) + this->paddingRight);
HXLINE( 110)			if (::hx::IsLess( newWidth,thumbWidth1 )) {
HXLINE( 111)				newWidth = thumbWidth1;
            			}
            		}
HXLINE( 115)		 ::Dynamic newHeight = this->get_explicitHeight();
HXLINE( 116)		if (needsHeight) {
HXLINE( 117)			Float newHeight1 = this->thumbSkin->get_height();
HXDLIN( 117)			newHeight = ((newHeight1 + this->paddingTop) + this->paddingBottom);
HXLINE( 118)			if (::hx::IsNotNull( this->trackSkin )) {
HXLINE( 119)				if (::hx::IsLess( newHeight,this->trackSkin->get_height() )) {
HXLINE( 120)					newHeight = this->trackSkin->get_height();
            				}
HXLINE( 122)				bool _hx_tmp;
HXDLIN( 122)				if (::hx::IsNotNull( this->secondaryTrackSkin )) {
HXLINE( 122)					_hx_tmp = ::hx::IsLess( newHeight,this->secondaryTrackSkin->get_height() );
            				}
            				else {
HXLINE( 122)					_hx_tmp = false;
            				}
HXDLIN( 122)				if (_hx_tmp) {
HXLINE( 123)					newHeight = this->secondaryTrackSkin->get_height();
            				}
            			}
            		}
HXLINE( 129)		 ::Dynamic newMinWidth = newWidth;
HXLINE( 130)		 ::Dynamic newMinHeight = newHeight;
HXLINE( 131)		 ::Dynamic newMaxHeight = newHeight;
HXLINE( 133)		return this->saveMeasurements(( (Float)(newWidth) ),( (Float)(newHeight) ),newMinWidth,newMinHeight,::Math_obj::POSITIVE_INFINITY,newMaxHeight);
            	}


void HScrollBar_obj::layoutSplitTrack(){
            	HX_STACKFRAME(&_hx_pos_b60b2bd14bc92e54_136_layoutSplitTrack)
HXLINE( 137)		Float location = this->valueToLocation(this->get_value());
HXLINE( 138)		if (::hx::IsNotNull( this->thumbSkin )) {
HXLINE( 139)			if (::Std_obj::isOfType(this->thumbSkin,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IValidating >()) ))) {
HXLINE( 140)				::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->thumbSkin,0x64d4b3cd));
            			}
HXLINE( 142)			location = (location + ::Math_obj::round((this->thumbSkin->get_width() / ((Float)2.0))));
            		}
HXLINE( 145)		this->trackSkin->set_x(((Float)0.0));
HXLINE( 146)		this->trackSkin->set_width(location);
HXLINE( 148)		this->secondaryTrackSkin->set_x(location);
HXLINE( 149)		this->secondaryTrackSkin->set_width((this->actualWidth - location));
HXLINE( 151)		if (::Std_obj::isOfType(this->trackSkin,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IValidating >()) ))) {
HXLINE( 152)			::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->trackSkin,0x64d4b3cd));
            		}
HXLINE( 154)		if (::Std_obj::isOfType(this->secondaryTrackSkin,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IValidating >()) ))) {
HXLINE( 155)			::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->secondaryTrackSkin,0x64d4b3cd));
            		}
HXLINE( 158)		 ::openfl::display::DisplayObject _hx_tmp = this->trackSkin;
HXDLIN( 158)		Float _hx_tmp1 = this->actualHeight;
HXDLIN( 158)		_hx_tmp->set_y(((_hx_tmp1 - this->trackSkin->get_height()) / ((Float)2.0)));
HXLINE( 159)		 ::openfl::display::DisplayObject _hx_tmp2 = this->secondaryTrackSkin;
HXDLIN( 159)		Float _hx_tmp3 = this->actualHeight;
HXDLIN( 159)		_hx_tmp2->set_y(((_hx_tmp3 - this->secondaryTrackSkin->get_height()) / ((Float)2.0)));
            	}


void HScrollBar_obj::layoutSingleTrack(){
            	HX_STACKFRAME(&_hx_pos_b60b2bd14bc92e54_162_layoutSingleTrack)
HXLINE( 163)		if (::hx::IsNull( this->trackSkin )) {
HXLINE( 164)			return;
            		}
HXLINE( 166)		this->trackSkin->set_x(((Float)0.0));
HXLINE( 167)		this->trackSkin->set_width(this->actualWidth);
HXLINE( 169)		if (::Std_obj::isOfType(this->trackSkin,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IValidating >()) ))) {
HXLINE( 170)			::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->trackSkin,0x64d4b3cd));
            		}
HXLINE( 173)		 ::openfl::display::DisplayObject _hx_tmp = this->trackSkin;
HXDLIN( 173)		Float _hx_tmp1 = this->actualHeight;
HXDLIN( 173)		_hx_tmp->set_y(((_hx_tmp1 - this->trackSkin->get_height()) / ((Float)2.0)));
            	}


void HScrollBar_obj::layoutThumb(){
            	HX_STACKFRAME(&_hx_pos_b60b2bd14bc92e54_176_layoutThumb)
HXLINE( 177)		if (::hx::IsNull( this->thumbSkin )) {
HXLINE( 178)			return;
            		}
HXLINE( 181)		Float range = this->get_maximum();
HXDLIN( 181)		Float range1 = (range - this->get_minimum());
HXLINE( 182)		this->thumbSkin->set_visible((range1 > ((Float)0.0)));
HXLINE( 183)		if (!(this->thumbSkin->get_visible())) {
HXLINE( 184)			return;
            		}
HXLINE( 187)		if (::Std_obj::isOfType(this->thumbSkin,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IValidating >()) ))) {
HXLINE( 188)			::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->thumbSkin,0x64d4b3cd));
            		}
HXLINE( 191)		Float valueOffset = ((Float)0.0);
HXLINE( 192)		Float _hx_tmp = this->get_value();
HXDLIN( 192)		if ((_hx_tmp < this->get_minimum())) {
HXLINE( 193)			Float valueOffset1 = this->get_minimum();
HXDLIN( 193)			valueOffset = (valueOffset1 - this->get_value());
            		}
            		else {
HXLINE( 194)			Float _hx_tmp = this->get_value();
HXDLIN( 194)			if ((_hx_tmp > this->get_maximum())) {
HXLINE( 195)				Float valueOffset1 = this->get_value();
HXDLIN( 195)				valueOffset = (valueOffset1 - this->get_maximum());
            			}
            		}
HXLINE( 198)		Float contentWidth = ((this->actualWidth - this->paddingLeft) - this->paddingRight);
HXLINE( 199)		Float contentHeight = ((this->actualHeight - this->paddingTop) - this->paddingBottom);
HXLINE( 201)		if (this->fixedThumbSize) {
HXLINE( 202)			this->thumbSkin->set_width(( (Float)(this->_thumbSkinMeasurements->width) ));
            		}
            		else {
HXLINE( 204)			Float thumbWidth = ((contentWidth * this->getAdjustedPage()) / range1);
HXLINE( 205)			if ((thumbWidth > ((Float)0.0))) {
HXLINE( 206)				Float widthOffset = (contentWidth - thumbWidth);
HXLINE( 207)				if ((widthOffset > thumbWidth)) {
HXLINE( 208)					widthOffset = thumbWidth;
            				}
HXLINE( 210)				widthOffset = (widthOffset * (valueOffset / ((range1 * thumbWidth) / contentWidth)));
HXLINE( 211)				thumbWidth = (thumbWidth - widthOffset);
            			}
HXLINE( 213)			bool _hx_tmp;
HXDLIN( 213)			if (::hx::IsNotNull( this->_thumbSkinMeasurements->minWidth )) {
HXLINE( 213)				_hx_tmp = ::hx::IsLess( thumbWidth,this->_thumbSkinMeasurements->minWidth );
            			}
            			else {
HXLINE( 213)				_hx_tmp = false;
            			}
HXDLIN( 213)			if (_hx_tmp) {
HXLINE( 214)				thumbWidth = ( (Float)(this->_thumbSkinMeasurements->minWidth) );
            			}
HXLINE( 216)			if ((thumbWidth < ((Float)0.0))) {
HXLINE( 217)				thumbWidth = ((Float)0.0);
            			}
HXLINE( 219)			this->thumbSkin->set_width(thumbWidth);
            		}
HXLINE( 221)		 ::openfl::display::DisplayObject _hx_tmp1 = this->thumbSkin;
HXDLIN( 221)		_hx_tmp1->set_x(this->valueToLocation(this->get_value()));
HXLINE( 222)		 ::openfl::display::DisplayObject _hx_tmp2 = this->thumbSkin;
HXDLIN( 222)		Float _hx_tmp3 = this->paddingTop;
HXDLIN( 222)		_hx_tmp2->set_y((_hx_tmp3 + ((contentHeight - this->thumbSkin->get_height()) / ((Float)2.0))));
            	}


::hx::Class HScrollBar_obj::get_styleContext(){
            	HX_STACKFRAME(&_hx_pos_ed703b4a618d8646_42_get_styleContext)
HXDLIN(  42)		return ::hx::ClassOf< ::feathers::controls::HScrollBar >();
            	}



::hx::ObjectPtr< HScrollBar_obj > HScrollBar_obj::__new() {
	::hx::ObjectPtr< HScrollBar_obj > __this = new HScrollBar_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< HScrollBar_obj > HScrollBar_obj::__alloc(::hx::Ctx *_hx_ctx) {
	HScrollBar_obj *__this = (HScrollBar_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(HScrollBar_obj), true, "feathers.controls.HScrollBar"));
	*(void **)__this = HScrollBar_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

HScrollBar_obj::HScrollBar_obj()
{
}

::hx::Val HScrollBar_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"measure") ) { return ::hx::Val( measure_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"layoutThumb") ) { return ::hx::Val( layoutThumb_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"saveThumbStart") ) { return ::hx::Val( saveThumbStart_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"valueToLocation") ) { return ::hx::Val( valueToLocation_dyn() ); }
		if (HX_FIELD_EQ(inName,"locationToValue") ) { return ::hx::Val( locationToValue_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"layoutSplitTrack") ) { return ::hx::Val( layoutSplitTrack_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_styleContext") ) { return ::hx::Val( get_styleContext_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"layoutSingleTrack") ) { return ::hx::Val( layoutSingleTrack_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"initializeHScrollBarTheme") ) { return ::hx::Val( initializeHScrollBarTheme_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *HScrollBar_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *HScrollBar_obj_sStaticStorageInfo = 0;
#endif

static ::String HScrollBar_obj_sMemberFields[] = {
	HX_("initializeHScrollBarTheme",7b,f3,f0,0f),
	HX_("valueToLocation",a1,9d,2e,0f),
	HX_("locationToValue",41,e6,82,3f),
	HX_("saveThumbStart",09,d0,2e,f1),
	HX_("measure",5e,fb,e9,3c),
	HX_("layoutSplitTrack",9b,e8,5c,0b),
	HX_("layoutSingleTrack",59,60,fe,1b),
	HX_("layoutThumb",0c,fb,7b,c0),
	HX_("get_styleContext",47,7d,20,4b),
	::String(null()) };

::hx::Class HScrollBar_obj::__mClass;

void HScrollBar_obj::__register()
{
	HScrollBar_obj _hx_dummy;
	HScrollBar_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("feathers.controls.HScrollBar",d8,76,77,72);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(HScrollBar_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< HScrollBar_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = HScrollBar_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = HScrollBar_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace feathers
} // end namespace controls
