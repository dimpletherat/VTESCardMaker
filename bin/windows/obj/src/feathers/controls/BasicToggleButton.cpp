// Generated by Haxe 4.1.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_feathers_controls_BasicToggleButton
#include <feathers/controls/BasicToggleButton.h>
#endif
#ifndef INCLUDED_feathers_controls_IToggle
#include <feathers/controls/IToggle.h>
#endif
#ifndef INCLUDED_feathers_controls_ToggleButtonState
#include <feathers/controls/ToggleButtonState.h>
#endif
#ifndef INCLUDED_feathers_core_FeathersControl
#include <feathers/core/FeathersControl.h>
#endif
#ifndef INCLUDED_feathers_core_IDisplayObject
#include <feathers/core/IDisplayObject.h>
#endif
#ifndef INCLUDED_feathers_core_IMeasureObject
#include <feathers/core/IMeasureObject.h>
#endif
#ifndef INCLUDED_feathers_core_IStateContext
#include <feathers/core/IStateContext.h>
#endif
#ifndef INCLUDED_feathers_core_IStateObserver
#include <feathers/core/IStateObserver.h>
#endif
#ifndef INCLUDED_feathers_core_IUIControl
#include <feathers/core/IUIControl.h>
#endif
#ifndef INCLUDED_feathers_core_IValidating
#include <feathers/core/IValidating.h>
#endif
#ifndef INCLUDED_feathers_core_MeasureSprite
#include <feathers/core/MeasureSprite.h>
#endif
#ifndef INCLUDED_feathers_core_ValidatingSprite
#include <feathers/core/ValidatingSprite.h>
#endif
#ifndef INCLUDED_feathers_events_FeathersEvent
#include <feathers/events/FeathersEvent.h>
#endif
#ifndef INCLUDED_feathers_events_TriggerEvent
#include <feathers/events/TriggerEvent.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayoutObject
#include <feathers/layout/ILayoutObject.h>
#endif
#ifndef INCLUDED_feathers_layout_Measurements
#include <feathers/layout/Measurements.h>
#endif
#ifndef INCLUDED_feathers_style_IStyleObject
#include <feathers/style/IStyleObject.h>
#endif
#ifndef INCLUDED_feathers_style_IVariantStyleObject
#include <feathers/style/IVariantStyleObject.h>
#endif
#ifndef INCLUDED_feathers_utils_KeyToState
#include <feathers/utils/KeyToState.h>
#endif
#ifndef INCLUDED_feathers_utils_MeasurementsUtil
#include <feathers/utils/MeasurementsUtil.h>
#endif
#ifndef INCLUDED_feathers_utils_PointerToState
#include <feathers/utils/PointerToState.h>
#endif
#ifndef INCLUDED_feathers_utils_PointerTrigger
#include <feathers/utils/PointerTrigger.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <haxe/ds/EnumValueMap.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e33c116aa54be7a2_39_new,"feathers.controls.BasicToggleButton","new",0x2a1e110c,"feathers.controls.BasicToggleButton.new","feathers/controls/BasicToggleButton.hx",39,0x61a97bc4)
HX_LOCAL_STACK_FRAME(_hx_pos_e33c116aa54be7a2_75_get_currentState,"feathers.controls.BasicToggleButton","get_currentState",0xf0f80b75,"feathers.controls.BasicToggleButton.get_currentState","feathers/controls/BasicToggleButton.hx",75,0x61a97bc4)
HX_LOCAL_STACK_FRAME(_hx_pos_e33c116aa54be7a2_78_set_enabled,"feathers.controls.BasicToggleButton","set_enabled",0x26d53850,"feathers.controls.BasicToggleButton.set_enabled","feathers/controls/BasicToggleButton.hx",78,0x61a97bc4)
HX_LOCAL_STACK_FRAME(_hx_pos_e33c116aa54be7a2_132_get_selected,"feathers.controls.BasicToggleButton","get_selected",0x837d2838,"feathers.controls.BasicToggleButton.get_selected","feathers/controls/BasicToggleButton.hx",132,0x61a97bc4)
HX_LOCAL_STACK_FRAME(_hx_pos_e33c116aa54be7a2_135_set_selected,"feathers.controls.BasicToggleButton","set_selected",0x98764bac,"feathers.controls.BasicToggleButton.set_selected","feathers/controls/BasicToggleButton.hx",135,0x61a97bc4)
HX_LOCAL_STACK_FRAME(_hx_pos_e33c116aa54be7a2_167_set_toggleable,"feathers.controls.BasicToggleButton","set_toggleable",0x81d65ebf,"feathers.controls.BasicToggleButton.set_toggleable","feathers/controls/BasicToggleButton.hx",167,0x61a97bc4)
HX_LOCAL_STACK_FRAME(_hx_pos_e33c116aa54be7a2_260_getSkinForState,"feathers.controls.BasicToggleButton","getSkinForState",0x1025fe47,"feathers.controls.BasicToggleButton.getSkinForState","feathers/controls/BasicToggleButton.hx",260,0x61a97bc4)
HX_LOCAL_STACK_FRAME(_hx_pos_e33c116aa54be7a2_278_setSkinForState,"feathers.controls.BasicToggleButton","setSkinForState",0x0bf17b53,"feathers.controls.BasicToggleButton.setSkinForState","feathers/controls/BasicToggleButton.hx",278,0x61a97bc4)
HX_LOCAL_STACK_FRAME(_hx_pos_e33c116aa54be7a2_295_initialize,"feathers.controls.BasicToggleButton","initialize",0xfa9d9e24,"feathers.controls.BasicToggleButton.initialize","feathers/controls/BasicToggleButton.hx",295,0x61a97bc4)
HX_LOCAL_STACK_FRAME(_hx_pos_e33c116aa54be7a2_311_update,"feathers.controls.BasicToggleButton","update",0xd6d3f8dd,"feathers.controls.BasicToggleButton.update","feathers/controls/BasicToggleButton.hx",311,0x61a97bc4)
HX_LOCAL_STACK_FRAME(_hx_pos_e33c116aa54be7a2_329_refreshInteractivity,"feathers.controls.BasicToggleButton","refreshInteractivity",0x9a25cfe4,"feathers.controls.BasicToggleButton.refreshInteractivity","feathers/controls/BasicToggleButton.hx",329,0x61a97bc4)
HX_LOCAL_STACK_FRAME(_hx_pos_e33c116aa54be7a2_332_refreshBackgroundSkin,"feathers.controls.BasicToggleButton","refreshBackgroundSkin",0x3bb51872,"feathers.controls.BasicToggleButton.refreshBackgroundSkin","feathers/controls/BasicToggleButton.hx",332,0x61a97bc4)
HX_LOCAL_STACK_FRAME(_hx_pos_e33c116aa54be7a2_357_getCurrentBackgroundSkin,"feathers.controls.BasicToggleButton","getCurrentBackgroundSkin",0xfb042302,"feathers.controls.BasicToggleButton.getCurrentBackgroundSkin","feathers/controls/BasicToggleButton.hx",357,0x61a97bc4)
HX_LOCAL_STACK_FRAME(_hx_pos_e33c116aa54be7a2_368_removeCurrentBackgroundSkin,"feathers.controls.BasicToggleButton","removeCurrentBackgroundSkin",0x39d6e16c,"feathers.controls.BasicToggleButton.removeCurrentBackgroundSkin","feathers/controls/BasicToggleButton.hx",368,0x61a97bc4)
HX_LOCAL_STACK_FRAME(_hx_pos_e33c116aa54be7a2_383_measure,"feathers.controls.BasicToggleButton","measure",0xc1c0020a,"feathers.controls.BasicToggleButton.measure","feathers/controls/BasicToggleButton.hx",383,0x61a97bc4)
HX_LOCAL_STACK_FRAME(_hx_pos_e33c116aa54be7a2_471_layoutBackgroundSkin,"feathers.controls.BasicToggleButton","layoutBackgroundSkin",0x74fc7ba9,"feathers.controls.BasicToggleButton.layoutBackgroundSkin","feathers/controls/BasicToggleButton.hx",471,0x61a97bc4)
HX_LOCAL_STACK_FRAME(_hx_pos_e33c116aa54be7a2_492_changeState,"feathers.controls.BasicToggleButton","changeState",0xc20deb2d,"feathers.controls.BasicToggleButton.changeState","feathers/controls/BasicToggleButton.hx",492,0x61a97bc4)
HX_LOCAL_STACK_FRAME(_hx_pos_e33c116aa54be7a2_524_basicToggleButton_triggerHandler,"feathers.controls.BasicToggleButton","basicToggleButton_triggerHandler",0x3cde6ff1,"feathers.controls.BasicToggleButton.basicToggleButton_triggerHandler","feathers/controls/BasicToggleButton.hx",524,0x61a97bc4)
HX_LOCAL_STACK_FRAME(_hx_pos_d430f7113eb44ec1_68_set_keepDownStateOnRollOut,"feathers.controls.BasicToggleButton","set_keepDownStateOnRollOut",0x1a36ec59,"feathers.controls.BasicToggleButton.set_keepDownStateOnRollOut","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_d430f7113eb44ec1_94_clearStyle_keepDownStateOnRollOut,"feathers.controls.BasicToggleButton","clearStyle_keepDownStateOnRollOut",0x7f81d4af,"feathers.controls.BasicToggleButton.clearStyle_keepDownStateOnRollOut","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_d430f7113eb44ec1_68_set_backgroundSkin,"feathers.controls.BasicToggleButton","set_backgroundSkin",0xe0d1d99c,"feathers.controls.BasicToggleButton.set_backgroundSkin","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_d430f7113eb44ec1_94_clearStyle_backgroundSkin,"feathers.controls.BasicToggleButton","clearStyle_backgroundSkin",0x4d917bf2,"feathers.controls.BasicToggleButton.clearStyle_backgroundSkin","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_d430f7113eb44ec1_68_set_selectedBackgroundSkin,"feathers.controls.BasicToggleButton","set_selectedBackgroundSkin",0xd697da57,"feathers.controls.BasicToggleButton.set_selectedBackgroundSkin","feathers/macros/StyleMacro.hx",68,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_d430f7113eb44ec1_94_clearStyle_selectedBackgroundSkin,"feathers.controls.BasicToggleButton","clearStyle_selectedBackgroundSkin",0x3be2c2ad,"feathers.controls.BasicToggleButton.clearStyle_selectedBackgroundSkin","feathers/macros/StyleMacro.hx",94,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_e33c116aa54be7a2_39_boot,"feathers.controls.BasicToggleButton","boot",0xa849da06,"feathers.controls.BasicToggleButton.boot","feathers/controls/BasicToggleButton.hx",39,0x61a97bc4)
namespace feathers{
namespace controls{

void BasicToggleButton_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_e33c116aa54be7a2_39_new)
HXLINE( 244)		this->_stateToSkin =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
HXLINE( 242)		this->selectedBackgroundSkin = null();
HXLINE( 218)		this->backgroundSkin = null();
HXLINE( 197)		this->keepDownStateOnRollOut = false;
HXLINE( 179)		this->_currentBackgroundSkin = null();
HXLINE( 178)		this->_backgroundSkinMeasurements = null();
HXLINE( 177)		this->_pointerTrigger = null();
HXLINE( 176)		this->_keyToState = null();
HXLINE( 175)		this->_pointerToState = null();
HXLINE( 165)		this->toggleable = true;
HXLINE( 129)		this->selected = false;
HXLINE(  72)		this->currentState = ::feathers::controls::ToggleButtonState_obj::UP(false);
HXLINE(  46)		super::__construct();
HXLINE(  52)		this->mouseChildren = false;
HXLINE(  54)		this->set_buttonMode(true);
HXLINE(  56)		this->useHandCursor = false;
HXLINE(  58)		this->addEventListener(HX_("trigger",38,55,df,25),this->basicToggleButton_triggerHandler_dyn(),null(),null(),null());
            	}

Dynamic BasicToggleButton_obj::__CreateEmpty() { return new BasicToggleButton_obj; }

void *BasicToggleButton_obj::_hx_vtable = 0;

Dynamic BasicToggleButton_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BasicToggleButton_obj > _hx_result = new BasicToggleButton_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BasicToggleButton_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x093ab78b) {
				if (inClassId<=(int)0x0330636f) {
					return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
				} else {
					return inClassId==(int)0x093ab78b;
				}
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1727ecc2 || inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x58123034) {
			if (inClassId<=(int)0x4af7dd8e) {
				return inClassId==(int)0x4033f4be || inClassId==(int)0x4af7dd8e;
			} else {
				return inClassId==(int)0x58123034;
			}
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

static ::feathers::core::IStateContext_obj _hx_feathers_controls_BasicToggleButton__hx_feathers_core_IStateContext= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::BasicToggleButton_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::BasicToggleButton_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::BasicToggleButton_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::BasicToggleButton_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::BasicToggleButton_obj::willTrigger,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::BasicToggleButton_obj::get_currentState_2aa2127b,
};

static ::openfl::events::IEventDispatcher_obj _hx_feathers_controls_BasicToggleButton__hx_openfl_events_IEventDispatcher= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::BasicToggleButton_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::BasicToggleButton_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::BasicToggleButton_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::BasicToggleButton_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::BasicToggleButton_obj::willTrigger,
};

static ::feathers::controls::IToggle_obj _hx_feathers_controls_BasicToggleButton__hx_feathers_controls_IToggle= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::BasicToggleButton_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::BasicToggleButton_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::BasicToggleButton_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::BasicToggleButton_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::BasicToggleButton_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::BasicToggleButton_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::BasicToggleButton_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::BasicToggleButton_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::BasicToggleButton_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::BasicToggleButton_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::BasicToggleButton_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::BasicToggleButton_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::BasicToggleButton_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::BasicToggleButton_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::BasicToggleButton_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::BasicToggleButton_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::BasicToggleButton_obj::set_scaleY,
	( Float (::hx::Object::*)())&::feathers::controls::BasicToggleButton_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::BasicToggleButton_obj::set_alpha,
	( bool (::hx::Object::*)())&::feathers::controls::BasicToggleButton_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::BasicToggleButton_obj::set_visible,
	( bool (::hx::Object::*)())&::feathers::controls::BasicToggleButton_obj::get_enabled,
	( bool (::hx::Object::*)(bool))&::feathers::controls::BasicToggleButton_obj::set_enabled,
	( void (::hx::Object::*)())&::feathers::controls::BasicToggleButton_obj::initializeNow,
	( bool (::hx::Object::*)())&::feathers::controls::BasicToggleButton_obj::get_selected,
	( bool (::hx::Object::*)(bool))&::feathers::controls::BasicToggleButton_obj::set_selected,
};

static ::feathers::core::IUIControl_obj _hx_feathers_controls_BasicToggleButton__hx_feathers_core_IUIControl= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::BasicToggleButton_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::BasicToggleButton_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::BasicToggleButton_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::BasicToggleButton_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::BasicToggleButton_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::BasicToggleButton_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::BasicToggleButton_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::BasicToggleButton_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::BasicToggleButton_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::BasicToggleButton_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::BasicToggleButton_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::BasicToggleButton_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::BasicToggleButton_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::BasicToggleButton_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::BasicToggleButton_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::BasicToggleButton_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::BasicToggleButton_obj::set_scaleY,
	( Float (::hx::Object::*)())&::feathers::controls::BasicToggleButton_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::BasicToggleButton_obj::set_alpha,
	( bool (::hx::Object::*)())&::feathers::controls::BasicToggleButton_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::BasicToggleButton_obj::set_visible,
	( bool (::hx::Object::*)())&::feathers::controls::BasicToggleButton_obj::get_enabled,
	( bool (::hx::Object::*)(bool))&::feathers::controls::BasicToggleButton_obj::set_enabled,
	( void (::hx::Object::*)())&::feathers::controls::BasicToggleButton_obj::initializeNow,
};

static ::feathers::core::IDisplayObject_obj _hx_feathers_controls_BasicToggleButton__hx_feathers_core_IDisplayObject= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::BasicToggleButton_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::BasicToggleButton_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::BasicToggleButton_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::BasicToggleButton_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::BasicToggleButton_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::BasicToggleButton_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::BasicToggleButton_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::BasicToggleButton_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::BasicToggleButton_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::BasicToggleButton_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::BasicToggleButton_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::BasicToggleButton_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::BasicToggleButton_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::BasicToggleButton_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::BasicToggleButton_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::BasicToggleButton_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::BasicToggleButton_obj::set_scaleY,
	( Float (::hx::Object::*)())&::feathers::controls::BasicToggleButton_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::BasicToggleButton_obj::set_alpha,
	( bool (::hx::Object::*)())&::feathers::controls::BasicToggleButton_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::BasicToggleButton_obj::set_visible,
};

 ::Dynamic BasicToggleButton_obj::get_currentState_2aa2127b() {
			return get_currentState();
}
void *BasicToggleButton_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xa18fd6d8: return &_hx_feathers_controls_BasicToggleButton__hx_feathers_core_IStateContext;
		case (int)0x87530281: return &_hx_feathers_controls_BasicToggleButton__hx_openfl_events_IEventDispatcher;
		case (int)0xdea06717: return &_hx_feathers_controls_BasicToggleButton__hx_feathers_controls_IToggle;
		case (int)0x2696a04f: return &_hx_feathers_controls_BasicToggleButton__hx_feathers_core_IUIControl;
		case (int)0x3a979a67: return &_hx_feathers_controls_BasicToggleButton__hx_feathers_core_IDisplayObject;
	}
	return super::_hx_getInterface(inHash);
}

 ::feathers::controls::ToggleButtonState BasicToggleButton_obj::get_currentState(){
            	HX_STACKFRAME(&_hx_pos_e33c116aa54be7a2_75_get_currentState)
HXDLIN(  75)		return this->currentState;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BasicToggleButton_obj,get_currentState,return )

bool BasicToggleButton_obj::set_enabled(bool value){
            	HX_STACKFRAME(&_hx_pos_e33c116aa54be7a2_78_set_enabled)
HXLINE(  79)		this->super::set_enabled(value);
HXLINE(  80)		if (this->get_enabled()) {
HXLINE(  81)			 ::feathers::controls::ToggleButtonState toggleState = this->currentState;
HXLINE(  82)			if ((toggleState->_hx_getIndex() == 3)) {
HXLINE(  83)				bool selected = toggleState->_hx_getBool(0);
HXLINE(  84)				this->changeState(::feathers::controls::ToggleButtonState_obj::UP(selected));
            			}
            		}
            		else {
HXLINE(  88)			this->changeState(::feathers::controls::ToggleButtonState_obj::DISABLED(this->get_selected()));
            		}
HXLINE(  90)		return this->get_enabled();
            	}


bool BasicToggleButton_obj::get_selected(){
            	HX_STACKFRAME(&_hx_pos_e33c116aa54be7a2_132_get_selected)
HXDLIN( 132)		return this->selected;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BasicToggleButton_obj,get_selected,return )

bool BasicToggleButton_obj::set_selected(bool value){
            	HX_STACKFRAME(&_hx_pos_e33c116aa54be7a2_135_set_selected)
HXLINE( 136)		if ((this->get_selected() == value)) {
HXLINE( 137)			return this->get_selected();
            		}
HXLINE( 139)		this->selected = value;
HXLINE( 140)		this->setInvalid(HX_("selection",4c,f8,1a,8e));
HXLINE( 141)		this->setInvalid(HX_("state",11,76,0b,84));
HXLINE( 142)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 143)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("stateChange",61,de,fb,31),null(),null());
HXLINE( 144)		return this->get_selected();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BasicToggleButton_obj,set_selected,return )

bool BasicToggleButton_obj::set_toggleable(bool value){
            	HX_STACKFRAME(&_hx_pos_e33c116aa54be7a2_167_set_toggleable)
HXLINE( 168)		if ((this->toggleable == value)) {
HXLINE( 169)			return this->toggleable;
            		}
HXLINE( 171)		this->toggleable = value;
HXLINE( 172)		return this->toggleable;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BasicToggleButton_obj,set_toggleable,return )

 ::openfl::display::DisplayObject BasicToggleButton_obj::getSkinForState( ::feathers::controls::ToggleButtonState state){
            	HX_STACKFRAME(&_hx_pos_e33c116aa54be7a2_260_getSkinForState)
HXDLIN( 260)		return this->_stateToSkin->get(state).StaticCast<  ::openfl::display::DisplayObject >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BasicToggleButton_obj,getSkinForState,return )

void BasicToggleButton_obj::setSkinForState( ::feathers::controls::ToggleButtonState state, ::openfl::display::DisplayObject skin){
            	HX_STACKFRAME(&_hx_pos_e33c116aa54be7a2_278_setSkinForState)
HXLINE( 279)		if (!(this->setStyle(HX_("setSkinForState",a7,e8,72,5e),state))) {
HXLINE( 280)			return;
            		}
HXLINE( 282)		 ::openfl::display::DisplayObject oldSkin = this->_stateToSkin->get(state).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 283)		bool _hx_tmp;
HXDLIN( 283)		if (::hx::IsNotNull( oldSkin )) {
HXLINE( 283)			_hx_tmp = ::hx::IsEq( oldSkin,this->_currentBackgroundSkin );
            		}
            		else {
HXLINE( 283)			_hx_tmp = false;
            		}
HXDLIN( 283)		if (_hx_tmp) {
HXLINE( 284)			this->removeCurrentBackgroundSkin(oldSkin);
HXLINE( 285)			this->_currentBackgroundSkin = null();
            		}
HXLINE( 287)		if (::hx::IsNull( skin )) {
HXLINE( 288)			this->_stateToSkin->remove(state);
            		}
            		else {
HXLINE( 290)			this->_stateToSkin->set(state,skin);
            		}
HXLINE( 292)		this->setInvalid(HX_("styles",22,e6,d2,15));
            	}


HX_DEFINE_DYNAMIC_FUNC2(BasicToggleButton_obj,setSkinForState,(void))

void BasicToggleButton_obj::initialize(){
            	HX_GC_STACKFRAME(&_hx_pos_e33c116aa54be7a2_295_initialize)
HXLINE( 296)		this->super::initialize();
HXLINE( 298)		if (::hx::IsNull( this->_pointerToState )) {
HXLINE( 299)			this->_pointerToState =  ::feathers::utils::PointerToState_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this),this->changeState_dyn(),::feathers::controls::ToggleButtonState_obj::UP(false),::feathers::controls::ToggleButtonState_obj::DOWN(false),::feathers::controls::ToggleButtonState_obj::HOVER(false));
            		}
HXLINE( 302)		if (::hx::IsNull( this->_keyToState )) {
HXLINE( 303)			this->_keyToState =  ::feathers::utils::KeyToState_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this),this->changeState_dyn(),::feathers::controls::ToggleButtonState_obj::UP(false),::feathers::controls::ToggleButtonState_obj::DOWN(false));
            		}
HXLINE( 306)		if (::hx::IsNull( this->_pointerTrigger )) {
HXLINE( 307)			this->_pointerTrigger =  ::feathers::utils::PointerTrigger_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this),null());
            		}
            	}


void BasicToggleButton_obj::update(){
            	HX_STACKFRAME(&_hx_pos_e33c116aa54be7a2_311_update)
HXLINE( 312)		bool selectionInvalid = this->isInvalid(HX_("selection",4c,f8,1a,8e));
HXLINE( 313)		bool stylesInvalid = this->isInvalid(HX_("styles",22,e6,d2,15));
HXLINE( 314)		bool stateInvalid = this->isInvalid(HX_("state",11,76,0b,84));
HXLINE( 316)		bool _hx_tmp;
HXDLIN( 316)		bool _hx_tmp1;
HXDLIN( 316)		if (!(selectionInvalid)) {
HXLINE( 316)			_hx_tmp1 = stateInvalid;
            		}
            		else {
HXLINE( 316)			_hx_tmp1 = true;
            		}
HXDLIN( 316)		if (!(_hx_tmp1)) {
HXLINE( 316)			_hx_tmp = stylesInvalid;
            		}
            		else {
HXLINE( 316)			_hx_tmp = true;
            		}
HXDLIN( 316)		if (_hx_tmp) {
HXLINE( 317)			this->refreshBackgroundSkin();
            		}
HXLINE( 320)		if (stylesInvalid) {
HXLINE( 321)			this->refreshInteractivity();
            		}
HXLINE( 324)		this->measure();
HXLINE( 325)		this->layoutBackgroundSkin();
            	}


void BasicToggleButton_obj::refreshInteractivity(){
            	HX_STACKFRAME(&_hx_pos_e33c116aa54be7a2_329_refreshInteractivity)
HXDLIN( 329)		this->_pointerToState->keepDownStateOnRollOut = this->keepDownStateOnRollOut;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BasicToggleButton_obj,refreshInteractivity,(void))

void BasicToggleButton_obj::refreshBackgroundSkin(){
            	HX_GC_STACKFRAME(&_hx_pos_e33c116aa54be7a2_332_refreshBackgroundSkin)
HXLINE( 333)		 ::openfl::display::DisplayObject oldSkin = this->_currentBackgroundSkin;
HXLINE( 334)		this->_currentBackgroundSkin = this->getCurrentBackgroundSkin();
HXLINE( 335)		if (::hx::IsEq( this->_currentBackgroundSkin,oldSkin )) {
HXLINE( 336)			return;
            		}
HXLINE( 338)		this->removeCurrentBackgroundSkin(oldSkin);
HXLINE( 339)		if (::hx::IsNull( this->_currentBackgroundSkin )) {
HXLINE( 340)			this->_backgroundSkinMeasurements = null();
HXLINE( 341)			return;
            		}
HXLINE( 343)		if (::Std_obj::isOfType(this->_currentBackgroundSkin,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IUIControl >()) ))) {
HXLINE( 344)			::feathers::core::IUIControl_obj::initializeNow( ::hx::interface_check(this->_currentBackgroundSkin,0x2696a04f));
            		}
HXLINE( 346)		if (::hx::IsNull( this->_backgroundSkinMeasurements )) {
HXLINE( 347)			this->_backgroundSkinMeasurements =  ::feathers::layout::Measurements_obj::__alloc( HX_CTX ,this->_currentBackgroundSkin);
            		}
            		else {
HXLINE( 349)			this->_backgroundSkinMeasurements->save(this->_currentBackgroundSkin);
            		}
HXLINE( 351)		if (::Std_obj::isOfType(this->_currentBackgroundSkin,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IStateObserver >()) ))) {
HXLINE( 352)			::feathers::core::IStateObserver_obj::set_stateContext( ::hx::interface_check(this->_currentBackgroundSkin,0xb36ec70d),::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 354)		this->addChildAt(this->_currentBackgroundSkin,0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(BasicToggleButton_obj,refreshBackgroundSkin,(void))

 ::openfl::display::DisplayObject BasicToggleButton_obj::getCurrentBackgroundSkin(){
            	HX_STACKFRAME(&_hx_pos_e33c116aa54be7a2_357_getCurrentBackgroundSkin)
HXLINE( 358)		::Dynamic this1 = this->_stateToSkin;
HXDLIN( 358)		 ::openfl::display::DisplayObject result = ( ( ::haxe::ds::EnumValueMap)(this1) )->get(this->get_currentState()).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 359)		if (::hx::IsNotNull( result )) {
HXLINE( 360)			return result;
            		}
HXLINE( 362)		bool _hx_tmp;
HXDLIN( 362)		if (this->get_selected()) {
HXLINE( 362)			_hx_tmp = ::hx::IsNotNull( this->selectedBackgroundSkin );
            		}
            		else {
HXLINE( 362)			_hx_tmp = false;
            		}
HXDLIN( 362)		if (_hx_tmp) {
HXLINE( 363)			return this->selectedBackgroundSkin;
            		}
HXLINE( 365)		return this->backgroundSkin;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BasicToggleButton_obj,getCurrentBackgroundSkin,return )

void BasicToggleButton_obj::removeCurrentBackgroundSkin( ::openfl::display::DisplayObject skin){
            	HX_STACKFRAME(&_hx_pos_e33c116aa54be7a2_368_removeCurrentBackgroundSkin)
HXLINE( 369)		if (::hx::IsNull( skin )) {
HXLINE( 370)			return;
            		}
HXLINE( 372)		if (::Std_obj::isOfType(skin,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IStateObserver >()) ))) {
HXLINE( 373)			::feathers::core::IStateObserver_obj::set_stateContext( ::hx::interface_check(skin,0xb36ec70d),null());
            		}
HXLINE( 375)		this->_backgroundSkinMeasurements->restore(skin);
HXLINE( 376)		if (::hx::IsEq( skin->parent,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 379)			this->removeChild(skin);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BasicToggleButton_obj,removeCurrentBackgroundSkin,(void))

bool BasicToggleButton_obj::measure(){
            	HX_STACKFRAME(&_hx_pos_e33c116aa54be7a2_383_measure)
HXLINE( 384)		bool needsWidth = ::hx::IsNull( this->get_explicitWidth() );
HXLINE( 385)		bool needsHeight = ::hx::IsNull( this->get_explicitHeight() );
HXLINE( 386)		bool needsMinWidth = ::hx::IsNull( this->get_explicitMinWidth() );
HXLINE( 387)		bool needsMinHeight = ::hx::IsNull( this->get_explicitMinHeight() );
HXLINE( 388)		bool needsMaxWidth = ::hx::IsNull( this->get_explicitMaxWidth() );
HXLINE( 389)		bool needsMaxHeight = ::hx::IsNull( this->get_explicitMaxHeight() );
HXLINE( 390)		bool _hx_tmp;
HXDLIN( 390)		bool _hx_tmp1;
HXDLIN( 390)		bool _hx_tmp2;
HXDLIN( 390)		bool _hx_tmp3;
HXDLIN( 390)		bool _hx_tmp4;
HXDLIN( 390)		if (!(needsWidth)) {
HXLINE( 390)			_hx_tmp4 = !(needsHeight);
            		}
            		else {
HXLINE( 390)			_hx_tmp4 = false;
            		}
HXDLIN( 390)		if (_hx_tmp4) {
HXLINE( 390)			_hx_tmp3 = !(needsMinWidth);
            		}
            		else {
HXLINE( 390)			_hx_tmp3 = false;
            		}
HXDLIN( 390)		if (_hx_tmp3) {
HXLINE( 390)			_hx_tmp2 = !(needsMinHeight);
            		}
            		else {
HXLINE( 390)			_hx_tmp2 = false;
            		}
HXDLIN( 390)		if (_hx_tmp2) {
HXLINE( 390)			_hx_tmp1 = !(needsMaxWidth);
            		}
            		else {
HXLINE( 390)			_hx_tmp1 = false;
            		}
HXDLIN( 390)		if (_hx_tmp1) {
HXLINE( 390)			_hx_tmp = !(needsMaxHeight);
            		}
            		else {
HXLINE( 390)			_hx_tmp = false;
            		}
HXDLIN( 390)		if (_hx_tmp) {
HXLINE( 391)			return false;
            		}
HXLINE( 394)		if (::hx::IsNotNull( this->_currentBackgroundSkin )) {
HXLINE( 395)			::feathers::utils::MeasurementsUtil_obj::resetFluidlyWithParent(this->_backgroundSkinMeasurements,this->_currentBackgroundSkin,::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 398)		::Dynamic measureSkin = null();
HXLINE( 399)		if (::Std_obj::isOfType(this->_currentBackgroundSkin,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IMeasureObject >()) ))) {
HXLINE( 400)			measureSkin =  ::hx::interface_check(this->_currentBackgroundSkin,0xcfc32883);
            		}
HXLINE( 403)		if (::Std_obj::isOfType(this->_currentBackgroundSkin,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IValidating >()) ))) {
HXLINE( 404)			::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->_currentBackgroundSkin,0x64d4b3cd));
            		}
HXLINE( 407)		 ::Dynamic newWidth = this->get_explicitWidth();
HXLINE( 408)		if (needsWidth) {
HXLINE( 409)			if (::hx::IsNotNull( this->_currentBackgroundSkin )) {
HXLINE( 410)				newWidth = this->_currentBackgroundSkin->get_width();
            			}
            			else {
HXLINE( 412)				newWidth = ((Float)0.0);
            			}
            		}
HXLINE( 416)		 ::Dynamic newHeight = this->get_explicitHeight();
HXLINE( 417)		if (needsHeight) {
HXLINE( 418)			if (::hx::IsNotNull( this->_currentBackgroundSkin )) {
HXLINE( 419)				newHeight = this->_currentBackgroundSkin->get_height();
            			}
            			else {
HXLINE( 421)				newHeight = ((Float)0.0);
            			}
            		}
HXLINE( 425)		 ::Dynamic newMinWidth = this->get_explicitMinWidth();
HXLINE( 426)		if (needsMinWidth) {
HXLINE( 427)			if (::hx::IsNotNull( measureSkin )) {
HXLINE( 428)				newMinWidth = ::feathers::core::IMeasureObject_obj::get_minWidth(measureSkin);
            			}
            			else {
HXLINE( 429)				if (::hx::IsNotNull( this->_backgroundSkinMeasurements )) {
HXLINE( 430)					newMinWidth = this->_backgroundSkinMeasurements->minWidth;
            				}
            				else {
HXLINE( 432)					newMinWidth = ((Float)0.0);
            				}
            			}
            		}
HXLINE( 436)		 ::Dynamic newMinHeight = this->get_explicitMinHeight();
HXLINE( 437)		if (needsMinHeight) {
HXLINE( 438)			if (::hx::IsNotNull( measureSkin )) {
HXLINE( 439)				newMinHeight = ::feathers::core::IMeasureObject_obj::get_minHeight(measureSkin);
            			}
            			else {
HXLINE( 440)				if (::hx::IsNotNull( this->_backgroundSkinMeasurements )) {
HXLINE( 441)					newMinHeight = this->_backgroundSkinMeasurements->minHeight;
            				}
            				else {
HXLINE( 443)					newMinHeight = ((Float)0.0);
            				}
            			}
            		}
HXLINE( 446)		 ::Dynamic newMaxWidth = this->get_explicitMaxWidth();
HXLINE( 447)		if (needsMaxWidth) {
HXLINE( 448)			if (::hx::IsNotNull( measureSkin )) {
HXLINE( 449)				newMaxWidth = ::feathers::core::IMeasureObject_obj::get_maxWidth(measureSkin);
            			}
            			else {
HXLINE( 450)				if (::hx::IsNotNull( this->_backgroundSkinMeasurements )) {
HXLINE( 451)					newMaxWidth = this->_backgroundSkinMeasurements->maxWidth;
            				}
            				else {
HXLINE( 453)					newMaxWidth = ::Math_obj::POSITIVE_INFINITY;
            				}
            			}
            		}
HXLINE( 457)		 ::Dynamic newMaxHeight = this->get_explicitMaxHeight();
HXLINE( 458)		if (needsMaxHeight) {
HXLINE( 459)			if (::hx::IsNotNull( measureSkin )) {
HXLINE( 460)				newMaxHeight = ::feathers::core::IMeasureObject_obj::get_maxHeight(measureSkin);
            			}
            			else {
HXLINE( 461)				if (::hx::IsNotNull( this->_backgroundSkinMeasurements )) {
HXLINE( 462)					newMaxHeight = this->_backgroundSkinMeasurements->maxHeight;
            				}
            				else {
HXLINE( 464)					newMaxHeight = ::Math_obj::POSITIVE_INFINITY;
            				}
            			}
            		}
HXLINE( 468)		return this->saveMeasurements(( (Float)(newWidth) ),( (Float)(newHeight) ),newMinWidth,newMinHeight,newMaxWidth,newMaxHeight);
            	}


HX_DEFINE_DYNAMIC_FUNC0(BasicToggleButton_obj,measure,return )

void BasicToggleButton_obj::layoutBackgroundSkin(){
            	HX_STACKFRAME(&_hx_pos_e33c116aa54be7a2_471_layoutBackgroundSkin)
HXLINE( 472)		if (::hx::IsNull( this->_currentBackgroundSkin )) {
HXLINE( 473)			return;
            		}
HXLINE( 475)		this->_currentBackgroundSkin->set_x(((Float)0.0));
HXLINE( 476)		this->_currentBackgroundSkin->set_y(((Float)0.0));
HXLINE( 481)		Float _hx_tmp = this->_currentBackgroundSkin->get_width();
HXDLIN( 481)		if ((_hx_tmp != this->actualWidth)) {
HXLINE( 482)			this->_currentBackgroundSkin->set_width(this->actualWidth);
            		}
HXLINE( 484)		Float _hx_tmp1 = this->_currentBackgroundSkin->get_height();
HXDLIN( 484)		if ((_hx_tmp1 != this->actualHeight)) {
HXLINE( 485)			this->_currentBackgroundSkin->set_height(this->actualHeight);
            		}
HXLINE( 487)		if (::Std_obj::isOfType(this->_currentBackgroundSkin,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IValidating >()) ))) {
HXLINE( 488)			::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->_currentBackgroundSkin,0x64d4b3cd));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(BasicToggleButton_obj,layoutBackgroundSkin,(void))

void BasicToggleButton_obj::changeState( ::feathers::controls::ToggleButtonState state){
            	HX_STACKFRAME(&_hx_pos_e33c116aa54be7a2_492_changeState)
HXLINE( 493)		 ::feathers::controls::ToggleButtonState toggleState = state;
HXLINE( 494)		if (!(this->get_enabled())) {
HXLINE( 495)			toggleState = ::feathers::controls::ToggleButtonState_obj::DISABLED(this->get_selected());
            		}
HXLINE( 497)		switch((int)(toggleState->_hx_getIndex())){
            			case (int)0: {
HXLINE( 498)				bool selected = toggleState->_hx_getBool(0);
HXLINE( 499)				if ((this->get_selected() != selected)) {
HXLINE( 500)					toggleState = ::feathers::controls::ToggleButtonState_obj::UP(this->get_selected());
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 506)				bool _g = toggleState->_hx_getBool(0);
HXLINE( 507)				bool _hx_tmp = this->get_selected();
HXDLIN( 507)				if ((_hx_tmp != this->get_selected())) {
HXLINE( 508)					toggleState = ::feathers::controls::ToggleButtonState_obj::HOVER(this->get_selected());
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 502)				bool _g = toggleState->_hx_getBool(0);
HXLINE( 503)				bool _hx_tmp = this->get_selected();
HXDLIN( 503)				if ((_hx_tmp != this->get_selected())) {
HXLINE( 504)					toggleState = ::feathers::controls::ToggleButtonState_obj::DOWN(this->get_selected());
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 510)				bool _g = toggleState->_hx_getBool(0);
HXLINE( 511)				bool _hx_tmp = this->get_selected();
HXDLIN( 511)				if ((_hx_tmp != this->get_selected())) {
HXLINE( 512)					toggleState = ::feathers::controls::ToggleButtonState_obj::DISABLED(this->get_selected());
            				}
            			}
            			break;
            		}
HXLINE( 516)		if (::hx::IsEq( this->get_currentState(),toggleState )) {
HXLINE( 517)			return;
            		}
HXLINE( 519)		this->currentState = toggleState;
HXLINE( 520)		this->setInvalid(HX_("state",11,76,0b,84));
HXLINE( 521)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("stateChange",61,de,fb,31),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(BasicToggleButton_obj,changeState,(void))

void BasicToggleButton_obj::basicToggleButton_triggerHandler( ::feathers::events::TriggerEvent event){
            	HX_STACKFRAME(&_hx_pos_e33c116aa54be7a2_524_basicToggleButton_triggerHandler)
HXLINE( 525)		if (!(this->get_enabled())) {
HXLINE( 526)			event->stopImmediatePropagation();
HXLINE( 527)			return;
            		}
HXLINE( 529)		if (!(this->toggleable)) {
HXLINE( 530)			return;
            		}
HXLINE( 532)		this->set_selected(!(this->get_selected()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(BasicToggleButton_obj,basicToggleButton_triggerHandler,(void))

bool BasicToggleButton_obj::set_keepDownStateOnRollOut(bool value){
            	HX_STACKFRAME(&_hx_pos_d430f7113eb44ec1_68_set_keepDownStateOnRollOut)
HXLINE(  69)		if (!(this->setStyle(HX_("keepDownStateOnRollOut",48,7f,38,c2),null()))) {
HXLINE(  70)			return this->keepDownStateOnRollOut;
            		}
HXLINE(  72)		if ((this->keepDownStateOnRollOut == value)) {
HXLINE(  73)			return this->keepDownStateOnRollOut;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_keepDownStateOnRollOut_dyn();
HXLINE(  79)		this->keepDownStateOnRollOut = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->keepDownStateOnRollOut;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BasicToggleButton_obj,set_keepDownStateOnRollOut,return )

bool BasicToggleButton_obj::clearStyle_keepDownStateOnRollOut(){
            	HX_STACKFRAME(&_hx_pos_d430f7113eb44ec1_94_clearStyle_keepDownStateOnRollOut)
HXLINE(  95)		this->set_keepDownStateOnRollOut(false);
HXLINE(  96)		return this->keepDownStateOnRollOut;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BasicToggleButton_obj,clearStyle_keepDownStateOnRollOut,return )

 ::openfl::display::DisplayObject BasicToggleButton_obj::set_backgroundSkin( ::openfl::display::DisplayObject value){
            	HX_STACKFRAME(&_hx_pos_d430f7113eb44ec1_68_set_backgroundSkin)
HXLINE(  69)		if (!(this->setStyle(HX_("backgroundSkin",8b,65,6f,20),null()))) {
HXLINE(  70)			return this->backgroundSkin;
            		}
HXLINE(  72)		if (::hx::IsEq( this->backgroundSkin,value )) {
HXLINE(  73)			return this->backgroundSkin;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_backgroundSkin_dyn();
HXLINE(  79)		this->backgroundSkin = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->backgroundSkin;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BasicToggleButton_obj,set_backgroundSkin,return )

 ::openfl::display::DisplayObject BasicToggleButton_obj::clearStyle_backgroundSkin(){
            	HX_STACKFRAME(&_hx_pos_d430f7113eb44ec1_94_clearStyle_backgroundSkin)
HXLINE(  95)		this->set_backgroundSkin(null());
HXLINE(  96)		return this->backgroundSkin;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BasicToggleButton_obj,clearStyle_backgroundSkin,return )

 ::openfl::display::DisplayObject BasicToggleButton_obj::set_selectedBackgroundSkin( ::openfl::display::DisplayObject value){
            	HX_STACKFRAME(&_hx_pos_d430f7113eb44ec1_68_set_selectedBackgroundSkin)
HXLINE(  69)		if (!(this->setStyle(HX_("selectedBackgroundSkin",46,6d,99,7e),null()))) {
HXLINE(  70)			return this->selectedBackgroundSkin;
            		}
HXLINE(  72)		if (::hx::IsEq( this->selectedBackgroundSkin,value )) {
HXLINE(  73)			return this->selectedBackgroundSkin;
            		}
HXLINE(  78)		this->_previousClearStyle = this->clearStyle_selectedBackgroundSkin_dyn();
HXLINE(  79)		this->selectedBackgroundSkin = value;
HXLINE(  80)		this->setInvalid(HX_("styles",22,e6,d2,15));
HXLINE(  81)		return this->selectedBackgroundSkin;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BasicToggleButton_obj,set_selectedBackgroundSkin,return )

 ::openfl::display::DisplayObject BasicToggleButton_obj::clearStyle_selectedBackgroundSkin(){
            	HX_STACKFRAME(&_hx_pos_d430f7113eb44ec1_94_clearStyle_selectedBackgroundSkin)
HXLINE(  95)		this->set_selectedBackgroundSkin(null());
HXLINE(  96)		return this->selectedBackgroundSkin;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BasicToggleButton_obj,clearStyle_selectedBackgroundSkin,return )


::hx::ObjectPtr< BasicToggleButton_obj > BasicToggleButton_obj::__new() {
	::hx::ObjectPtr< BasicToggleButton_obj > __this = new BasicToggleButton_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< BasicToggleButton_obj > BasicToggleButton_obj::__alloc(::hx::Ctx *_hx_ctx) {
	BasicToggleButton_obj *__this = (BasicToggleButton_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BasicToggleButton_obj), true, "feathers.controls.BasicToggleButton"));
	*(void **)__this = BasicToggleButton_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

BasicToggleButton_obj::BasicToggleButton_obj()
{
}

void BasicToggleButton_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BasicToggleButton);
	HX_MARK_MEMBER_NAME(currentState,"currentState");
	HX_MARK_MEMBER_NAME(selected,"selected");
	HX_MARK_MEMBER_NAME(toggleable,"toggleable");
	HX_MARK_MEMBER_NAME(_pointerToState,"_pointerToState");
	HX_MARK_MEMBER_NAME(_keyToState,"_keyToState");
	HX_MARK_MEMBER_NAME(_pointerTrigger,"_pointerTrigger");
	HX_MARK_MEMBER_NAME(_backgroundSkinMeasurements,"_backgroundSkinMeasurements");
	HX_MARK_MEMBER_NAME(_currentBackgroundSkin,"_currentBackgroundSkin");
	HX_MARK_MEMBER_NAME(keepDownStateOnRollOut,"keepDownStateOnRollOut");
	HX_MARK_MEMBER_NAME(backgroundSkin,"backgroundSkin");
	HX_MARK_MEMBER_NAME(selectedBackgroundSkin,"selectedBackgroundSkin");
	HX_MARK_MEMBER_NAME(_stateToSkin,"_stateToSkin");
	 ::feathers::core::FeathersControl_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void BasicToggleButton_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(currentState,"currentState");
	HX_VISIT_MEMBER_NAME(selected,"selected");
	HX_VISIT_MEMBER_NAME(toggleable,"toggleable");
	HX_VISIT_MEMBER_NAME(_pointerToState,"_pointerToState");
	HX_VISIT_MEMBER_NAME(_keyToState,"_keyToState");
	HX_VISIT_MEMBER_NAME(_pointerTrigger,"_pointerTrigger");
	HX_VISIT_MEMBER_NAME(_backgroundSkinMeasurements,"_backgroundSkinMeasurements");
	HX_VISIT_MEMBER_NAME(_currentBackgroundSkin,"_currentBackgroundSkin");
	HX_VISIT_MEMBER_NAME(keepDownStateOnRollOut,"keepDownStateOnRollOut");
	HX_VISIT_MEMBER_NAME(backgroundSkin,"backgroundSkin");
	HX_VISIT_MEMBER_NAME(selectedBackgroundSkin,"selectedBackgroundSkin");
	HX_VISIT_MEMBER_NAME(_stateToSkin,"_stateToSkin");
	 ::feathers::core::FeathersControl_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val BasicToggleButton_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"measure") ) { return ::hx::Val( measure_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selected") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_selected() : selected ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"toggleable") ) { return ::hx::Val( toggleable ); }
		if (HX_FIELD_EQ(inName,"initialize") ) { return ::hx::Val( initialize_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"set_enabled") ) { return ::hx::Val( set_enabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"_keyToState") ) { return ::hx::Val( _keyToState ); }
		if (HX_FIELD_EQ(inName,"changeState") ) { return ::hx::Val( changeState_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"currentState") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_currentState() : currentState ); }
		if (HX_FIELD_EQ(inName,"get_selected") ) { return ::hx::Val( get_selected_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_selected") ) { return ::hx::Val( set_selected_dyn() ); }
		if (HX_FIELD_EQ(inName,"_stateToSkin") ) { return ::hx::Val( _stateToSkin ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"set_toggleable") ) { return ::hx::Val( set_toggleable_dyn() ); }
		if (HX_FIELD_EQ(inName,"backgroundSkin") ) { return ::hx::Val( backgroundSkin ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_pointerToState") ) { return ::hx::Val( _pointerToState ); }
		if (HX_FIELD_EQ(inName,"_pointerTrigger") ) { return ::hx::Val( _pointerTrigger ); }
		if (HX_FIELD_EQ(inName,"getSkinForState") ) { return ::hx::Val( getSkinForState_dyn() ); }
		if (HX_FIELD_EQ(inName,"setSkinForState") ) { return ::hx::Val( setSkinForState_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_currentState") ) { return ::hx::Val( get_currentState_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"set_backgroundSkin") ) { return ::hx::Val( set_backgroundSkin_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"refreshInteractivity") ) { return ::hx::Val( refreshInteractivity_dyn() ); }
		if (HX_FIELD_EQ(inName,"layoutBackgroundSkin") ) { return ::hx::Val( layoutBackgroundSkin_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"refreshBackgroundSkin") ) { return ::hx::Val( refreshBackgroundSkin_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_currentBackgroundSkin") ) { return ::hx::Val( _currentBackgroundSkin ); }
		if (HX_FIELD_EQ(inName,"keepDownStateOnRollOut") ) { return ::hx::Val( keepDownStateOnRollOut ); }
		if (HX_FIELD_EQ(inName,"selectedBackgroundSkin") ) { return ::hx::Val( selectedBackgroundSkin ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"getCurrentBackgroundSkin") ) { return ::hx::Val( getCurrentBackgroundSkin_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"clearStyle_backgroundSkin") ) { return ::hx::Val( clearStyle_backgroundSkin_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"set_keepDownStateOnRollOut") ) { return ::hx::Val( set_keepDownStateOnRollOut_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_selectedBackgroundSkin") ) { return ::hx::Val( set_selectedBackgroundSkin_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"_backgroundSkinMeasurements") ) { return ::hx::Val( _backgroundSkinMeasurements ); }
		if (HX_FIELD_EQ(inName,"removeCurrentBackgroundSkin") ) { return ::hx::Val( removeCurrentBackgroundSkin_dyn() ); }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"basicToggleButton_triggerHandler") ) { return ::hx::Val( basicToggleButton_triggerHandler_dyn() ); }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"clearStyle_keepDownStateOnRollOut") ) { return ::hx::Val( clearStyle_keepDownStateOnRollOut_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_selectedBackgroundSkin") ) { return ::hx::Val( clearStyle_selectedBackgroundSkin_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val BasicToggleButton_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"selected") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_selected(inValue.Cast< bool >()) );selected=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"toggleable") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_toggleable(inValue.Cast< bool >()) );toggleable=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_keyToState") ) { _keyToState=inValue.Cast<  ::feathers::utils::KeyToState >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"currentState") ) { currentState=inValue.Cast<  ::feathers::controls::ToggleButtonState >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_stateToSkin") ) { _stateToSkin=inValue.Cast<  ::haxe::ds::EnumValueMap >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"backgroundSkin") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_backgroundSkin(inValue.Cast<  ::openfl::display::DisplayObject >()) );backgroundSkin=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_pointerToState") ) { _pointerToState=inValue.Cast<  ::feathers::utils::PointerToState >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_pointerTrigger") ) { _pointerTrigger=inValue.Cast<  ::feathers::utils::PointerTrigger >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_currentBackgroundSkin") ) { _currentBackgroundSkin=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"keepDownStateOnRollOut") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_keepDownStateOnRollOut(inValue.Cast< bool >()) );keepDownStateOnRollOut=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectedBackgroundSkin") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_selectedBackgroundSkin(inValue.Cast<  ::openfl::display::DisplayObject >()) );selectedBackgroundSkin=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"_backgroundSkinMeasurements") ) { _backgroundSkinMeasurements=inValue.Cast<  ::feathers::layout::Measurements >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BasicToggleButton_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("currentState",18,5b,17,cb));
	outFields->push(HX_("selected",5b,2a,6d,b1));
	outFields->push(HX_("toggleable",2e,87,45,ed));
	outFields->push(HX_("_pointerToState",f8,b3,15,fc));
	outFields->push(HX_("_keyToState",d6,2f,a1,91));
	outFields->push(HX_("_pointerTrigger",9a,46,65,d1));
	outFields->push(HX_("_backgroundSkinMeasurements",41,46,9b,f8));
	outFields->push(HX_("_currentBackgroundSkin",e5,c0,55,58));
	outFields->push(HX_("keepDownStateOnRollOut",48,7f,38,c2));
	outFields->push(HX_("backgroundSkin",8b,65,6f,20));
	outFields->push(HX_("selectedBackgroundSkin",46,6d,99,7e));
	outFields->push(HX_("_stateToSkin",8a,7c,a1,62));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo BasicToggleButton_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::feathers::controls::ToggleButtonState */ ,(int)offsetof(BasicToggleButton_obj,currentState),HX_("currentState",18,5b,17,cb)},
	{::hx::fsBool,(int)offsetof(BasicToggleButton_obj,selected),HX_("selected",5b,2a,6d,b1)},
	{::hx::fsBool,(int)offsetof(BasicToggleButton_obj,toggleable),HX_("toggleable",2e,87,45,ed)},
	{::hx::fsObject /*  ::feathers::utils::PointerToState */ ,(int)offsetof(BasicToggleButton_obj,_pointerToState),HX_("_pointerToState",f8,b3,15,fc)},
	{::hx::fsObject /*  ::feathers::utils::KeyToState */ ,(int)offsetof(BasicToggleButton_obj,_keyToState),HX_("_keyToState",d6,2f,a1,91)},
	{::hx::fsObject /*  ::feathers::utils::PointerTrigger */ ,(int)offsetof(BasicToggleButton_obj,_pointerTrigger),HX_("_pointerTrigger",9a,46,65,d1)},
	{::hx::fsObject /*  ::feathers::layout::Measurements */ ,(int)offsetof(BasicToggleButton_obj,_backgroundSkinMeasurements),HX_("_backgroundSkinMeasurements",41,46,9b,f8)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(BasicToggleButton_obj,_currentBackgroundSkin),HX_("_currentBackgroundSkin",e5,c0,55,58)},
	{::hx::fsBool,(int)offsetof(BasicToggleButton_obj,keepDownStateOnRollOut),HX_("keepDownStateOnRollOut",48,7f,38,c2)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(BasicToggleButton_obj,backgroundSkin),HX_("backgroundSkin",8b,65,6f,20)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(BasicToggleButton_obj,selectedBackgroundSkin),HX_("selectedBackgroundSkin",46,6d,99,7e)},
	{::hx::fsObject /*  ::haxe::ds::EnumValueMap */ ,(int)offsetof(BasicToggleButton_obj,_stateToSkin),HX_("_stateToSkin",8a,7c,a1,62)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *BasicToggleButton_obj_sStaticStorageInfo = 0;
#endif

static ::String BasicToggleButton_obj_sMemberFields[] = {
	HX_("currentState",18,5b,17,cb),
	HX_("get_currentState",a1,47,b6,cf),
	HX_("set_enabled",a4,6b,98,0e),
	HX_("selected",5b,2a,6d,b1),
	HX_("get_selected",64,de,86,66),
	HX_("set_selected",d8,01,80,7b),
	HX_("toggleable",2e,87,45,ed),
	HX_("set_toggleable",eb,f7,5a,83),
	HX_("_pointerToState",f8,b3,15,fc),
	HX_("_keyToState",d6,2f,a1,91),
	HX_("_pointerTrigger",9a,46,65,d1),
	HX_("_backgroundSkinMeasurements",41,46,9b,f8),
	HX_("_currentBackgroundSkin",e5,c0,55,58),
	HX_("keepDownStateOnRollOut",48,7f,38,c2),
	HX_("backgroundSkin",8b,65,6f,20),
	HX_("selectedBackgroundSkin",46,6d,99,7e),
	HX_("_stateToSkin",8a,7c,a1,62),
	HX_("getSkinForState",9b,6b,a7,62),
	HX_("setSkinForState",a7,e8,72,5e),
	HX_("initialize",50,31,bb,ec),
	HX_("update",09,86,05,87),
	HX_("refreshInteractivity",10,92,53,10),
	HX_("refreshBackgroundSkin",c6,3c,91,2d),
	HX_("getCurrentBackgroundSkin",2e,6b,dc,9d),
	HX_("removeCurrentBackgroundSkin",c0,fc,70,a2),
	HX_("measure",5e,fb,e9,3c),
	HX_("layoutBackgroundSkin",d5,3d,2a,eb),
	HX_("changeState",81,1e,d1,a9),
	HX_("basicToggleButton_triggerHandler",1d,c4,bc,9e),
	HX_("set_keepDownStateOnRollOut",85,97,d2,59),
	HX_("clearStyle_keepDownStateOnRollOut",03,27,2d,c0),
	HX_("set_backgroundSkin",c8,78,b8,98),
	HX_("clearStyle_backgroundSkin",46,5a,f8,27),
	HX_("set_selectedBackgroundSkin",83,85,33,16),
	HX_("clearStyle_selectedBackgroundSkin",01,15,8e,7c),
	::String(null()) };

::hx::Class BasicToggleButton_obj::__mClass;

void BasicToggleButton_obj::__register()
{
	BasicToggleButton_obj _hx_dummy;
	BasicToggleButton_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("feathers.controls.BasicToggleButton",1a,db,6d,97);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BasicToggleButton_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BasicToggleButton_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BasicToggleButton_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BasicToggleButton_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void BasicToggleButton_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e33c116aa54be7a2_39_boot)
HXDLIN(  39)		__mClass->__meta__ =  ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("fields",79,8e,8e,80), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("setSkinForState",a7,e8,72,5e), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("style",31,a5,1d,84),null()))))));
            	}
}

} // end namespace feathers
} // end namespace controls
