// Generated by Haxe 4.1.0
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_feathers_core_IValidating
#include <feathers/core/IValidating.h>
#endif
#ifndef INCLUDED_feathers_core_ValidatingSprite
#include <feathers/core/ValidatingSprite.h>
#endif
#ifndef INCLUDED_feathers_core_ValidationQueue
#include <feathers/core/ValidationQueue.h>
#endif
#ifndef INCLUDED_feathers_utils_DisplayUtil
#include <feathers/utils/DisplayUtil.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IllegalOperationError
#include <openfl/errors/IllegalOperationError.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e6b8ef3cbf4ee359_24_new,"feathers.core.ValidatingSprite","new",0x25cb1b3b,"feathers.core.ValidatingSprite.new","feathers/core/ValidatingSprite.hx",24,0x0cdd4435)
HX_LOCAL_STACK_FRAME(_hx_pos_e6b8ef3cbf4ee359_60_isInvalid,"feathers.core.ValidatingSprite","isInvalid",0x1f2db948,"feathers.core.ValidatingSprite.isInvalid","feathers/core/ValidatingSprite.hx",60,0x0cdd4435)
HX_LOCAL_STACK_FRAME(_hx_pos_e6b8ef3cbf4ee359_93_setInvalid,"feathers.core.ValidatingSprite","setInvalid",0x98b495fa,"feathers.core.ValidatingSprite.setInvalid","feathers/core/ValidatingSprite.hx",93,0x0cdd4435)
HX_LOCAL_STACK_FRAME(_hx_pos_e6b8ef3cbf4ee359_150_validateNow,"feathers.core.ValidatingSprite","validateNow",0xfc15dffb,"feathers.core.ValidatingSprite.validateNow","feathers/core/ValidatingSprite.hx",150,0x0cdd4435)
HX_LOCAL_STACK_FRAME(_hx_pos_e6b8ef3cbf4ee359_189_setInvalidationFlag,"feathers.core.ValidatingSprite","setInvalidationFlag",0x9e3423c7,"feathers.core.ValidatingSprite.setInvalidationFlag","feathers/core/ValidatingSprite.hx",189,0x0cdd4435)
HX_LOCAL_STACK_FRAME(_hx_pos_e6b8ef3cbf4ee359_213_update,"feathers.core.ValidatingSprite","update",0x607a360e,"feathers.core.ValidatingSprite.update","feathers/core/ValidatingSprite.hx",213,0x0cdd4435)
HX_LOCAL_STACK_FRAME(_hx_pos_e6b8ef3cbf4ee359_215_validatingSprite_addedToStageHandler,"feathers.core.ValidatingSprite","validatingSprite_addedToStageHandler",0x122cdf25,"feathers.core.ValidatingSprite.validatingSprite_addedToStageHandler","feathers/core/ValidatingSprite.hx",215,0x0cdd4435)
HX_LOCAL_STACK_FRAME(_hx_pos_e6b8ef3cbf4ee359_225_validatingSprite_removedFromStageHandler,"feathers.core.ValidatingSprite","validatingSprite_removedFromStageHandler",0x39636374,"feathers.core.ValidatingSprite.validatingSprite_removedFromStageHandler","feathers/core/ValidatingSprite.hx",225,0x0cdd4435)
namespace feathers{
namespace core{

void ValidatingSprite_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_e6b8ef3cbf4ee359_24_new)
HXLINE(  42)		this->depth = -1;
HXLINE(  37)		this->_validationQueue = null();
HXLINE(  36)		this->_setInvalidCount = 0;
HXLINE(  35)		this->_delayedInvalidationFlags =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  34)		this->_invalidationFlags =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  33)		this->_allInvalidDelayed = false;
HXLINE(  32)		this->_allInvalid = false;
HXLINE(  31)		this->_validating = false;
HXLINE(  26)		super::__construct();
HXLINE(  27)		this->addEventListener(HX_("addedToStage",63,22,55,0c),this->validatingSprite_addedToStageHandler_dyn(),null(),null(),null());
HXLINE(  28)		this->addEventListener(HX_("removedFromStage",34,21,76,ba),this->validatingSprite_removedFromStageHandler_dyn(),null(),null(),null());
            	}

Dynamic ValidatingSprite_obj::__CreateEmpty() { return new ValidatingSprite_obj; }

void *ValidatingSprite_obj::_hx_vtable = 0;

Dynamic ValidatingSprite_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ValidatingSprite_obj > _hx_result = new ValidatingSprite_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ValidatingSprite_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c89e854) {
		if (inClassId<=(int)0x093ab78b) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x093ab78b;
			}
		} else {
			return inClassId==(int)0x0c89e854;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

static ::feathers::core::IValidating_obj _hx_feathers_core_ValidatingSprite__hx_feathers_core_IValidating= {
	( void (::hx::Object::*)())&::feathers::core::ValidatingSprite_obj::validateNow,
};

void *ValidatingSprite_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x64d4b3cd: return &_hx_feathers_core_ValidatingSprite__hx_feathers_core_IValidating;
	}
	return super::_hx_getInterface(inHash);
}

bool ValidatingSprite_obj::isInvalid(::String flag){
            	HX_STACKFRAME(&_hx_pos_e6b8ef3cbf4ee359_60_isInvalid)
HXLINE(  61)		if (this->_allInvalid) {
HXLINE(  62)			return true;
            		}
HXLINE(  64)		if (::hx::IsNull( flag )) {
HXLINE(  66)			return ( (bool)(this->_invalidationFlags->keys()->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) );
            		}
HXLINE(  68)		return this->_invalidationFlags->exists(flag);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ValidatingSprite_obj,isInvalid,return )

void ValidatingSprite_obj::setInvalid(::String flag){
            	HX_GC_STACKFRAME(&_hx_pos_e6b8ef3cbf4ee359_93_setInvalid)
HXLINE(  94)		bool alreadyInvalid = this->isInvalid(null());
HXLINE(  95)		bool alreadyDelayedInvalid = false;
HXLINE(  96)		if (this->_validating) {
HXLINE(  97)			 ::Dynamic otherFlag = this->_delayedInvalidationFlags->keys();
HXDLIN(  97)			while(( (bool)(otherFlag->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  97)				::String otherFlag1 = ( (::String)(otherFlag->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(  98)				alreadyDelayedInvalid = true;
HXLINE(  99)				goto _hx_goto_2;
            			}
            			_hx_goto_2:;
            		}
HXLINE( 102)		if (::hx::IsNull( flag )) {
HXLINE( 103)			if (this->_validating) {
HXLINE( 104)				this->_allInvalidDelayed = true;
            			}
            			else {
HXLINE( 106)				this->_allInvalid = true;
            			}
            		}
            		else {
HXLINE( 109)			if (this->_validating) {
HXLINE( 110)				this->_delayedInvalidationFlags->set(flag,true);
            			}
            			else {
HXLINE( 111)				bool _hx_tmp;
HXDLIN( 111)				if (::hx::IsNotNull( flag )) {
HXLINE( 111)					_hx_tmp = !(this->_invalidationFlags->exists(flag));
            				}
            				else {
HXLINE( 111)					_hx_tmp = false;
            				}
HXDLIN( 111)				if (_hx_tmp) {
HXLINE( 112)					this->_invalidationFlags->set(flag,true);
            				}
            			}
            		}
HXLINE( 115)		if (::hx::IsNull( this->_validationQueue )) {
HXLINE( 118)			return;
            		}
HXLINE( 120)		if (this->_validating) {
HXLINE( 123)			if (alreadyDelayedInvalid) {
HXLINE( 124)				return;
            			}
HXLINE( 126)			this->_setInvalidCount++;
HXLINE( 132)			if ((this->_setInvalidCount >= 10)) {
HXLINE( 133)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,(::Type_obj::getClassName(::Type_obj::getClass(::hx::ObjectPtr<OBJ_>(this))) + HX_(" returned to validation queue too many times during validation. This may be an infinite loop. Try to avoid doing anything that calls setInvalid() during validation.",f2,36,c8,3e)))));
            			}
HXLINE( 137)			this->_validationQueue->addControl(::hx::ObjectPtr<OBJ_>(this));
HXLINE( 138)			return;
            		}
HXLINE( 140)		if (alreadyInvalid) {
HXLINE( 141)			return;
            		}
HXLINE( 143)		this->_setInvalidCount = 0;
HXLINE( 144)		this->_validationQueue->addControl(::hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ValidatingSprite_obj,setInvalid,(void))

void ValidatingSprite_obj::validateNow(){
            	HX_STACKFRAME(&_hx_pos_e6b8ef3cbf4ee359_150_validateNow)
HXLINE( 153)		if (!(this->isInvalid(null()))) {
HXLINE( 154)			return;
            		}
HXLINE( 156)		if (this->_validating) {
HXLINE( 159)			return;
            		}
HXLINE( 161)		this->_validating = true;
HXLINE( 162)		this->update();
HXLINE( 163)		{
HXLINE( 163)			 ::Dynamic flag = this->_invalidationFlags->keys();
HXDLIN( 163)			while(( (bool)(flag->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 163)				::String flag1 = ( (::String)(flag->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 164)				this->_invalidationFlags->remove(flag1);
            			}
            		}
HXLINE( 166)		this->_allInvalid = this->_allInvalidDelayed;
HXLINE( 167)		{
HXLINE( 167)			 ::Dynamic flag1 = this->_delayedInvalidationFlags->keys();
HXDLIN( 167)			while(( (bool)(flag1->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 167)				::String flag = ( (::String)(flag1->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 168)				if (::hx::IsNull( flag )) {
HXLINE( 169)					this->_allInvalid = true;
            				}
            				else {
HXLINE( 171)					this->_invalidationFlags->set(flag,true);
            				}
HXLINE( 173)				this->_delayedInvalidationFlags->remove(flag);
            			}
            		}
HXLINE( 175)		this->_validating = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ValidatingSprite_obj,validateNow,(void))

void ValidatingSprite_obj::setInvalidationFlag(::String flag){
            	HX_STACKFRAME(&_hx_pos_e6b8ef3cbf4ee359_189_setInvalidationFlag)
HXLINE( 190)		if (this->_invalidationFlags->exists(flag)) {
HXLINE( 191)			return;
            		}
HXLINE( 193)		this->_invalidationFlags->set(flag,true);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ValidatingSprite_obj,setInvalidationFlag,(void))

void ValidatingSprite_obj::update(){
            	HX_STACKFRAME(&_hx_pos_e6b8ef3cbf4ee359_213_update)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ValidatingSprite_obj,update,(void))

void ValidatingSprite_obj::validatingSprite_addedToStageHandler( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_e6b8ef3cbf4ee359_215_validatingSprite_addedToStageHandler)
HXLINE( 216)		this->depth = ::feathers::utils::DisplayUtil_obj::getDisplayObjectDepthFromStage(::hx::ObjectPtr<OBJ_>(this));
HXLINE( 217)		this->_validationQueue = ::feathers::core::ValidationQueue_obj::forStage(this->stage);
HXLINE( 218)		if (this->isInvalid(null())) {
HXLINE( 219)			this->_setInvalidCount = 0;
HXLINE( 221)			this->_validationQueue->addControl(::hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ValidatingSprite_obj,validatingSprite_addedToStageHandler,(void))

void ValidatingSprite_obj::validatingSprite_removedFromStageHandler( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_e6b8ef3cbf4ee359_225_validatingSprite_removedFromStageHandler)
HXLINE( 226)		this->depth = -1;
HXLINE( 227)		this->_validationQueue = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ValidatingSprite_obj,validatingSprite_removedFromStageHandler,(void))


::hx::ObjectPtr< ValidatingSprite_obj > ValidatingSprite_obj::__new() {
	::hx::ObjectPtr< ValidatingSprite_obj > __this = new ValidatingSprite_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< ValidatingSprite_obj > ValidatingSprite_obj::__alloc(::hx::Ctx *_hx_ctx) {
	ValidatingSprite_obj *__this = (ValidatingSprite_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ValidatingSprite_obj), true, "feathers.core.ValidatingSprite"));
	*(void **)__this = ValidatingSprite_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ValidatingSprite_obj::ValidatingSprite_obj()
{
}

void ValidatingSprite_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ValidatingSprite);
	HX_MARK_MEMBER_NAME(_validating,"_validating");
	HX_MARK_MEMBER_NAME(_allInvalid,"_allInvalid");
	HX_MARK_MEMBER_NAME(_allInvalidDelayed,"_allInvalidDelayed");
	HX_MARK_MEMBER_NAME(_invalidationFlags,"_invalidationFlags");
	HX_MARK_MEMBER_NAME(_delayedInvalidationFlags,"_delayedInvalidationFlags");
	HX_MARK_MEMBER_NAME(_setInvalidCount,"_setInvalidCount");
	HX_MARK_MEMBER_NAME(_validationQueue,"_validationQueue");
	HX_MARK_MEMBER_NAME(depth,"depth");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ValidatingSprite_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_validating,"_validating");
	HX_VISIT_MEMBER_NAME(_allInvalid,"_allInvalid");
	HX_VISIT_MEMBER_NAME(_allInvalidDelayed,"_allInvalidDelayed");
	HX_VISIT_MEMBER_NAME(_invalidationFlags,"_invalidationFlags");
	HX_VISIT_MEMBER_NAME(_delayedInvalidationFlags,"_delayedInvalidationFlags");
	HX_VISIT_MEMBER_NAME(_setInvalidCount,"_setInvalidCount");
	HX_VISIT_MEMBER_NAME(_validationQueue,"_validationQueue");
	HX_VISIT_MEMBER_NAME(depth,"depth");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ValidatingSprite_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"depth") ) { return ::hx::Val( depth ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isInvalid") ) { return ::hx::Val( isInvalid_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"setInvalid") ) { return ::hx::Val( setInvalid_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_validating") ) { return ::hx::Val( _validating ); }
		if (HX_FIELD_EQ(inName,"_allInvalid") ) { return ::hx::Val( _allInvalid ); }
		if (HX_FIELD_EQ(inName,"validateNow") ) { return ::hx::Val( validateNow_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_setInvalidCount") ) { return ::hx::Val( _setInvalidCount ); }
		if (HX_FIELD_EQ(inName,"_validationQueue") ) { return ::hx::Val( _validationQueue ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_allInvalidDelayed") ) { return ::hx::Val( _allInvalidDelayed ); }
		if (HX_FIELD_EQ(inName,"_invalidationFlags") ) { return ::hx::Val( _invalidationFlags ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"setInvalidationFlag") ) { return ::hx::Val( setInvalidationFlag_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"_delayedInvalidationFlags") ) { return ::hx::Val( _delayedInvalidationFlags ); }
		break;
	case 36:
		if (HX_FIELD_EQ(inName,"validatingSprite_addedToStageHandler") ) { return ::hx::Val( validatingSprite_addedToStageHandler_dyn() ); }
		break;
	case 40:
		if (HX_FIELD_EQ(inName,"validatingSprite_removedFromStageHandler") ) { return ::hx::Val( validatingSprite_removedFromStageHandler_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ValidatingSprite_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"depth") ) { depth=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_validating") ) { _validating=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_allInvalid") ) { _allInvalid=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_setInvalidCount") ) { _setInvalidCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_validationQueue") ) { _validationQueue=inValue.Cast<  ::feathers::core::ValidationQueue >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_allInvalidDelayed") ) { _allInvalidDelayed=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_invalidationFlags") ) { _invalidationFlags=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"_delayedInvalidationFlags") ) { _delayedInvalidationFlags=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ValidatingSprite_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_validating",72,d8,76,b4));
	outFields->push(HX_("_allInvalid",f5,ac,7a,d6));
	outFields->push(HX_("_allInvalidDelayed",2d,8a,39,cc));
	outFields->push(HX_("_invalidationFlags",ca,12,21,cb));
	outFields->push(HX_("_delayedInvalidationFlags",66,26,ce,04));
	outFields->push(HX_("_setInvalidCount",9b,cf,4d,f9));
	outFields->push(HX_("_validationQueue",19,45,96,f1));
	outFields->push(HX_("depth",03,f1,29,d7));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ValidatingSprite_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(ValidatingSprite_obj,_validating),HX_("_validating",72,d8,76,b4)},
	{::hx::fsBool,(int)offsetof(ValidatingSprite_obj,_allInvalid),HX_("_allInvalid",f5,ac,7a,d6)},
	{::hx::fsBool,(int)offsetof(ValidatingSprite_obj,_allInvalidDelayed),HX_("_allInvalidDelayed",2d,8a,39,cc)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(ValidatingSprite_obj,_invalidationFlags),HX_("_invalidationFlags",ca,12,21,cb)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(ValidatingSprite_obj,_delayedInvalidationFlags),HX_("_delayedInvalidationFlags",66,26,ce,04)},
	{::hx::fsInt,(int)offsetof(ValidatingSprite_obj,_setInvalidCount),HX_("_setInvalidCount",9b,cf,4d,f9)},
	{::hx::fsObject /*  ::feathers::core::ValidationQueue */ ,(int)offsetof(ValidatingSprite_obj,_validationQueue),HX_("_validationQueue",19,45,96,f1)},
	{::hx::fsInt,(int)offsetof(ValidatingSprite_obj,depth),HX_("depth",03,f1,29,d7)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ValidatingSprite_obj_sStaticStorageInfo = 0;
#endif

static ::String ValidatingSprite_obj_sMemberFields[] = {
	HX_("_validating",72,d8,76,b4),
	HX_("_allInvalid",f5,ac,7a,d6),
	HX_("_allInvalidDelayed",2d,8a,39,cc),
	HX_("_invalidationFlags",ca,12,21,cb),
	HX_("_delayedInvalidationFlags",66,26,ce,04),
	HX_("_setInvalidCount",9b,cf,4d,f9),
	HX_("_validationQueue",19,45,96,f1),
	HX_("depth",03,f1,29,d7),
	HX_("isInvalid",2d,58,46,3f),
	HX_("setInvalid",75,ff,26,8e),
	HX_("validateNow",20,c2,bf,ca),
	HX_("setInvalidationFlag",ec,32,74,59),
	HX_("update",09,86,05,87),
	HX_("validatingSprite_addedToStageHandler",60,76,5d,32),
	HX_("validatingSprite_removedFromStageHandler",2f,b4,cf,ab),
	::String(null()) };

::hx::Class ValidatingSprite_obj::__mClass;

void ValidatingSprite_obj::__register()
{
	ValidatingSprite_obj _hx_dummy;
	ValidatingSprite_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("feathers.core.ValidatingSprite",c9,61,40,cd);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ValidatingSprite_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ValidatingSprite_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ValidatingSprite_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ValidatingSprite_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace feathers
} // end namespace core
