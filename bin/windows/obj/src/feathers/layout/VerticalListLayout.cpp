// Generated by Haxe 4.1.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_feathers_core_IValidating
#include <feathers/core/IValidating.h>
#endif
#ifndef INCLUDED_feathers_events_FeathersEvent
#include <feathers/events/FeathersEvent.h>
#endif
#ifndef INCLUDED_feathers_layout_Direction
#include <feathers/layout/Direction.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayout
#include <feathers/layout/ILayout.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayoutObject
#include <feathers/layout/ILayoutObject.h>
#endif
#ifndef INCLUDED_feathers_layout_IScrollLayout
#include <feathers/layout/IScrollLayout.h>
#endif
#ifndef INCLUDED_feathers_layout_IVirtualLayout
#include <feathers/layout/IVirtualLayout.h>
#endif
#ifndef INCLUDED_feathers_layout_LayoutBoundsResult
#include <feathers/layout/LayoutBoundsResult.h>
#endif
#ifndef INCLUDED_feathers_layout_Measurements
#include <feathers/layout/Measurements.h>
#endif
#ifndef INCLUDED_feathers_layout_VerticalListLayout
#include <feathers/layout/VerticalListLayout.h>
#endif
#ifndef INCLUDED_feathers_layout_VirtualLayoutRange
#include <feathers/layout/VirtualLayoutRange.h>
#endif
#ifndef INCLUDED_feathers_layout__VerticalListLayout_VirtualCacheItem
#include <feathers/layout/_VerticalListLayout/VirtualCacheItem.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_19102b100d84e010_28_new,"feathers.layout.VerticalListLayout","new",0xb8804716,"feathers.layout.VerticalListLayout.new","feathers/layout/VerticalListLayout.hx",28,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_43_set_scrollX,"feathers.layout.VerticalListLayout","set_scrollX",0xc372b784,"feathers.layout.VerticalListLayout.set_scrollX","feathers/layout/VerticalListLayout.hx",43,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_53_set_scrollY,"feathers.layout.VerticalListLayout","set_scrollY",0xc372b785,"feathers.layout.VerticalListLayout.set_scrollY","feathers/layout/VerticalListLayout.hx",53,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_65_get_virtualCache,"feathers.layout.VerticalListLayout","get_virtualCache",0x351aa04a,"feathers.layout.VerticalListLayout.get_virtualCache","feathers/layout/VerticalListLayout.hx",65,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_68_set_virtualCache,"feathers.layout.VerticalListLayout","set_virtualCache",0x8b5c8dbe,"feathers.layout.VerticalListLayout.set_virtualCache","feathers/layout/VerticalListLayout.hx",68,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_79_get_primaryDirection,"feathers.layout.VerticalListLayout","get_primaryDirection",0x82eafbb0,"feathers.layout.VerticalListLayout.get_primaryDirection","feathers/layout/VerticalListLayout.hx",79,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_88_get_requiresLayoutOnScroll,"feathers.layout.VerticalListLayout","get_requiresLayoutOnScroll",0x10eb6f37,"feathers.layout.VerticalListLayout.get_requiresLayoutOnScroll","feathers/layout/VerticalListLayout.hx",88,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_108_set_requestedRowCount,"feathers.layout.VerticalListLayout","set_requestedRowCount",0xc9c7e4fc,"feathers.layout.VerticalListLayout.set_requestedRowCount","feathers/layout/VerticalListLayout.hx",108,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_133_set_paddingTop,"feathers.layout.VerticalListLayout","set_paddingTop",0xea0ea70b,"feathers.layout.VerticalListLayout.set_paddingTop","feathers/layout/VerticalListLayout.hx",133,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_158_set_paddingRight,"feathers.layout.VerticalListLayout","set_paddingRight",0x5d83d5d2,"feathers.layout.VerticalListLayout.set_paddingRight","feathers/layout/VerticalListLayout.hx",158,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_183_set_paddingBottom,"feathers.layout.VerticalListLayout","set_paddingBottom",0x8d29d435,"feathers.layout.VerticalListLayout.set_paddingBottom","feathers/layout/VerticalListLayout.hx",183,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_208_set_paddingLeft,"feathers.layout.VerticalListLayout","set_paddingLeft",0xdd722ed1,"feathers.layout.VerticalListLayout.set_paddingLeft","feathers/layout/VerticalListLayout.hx",208,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_232_set_gap,"feathers.layout.VerticalListLayout","set_gap",0x6b51e06f,"feathers.layout.VerticalListLayout.set_gap","feathers/layout/VerticalListLayout.hx",232,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_244_layout,"feathers.layout.VerticalListLayout","layout",0x7b86cdb4,"feathers.layout.VerticalListLayout.layout","feathers/layout/VerticalListLayout.hx",244,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_309_calculateViewPortWidth,"feathers.layout.VerticalListLayout","calculateViewPortWidth",0x320f2d64,"feathers.layout.VerticalListLayout.calculateViewPortWidth","feathers/layout/VerticalListLayout.hx",309,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_335_calculateVirtualRowHeight,"feathers.layout.VerticalListLayout","calculateVirtualRowHeight",0x112062d2,"feathers.layout.VerticalListLayout.calculateVirtualRowHeight","feathers/layout/VerticalListLayout.hx",335,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_365_getVisibleIndices,"feathers.layout.VerticalListLayout","getVisibleIndices",0x1e1d0141,"feathers.layout.VerticalListLayout.getVisibleIndices","feathers/layout/VerticalListLayout.hx",365,0xa03146fa)
namespace feathers{
namespace layout{

void VerticalListLayout_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_28_new)
HXLINE( 230)		this->gap = ((Float)0.0);
HXLINE( 206)		this->paddingLeft = ((Float)0.0);
HXLINE( 181)		this->paddingBottom = ((Float)0.0);
HXLINE( 156)		this->paddingRight = ((Float)0.0);
HXLINE( 131)		this->paddingTop = ((Float)0.0);
HXLINE( 106)		this->requestedRowCount = ((Float)5.0);
HXLINE(  51)		this->scrollY = ((Float)0.0);
HXLINE(  41)		this->scrollX = ((Float)0.0);
HXLINE(  35)		super::__construct(null());
            	}

Dynamic VerticalListLayout_obj::__CreateEmpty() { return new VerticalListLayout_obj; }

void *VerticalListLayout_obj::_hx_vtable = 0;

Dynamic VerticalListLayout_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< VerticalListLayout_obj > _hx_result = new VerticalListLayout_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool VerticalListLayout_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c89e854) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0c89e854;
	} else {
		return inClassId==(int)0x640862b8;
	}
}

static ::openfl::events::IEventDispatcher_obj _hx_feathers_layout_VerticalListLayout__hx_openfl_events_IEventDispatcher= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::layout::VerticalListLayout_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::layout::VerticalListLayout_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::layout::VerticalListLayout_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::layout::VerticalListLayout_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::layout::VerticalListLayout_obj::willTrigger,
};

static ::feathers::layout::IScrollLayout_obj _hx_feathers_layout_VerticalListLayout__hx_feathers_layout_IScrollLayout= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::layout::VerticalListLayout_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::layout::VerticalListLayout_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::layout::VerticalListLayout_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::layout::VerticalListLayout_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::layout::VerticalListLayout_obj::willTrigger,
	(  ::feathers::layout::LayoutBoundsResult (::hx::Object::*)(::Array< ::Dynamic>, ::feathers::layout::Measurements, ::feathers::layout::LayoutBoundsResult))&::feathers::layout::VerticalListLayout_obj::layout,
	( Float (::hx::Object::*)(Float))&::feathers::layout::VerticalListLayout_obj::set_scrollX,
	( Float (::hx::Object::*)(Float))&::feathers::layout::VerticalListLayout_obj::set_scrollY,
	(  ::feathers::layout::Direction (::hx::Object::*)())&::feathers::layout::VerticalListLayout_obj::get_primaryDirection,
	( bool (::hx::Object::*)())&::feathers::layout::VerticalListLayout_obj::get_requiresLayoutOnScroll,
};

static ::feathers::layout::ILayout_obj _hx_feathers_layout_VerticalListLayout__hx_feathers_layout_ILayout= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::layout::VerticalListLayout_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::layout::VerticalListLayout_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::layout::VerticalListLayout_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::layout::VerticalListLayout_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::layout::VerticalListLayout_obj::willTrigger,
	(  ::feathers::layout::LayoutBoundsResult (::hx::Object::*)(::Array< ::Dynamic>, ::feathers::layout::Measurements, ::feathers::layout::LayoutBoundsResult))&::feathers::layout::VerticalListLayout_obj::layout,
};

static ::feathers::layout::IVirtualLayout_obj _hx_feathers_layout_VerticalListLayout__hx_feathers_layout_IVirtualLayout= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::layout::VerticalListLayout_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::layout::VerticalListLayout_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::layout::VerticalListLayout_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::layout::VerticalListLayout_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::layout::VerticalListLayout_obj::willTrigger,
	(  ::feathers::layout::LayoutBoundsResult (::hx::Object::*)(::Array< ::Dynamic>, ::feathers::layout::Measurements, ::feathers::layout::LayoutBoundsResult))&::feathers::layout::VerticalListLayout_obj::layout,
	( Float (::hx::Object::*)(Float))&::feathers::layout::VerticalListLayout_obj::set_scrollX,
	( Float (::hx::Object::*)(Float))&::feathers::layout::VerticalListLayout_obj::set_scrollY,
	(  ::feathers::layout::Direction (::hx::Object::*)())&::feathers::layout::VerticalListLayout_obj::get_primaryDirection,
	( bool (::hx::Object::*)())&::feathers::layout::VerticalListLayout_obj::get_requiresLayoutOnScroll,
	( ::cpp::VirtualArray (::hx::Object::*)())&::feathers::layout::VerticalListLayout_obj::get_virtualCache,
	( ::cpp::VirtualArray (::hx::Object::*)(::cpp::VirtualArray))&::feathers::layout::VerticalListLayout_obj::set_virtualCache,
	(  ::feathers::layout::VirtualLayoutRange (::hx::Object::*)(int,Float,Float, ::feathers::layout::VirtualLayoutRange))&::feathers::layout::VerticalListLayout_obj::getVisibleIndices,
};

void *VerticalListLayout_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x87530281: return &_hx_feathers_layout_VerticalListLayout__hx_openfl_events_IEventDispatcher;
		case (int)0x7543aca6: return &_hx_feathers_layout_VerticalListLayout__hx_feathers_layout_IScrollLayout;
		case (int)0x3e135379: return &_hx_feathers_layout_VerticalListLayout__hx_feathers_layout_ILayout;
		case (int)0x3aa17e26: return &_hx_feathers_layout_VerticalListLayout__hx_feathers_layout_IVirtualLayout;
	}
	return super::_hx_getInterface(inHash);
}

Float VerticalListLayout_obj::set_scrollX(Float value){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_43_set_scrollX)
HXLINE(  44)		this->scrollX = value;
HXLINE(  45)		return this->scrollX;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VerticalListLayout_obj,set_scrollX,return )

Float VerticalListLayout_obj::set_scrollY(Float value){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_53_set_scrollY)
HXLINE(  54)		this->scrollY = value;
HXLINE(  55)		return this->scrollY;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VerticalListLayout_obj,set_scrollY,return )

::cpp::VirtualArray VerticalListLayout_obj::get_virtualCache(){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_65_get_virtualCache)
HXDLIN(  65)		return this->virtualCache;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VerticalListLayout_obj,get_virtualCache,return )

::cpp::VirtualArray VerticalListLayout_obj::set_virtualCache(::cpp::VirtualArray value){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_68_set_virtualCache)
HXLINE(  69)		this->virtualCache = value;
HXLINE(  70)		return this->get_virtualCache();
            	}


HX_DEFINE_DYNAMIC_FUNC1(VerticalListLayout_obj,set_virtualCache,return )

 ::feathers::layout::Direction VerticalListLayout_obj::get_primaryDirection(){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_79_get_primaryDirection)
HXDLIN(  79)		return ::feathers::layout::Direction_obj::VERTICAL_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(VerticalListLayout_obj,get_primaryDirection,return )

bool VerticalListLayout_obj::get_requiresLayoutOnScroll(){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_88_get_requiresLayoutOnScroll)
HXDLIN(  88)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VerticalListLayout_obj,get_requiresLayoutOnScroll,return )

 ::Dynamic VerticalListLayout_obj::set_requestedRowCount( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_108_set_requestedRowCount)
HXLINE( 109)		if (::hx::IsEq( this->requestedRowCount,value )) {
HXLINE( 110)			return this->requestedRowCount;
            		}
HXLINE( 112)		this->requestedRowCount = value;
HXLINE( 113)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 114)		return this->requestedRowCount;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VerticalListLayout_obj,set_requestedRowCount,return )

Float VerticalListLayout_obj::set_paddingTop(Float value){
            	HX_GC_STACKFRAME(&_hx_pos_19102b100d84e010_133_set_paddingTop)
HXLINE( 134)		if ((this->paddingTop == value)) {
HXLINE( 135)			return this->paddingTop;
            		}
HXLINE( 137)		this->paddingTop = value;
HXLINE( 138)		this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),null(),null()));
HXLINE( 139)		return this->paddingTop;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VerticalListLayout_obj,set_paddingTop,return )

Float VerticalListLayout_obj::set_paddingRight(Float value){
            	HX_GC_STACKFRAME(&_hx_pos_19102b100d84e010_158_set_paddingRight)
HXLINE( 159)		if ((this->paddingRight == value)) {
HXLINE( 160)			return this->paddingRight;
            		}
HXLINE( 162)		this->paddingRight = value;
HXLINE( 163)		this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),null(),null()));
HXLINE( 164)		return this->paddingRight;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VerticalListLayout_obj,set_paddingRight,return )

Float VerticalListLayout_obj::set_paddingBottom(Float value){
            	HX_GC_STACKFRAME(&_hx_pos_19102b100d84e010_183_set_paddingBottom)
HXLINE( 184)		if ((this->paddingBottom == value)) {
HXLINE( 185)			return this->paddingBottom;
            		}
HXLINE( 187)		this->paddingBottom = value;
HXLINE( 188)		this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),null(),null()));
HXLINE( 189)		return this->paddingBottom;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VerticalListLayout_obj,set_paddingBottom,return )

Float VerticalListLayout_obj::set_paddingLeft(Float value){
            	HX_GC_STACKFRAME(&_hx_pos_19102b100d84e010_208_set_paddingLeft)
HXLINE( 209)		if ((this->paddingLeft == value)) {
HXLINE( 210)			return this->paddingLeft;
            		}
HXLINE( 212)		this->paddingLeft = value;
HXLINE( 213)		this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),null(),null()));
HXLINE( 214)		return this->paddingLeft;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VerticalListLayout_obj,set_paddingLeft,return )

Float VerticalListLayout_obj::set_gap(Float value){
            	HX_GC_STACKFRAME(&_hx_pos_19102b100d84e010_232_set_gap)
HXLINE( 233)		if ((this->gap == value)) {
HXLINE( 234)			return this->gap;
            		}
HXLINE( 236)		this->gap = value;
HXLINE( 237)		this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),null(),null()));
HXLINE( 238)		return this->gap;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VerticalListLayout_obj,set_gap,return )

 ::feathers::layout::LayoutBoundsResult VerticalListLayout_obj::layout(::Array< ::Dynamic> items, ::feathers::layout::Measurements measurements, ::feathers::layout::LayoutBoundsResult result){
            	HX_GC_STACKFRAME(&_hx_pos_19102b100d84e010_244_layout)
HXLINE( 245)		Float viewPortWidth = this->calculateViewPortWidth(items,measurements);
HXLINE( 246)		Float itemWidth = ((viewPortWidth - this->paddingLeft) - this->paddingRight);
HXLINE( 247)		Float virtualRowHeight = this->calculateVirtualRowHeight(items,itemWidth);
HXLINE( 248)		Float positionY = this->paddingTop;
HXLINE( 249)		{
HXLINE( 249)			int _g = 0;
HXDLIN( 249)			int _g1 = items->length;
HXDLIN( 249)			while((_g < _g1)){
HXLINE( 249)				_g = (_g + 1);
HXDLIN( 249)				int i = (_g - 1);
HXLINE( 250)				 ::openfl::display::DisplayObject item = items->__get(i).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 251)				if (::hx::IsNull( item )) {
HXLINE( 252)					Float itemHeight = virtualRowHeight;
HXLINE( 253)					if (::hx::IsNotNull( this->get_virtualCache() )) {
HXLINE( 254)						 ::feathers::layout::_VerticalListLayout::VirtualCacheItem cacheItem = ( ( ::feathers::layout::_VerticalListLayout::VirtualCacheItem)(::Std_obj::downcast(this->get_virtualCache()->__get(i),::hx::ClassOf< ::feathers::layout::_VerticalListLayout::VirtualCacheItem >())) );
HXLINE( 255)						if (::hx::IsNotNull( cacheItem )) {
HXLINE( 256)							itemHeight = cacheItem->itemHeight;
            						}
            					}
HXLINE( 259)					positionY = (positionY + (itemHeight + this->gap));
HXLINE( 260)					continue;
            				}
HXLINE( 262)				if (::Std_obj::isOfType(item,( ( ::Dynamic)(::hx::ClassOf< ::feathers::layout::ILayoutObject >()) ))) {
HXLINE( 263)					if (!(( (bool)( ::hx::interface_check(item,0xf54ca718)->__Field(HX_("includeInLayout",b7,1a,c6,6e),::hx::paccDynamic)) ))) {
HXLINE( 264)						continue;
            					}
            				}
HXLINE( 267)				item->set_x(this->paddingLeft);
HXLINE( 268)				item->set_y(positionY);
HXLINE( 269)				item->set_width(itemWidth);
HXLINE( 270)				if (::Std_obj::isOfType(item,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IValidating >()) ))) {
HXLINE( 271)					::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(item,0x64d4b3cd));
            				}
HXLINE( 273)				Float itemHeight = item->get_height();
HXLINE( 274)				if (::hx::IsNotNull( this->get_virtualCache() )) {
HXLINE( 275)					 ::feathers::layout::_VerticalListLayout::VirtualCacheItem cacheItem = ( ( ::feathers::layout::_VerticalListLayout::VirtualCacheItem)(::Std_obj::downcast(this->get_virtualCache()->__get(i),::hx::ClassOf< ::feathers::layout::_VerticalListLayout::VirtualCacheItem >())) );
HXLINE( 276)					if (::hx::IsNull( cacheItem )) {
HXLINE( 277)						cacheItem =  ::feathers::layout::_VerticalListLayout::VirtualCacheItem_obj::__alloc( HX_CTX ,virtualRowHeight);
HXLINE( 278)						this->get_virtualCache()->set(i,cacheItem);
HXLINE( 279)						::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
            					}
            					else {
HXLINE( 280)						if ((cacheItem->itemHeight != virtualRowHeight)) {
HXLINE( 281)							cacheItem->itemHeight = virtualRowHeight;
HXLINE( 282)							this->get_virtualCache()->set(i,cacheItem);
HXLINE( 283)							::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
            						}
            					}
            				}
HXLINE( 286)				positionY = (positionY + (itemHeight + this->gap));
            			}
            		}
HXLINE( 288)		if ((items->length > 0)) {
HXLINE( 289)			positionY = (positionY - this->gap);
            		}
HXLINE( 291)		positionY = (positionY + this->paddingBottom);
HXLINE( 292)		if (::hx::IsNull( result )) {
HXLINE( 293)			result =  ::feathers::layout::LayoutBoundsResult_obj::__alloc( HX_CTX );
            		}
HXLINE( 295)		result->contentWidth = viewPortWidth;
HXLINE( 296)		result->contentHeight = positionY;
HXLINE( 297)		result->viewPortWidth = viewPortWidth;
HXLINE( 298)		 ::Dynamic viewPortHeight = measurements->height;
HXLINE( 299)		if (::hx::IsNotNull( viewPortHeight )) {
HXLINE( 300)			result->viewPortHeight = ( (Float)(viewPortHeight) );
            		}
            		else {
HXLINE( 301)			if (::hx::IsNotNull( this->requestedRowCount )) {
HXLINE( 302)				result->viewPortHeight = (virtualRowHeight * ( (Float)(this->requestedRowCount) ));
            			}
            			else {
HXLINE( 304)				result->viewPortHeight = positionY;
            			}
            		}
HXLINE( 306)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC3(VerticalListLayout_obj,layout,return )

Float VerticalListLayout_obj::calculateViewPortWidth(::Array< ::Dynamic> items, ::feathers::layout::Measurements measurements){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_309_calculateViewPortWidth)
HXLINE( 310)		if (::hx::IsNotNull( measurements->width )) {
HXLINE( 311)			return ( (Float)(measurements->width) );
            		}
HXLINE( 313)		Float maxWidth = ((Float)0.0);
HXLINE( 314)		{
HXLINE( 314)			int _g = 0;
HXDLIN( 314)			int _g1 = items->length;
HXDLIN( 314)			while((_g < _g1)){
HXLINE( 314)				_g = (_g + 1);
HXDLIN( 314)				int i = (_g - 1);
HXLINE( 315)				 ::openfl::display::DisplayObject item = items->__get(i).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 316)				if (::hx::IsNull( item )) {
HXLINE( 317)					continue;
            				}
HXLINE( 319)				if (::Std_obj::isOfType(item,( ( ::Dynamic)(::hx::ClassOf< ::feathers::layout::ILayoutObject >()) ))) {
HXLINE( 320)					if (!(( (bool)( ::hx::interface_check(item,0xf54ca718)->__Field(HX_("includeInLayout",b7,1a,c6,6e),::hx::paccDynamic)) ))) {
HXLINE( 321)						continue;
            					}
            				}
HXLINE( 324)				if (::Std_obj::isOfType(item,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IValidating >()) ))) {
HXLINE( 325)					::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(item,0x64d4b3cd));
            				}
HXLINE( 327)				Float itemWidth = item->get_width();
HXLINE( 328)				if ((itemWidth > maxWidth)) {
HXLINE( 329)					maxWidth = itemWidth;
            				}
            			}
            		}
HXLINE( 332)		return ((maxWidth + this->paddingLeft) + this->paddingRight);
            	}


HX_DEFINE_DYNAMIC_FUNC2(VerticalListLayout_obj,calculateViewPortWidth,return )

Float VerticalListLayout_obj::calculateVirtualRowHeight(::Array< ::Dynamic> items,Float itemWidth){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_335_calculateVirtualRowHeight)
HXLINE( 336)		{
HXLINE( 336)			int _g = 0;
HXDLIN( 336)			int _g1 = items->length;
HXDLIN( 336)			while((_g < _g1)){
HXLINE( 336)				_g = (_g + 1);
HXDLIN( 336)				int i = (_g - 1);
HXLINE( 337)				 ::openfl::display::DisplayObject item = items->__get(i).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 338)				if (::hx::IsNull( item )) {
HXLINE( 339)					bool _hx_tmp;
HXDLIN( 339)					if (::hx::IsNotNull( this->get_virtualCache() )) {
HXLINE( 339)						_hx_tmp = (this->get_virtualCache()->get_length() <= i);
            					}
            					else {
HXLINE( 339)						_hx_tmp = true;
            					}
HXDLIN( 339)					if (_hx_tmp) {
HXLINE( 340)						continue;
            					}
HXLINE( 342)					 ::feathers::layout::_VerticalListLayout::VirtualCacheItem cacheItem = ( ( ::feathers::layout::_VerticalListLayout::VirtualCacheItem)(::Std_obj::downcast(this->get_virtualCache()->__get(i),::hx::ClassOf< ::feathers::layout::_VerticalListLayout::VirtualCacheItem >())) );
HXLINE( 343)					if (::hx::IsNull( cacheItem )) {
HXLINE( 344)						continue;
            					}
HXLINE( 346)					return cacheItem->itemHeight;
            				}
HXLINE( 348)				item->set_width(itemWidth);
HXLINE( 349)				if (::Std_obj::isOfType(item,( ( ::Dynamic)(::hx::ClassOf< ::feathers::layout::ILayoutObject >()) ))) {
HXLINE( 350)					if (!(( (bool)( ::hx::interface_check(item,0xf54ca718)->__Field(HX_("includeInLayout",b7,1a,c6,6e),::hx::paccDynamic)) ))) {
HXLINE( 351)						continue;
            					}
            				}
HXLINE( 354)				if (::Std_obj::isOfType(item,( ( ::Dynamic)(::hx::ClassOf< ::feathers::core::IValidating >()) ))) {
HXLINE( 355)					::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(item,0x64d4b3cd));
            				}
HXLINE( 357)				return item->get_height();
            			}
            		}
HXLINE( 359)		return ((Float)0.0);
            	}


HX_DEFINE_DYNAMIC_FUNC2(VerticalListLayout_obj,calculateVirtualRowHeight,return )

 ::feathers::layout::VirtualLayoutRange VerticalListLayout_obj::getVisibleIndices(int itemCount,Float width,Float height, ::feathers::layout::VirtualLayoutRange result){
            	HX_GC_STACKFRAME(&_hx_pos_19102b100d84e010_365_getVisibleIndices)
HXLINE( 366)		int startIndex = -1;
HXLINE( 367)		int endIndex = -1;
HXLINE( 368)		 ::Dynamic estimatedItemHeight = null();
HXLINE( 369)		Float positionY = this->paddingTop;
HXLINE( 370)		Float scrollY = this->scrollY;
HXLINE( 371)		if ((scrollY < ((Float)0.0))) {
HXLINE( 372)			scrollY = ((Float)0.0);
            		}
HXLINE( 374)		int minItems = 0;
HXLINE( 375)		Float maxY = (scrollY + height);
HXLINE( 376)		{
HXLINE( 376)			int _g = 0;
HXDLIN( 376)			int _g1 = itemCount;
HXDLIN( 376)			while((_g < _g1)){
HXLINE( 376)				_g = (_g + 1);
HXDLIN( 376)				int i = (_g - 1);
HXLINE( 377)				Float itemHeight = ((Float)0.0);
HXLINE( 378)				if (::hx::IsNotNull( this->get_virtualCache() )) {
HXLINE( 379)					 ::feathers::layout::_VerticalListLayout::VirtualCacheItem cacheItem = ( ( ::feathers::layout::_VerticalListLayout::VirtualCacheItem)(::Std_obj::downcast(this->get_virtualCache()->__get(i),::hx::ClassOf< ::feathers::layout::_VerticalListLayout::VirtualCacheItem >())) );
HXLINE( 380)					if (::hx::IsNotNull( cacheItem )) {
HXLINE( 381)						itemHeight = cacheItem->itemHeight;
HXLINE( 382)						if (::hx::IsNull( estimatedItemHeight )) {
HXLINE( 383)							estimatedItemHeight = itemHeight;
HXLINE( 384)							minItems = (::Math_obj::ceil((height / (estimatedItemHeight + this->gap))) + 1);
            						}
            					}
            					else {
HXLINE( 386)						if (::hx::IsNotNull( estimatedItemHeight )) {
HXLINE( 387)							itemHeight = ( (Float)(estimatedItemHeight) );
            						}
            					}
            				}
HXLINE( 390)				positionY = (positionY + (itemHeight + this->gap));
HXLINE( 391)				bool _hx_tmp;
HXDLIN( 391)				if ((startIndex == -1)) {
HXLINE( 391)					_hx_tmp = (positionY >= scrollY);
            				}
            				else {
HXLINE( 391)					_hx_tmp = false;
            				}
HXDLIN( 391)				if (_hx_tmp) {
HXLINE( 392)					startIndex = i;
            				}
HXLINE( 394)				if ((startIndex != -1)) {
HXLINE( 395)					endIndex = i;
HXLINE( 396)					bool _hx_tmp;
HXDLIN( 396)					if ((positionY >= maxY)) {
HXLINE( 396)						_hx_tmp = (((endIndex - startIndex) + 1) >= minItems);
            					}
            					else {
HXLINE( 396)						_hx_tmp = false;
            					}
HXDLIN( 396)					if (_hx_tmp) {
HXLINE( 397)						goto _hx_goto_19;
            					}
            				}
            			}
            			_hx_goto_19:;
            		}
HXLINE( 403)		bool _hx_tmp;
HXDLIN( 403)		bool _hx_tmp1;
HXDLIN( 403)		if (!((positionY < maxY))) {
HXLINE( 403)			_hx_tmp1 = (((endIndex - startIndex) + 1) < minItems);
            		}
            		else {
HXLINE( 403)			_hx_tmp1 = true;
            		}
HXDLIN( 403)		if (_hx_tmp1) {
HXLINE( 403)			_hx_tmp = (startIndex > 0);
            		}
            		else {
HXLINE( 403)			_hx_tmp = false;
            		}
HXDLIN( 403)		if (_hx_tmp) {
HXLINE( 404)			while(true){
HXLINE( 405)				startIndex = (startIndex - 1);
HXLINE( 406)				Float itemHeight = ((Float)0.0);
HXLINE( 407)				if (::hx::IsNotNull( this->get_virtualCache() )) {
HXLINE( 408)					 ::feathers::layout::_VerticalListLayout::VirtualCacheItem cacheItem = ( ( ::feathers::layout::_VerticalListLayout::VirtualCacheItem)(::Std_obj::downcast(this->get_virtualCache()->__get(startIndex),::hx::ClassOf< ::feathers::layout::_VerticalListLayout::VirtualCacheItem >())) );
HXLINE( 409)					if (::hx::IsNotNull( cacheItem )) {
HXLINE( 410)						itemHeight = cacheItem->itemHeight;
HXLINE( 411)						if (::hx::IsNull( estimatedItemHeight )) {
HXLINE( 412)							estimatedItemHeight = itemHeight;
HXLINE( 413)							minItems = (::Math_obj::ceil((height / (estimatedItemHeight + this->gap))) + 1);
            						}
            					}
            					else {
HXLINE( 415)						if (::hx::IsNotNull( estimatedItemHeight )) {
HXLINE( 416)							itemHeight = ( (Float)(estimatedItemHeight) );
            						}
            					}
            				}
HXLINE( 419)				positionY = (positionY + (itemHeight + this->gap));
HXLINE( 420)				bool _hx_tmp;
HXDLIN( 420)				if ((positionY >= maxY)) {
HXLINE( 420)					_hx_tmp = (((endIndex - startIndex) + 1) >= minItems);
            				}
            				else {
HXLINE( 420)					_hx_tmp = false;
            				}
HXDLIN( 420)				if (_hx_tmp) {
HXLINE( 421)					goto _hx_goto_20;
            				}
HXLINE( 404)				if (!((startIndex > 0))) {
HXLINE( 404)					goto _hx_goto_20;
            				}
            			}
            			_hx_goto_20:;
            		}
HXLINE( 425)		if ((startIndex < 0)) {
HXLINE( 426)			startIndex = 0;
            		}
HXLINE( 428)		if ((endIndex < 0)) {
HXLINE( 429)			endIndex = startIndex;
            		}
HXLINE( 431)		if (::hx::IsNull( result )) {
HXLINE( 432)			return  ::feathers::layout::VirtualLayoutRange_obj::__alloc( HX_CTX ,startIndex,endIndex);
            		}
HXLINE( 434)		result->start = startIndex;
HXLINE( 435)		result->end = endIndex;
HXLINE( 436)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC4(VerticalListLayout_obj,getVisibleIndices,return )


::hx::ObjectPtr< VerticalListLayout_obj > VerticalListLayout_obj::__new() {
	::hx::ObjectPtr< VerticalListLayout_obj > __this = new VerticalListLayout_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< VerticalListLayout_obj > VerticalListLayout_obj::__alloc(::hx::Ctx *_hx_ctx) {
	VerticalListLayout_obj *__this = (VerticalListLayout_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(VerticalListLayout_obj), true, "feathers.layout.VerticalListLayout"));
	*(void **)__this = VerticalListLayout_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

VerticalListLayout_obj::VerticalListLayout_obj()
{
}

void VerticalListLayout_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(VerticalListLayout);
	HX_MARK_MEMBER_NAME(scrollX,"scrollX");
	HX_MARK_MEMBER_NAME(scrollY,"scrollY");
	HX_MARK_MEMBER_NAME(virtualCache,"virtualCache");
	HX_MARK_MEMBER_NAME(requestedRowCount,"requestedRowCount");
	HX_MARK_MEMBER_NAME(paddingTop,"paddingTop");
	HX_MARK_MEMBER_NAME(paddingRight,"paddingRight");
	HX_MARK_MEMBER_NAME(paddingBottom,"paddingBottom");
	HX_MARK_MEMBER_NAME(paddingLeft,"paddingLeft");
	HX_MARK_MEMBER_NAME(gap,"gap");
	 ::openfl::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void VerticalListLayout_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(scrollX,"scrollX");
	HX_VISIT_MEMBER_NAME(scrollY,"scrollY");
	HX_VISIT_MEMBER_NAME(virtualCache,"virtualCache");
	HX_VISIT_MEMBER_NAME(requestedRowCount,"requestedRowCount");
	HX_VISIT_MEMBER_NAME(paddingTop,"paddingTop");
	HX_VISIT_MEMBER_NAME(paddingRight,"paddingRight");
	HX_VISIT_MEMBER_NAME(paddingBottom,"paddingBottom");
	HX_VISIT_MEMBER_NAME(paddingLeft,"paddingLeft");
	HX_VISIT_MEMBER_NAME(gap,"gap");
	 ::openfl::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val VerticalListLayout_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"gap") ) { return ::hx::Val( gap ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"layout") ) { return ::hx::Val( layout_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollX") ) { return ::hx::Val( scrollX ); }
		if (HX_FIELD_EQ(inName,"scrollY") ) { return ::hx::Val( scrollY ); }
		if (HX_FIELD_EQ(inName,"set_gap") ) { return ::hx::Val( set_gap_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"paddingTop") ) { return ::hx::Val( paddingTop ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"set_scrollX") ) { return ::hx::Val( set_scrollX_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollY") ) { return ::hx::Val( set_scrollY_dyn() ); }
		if (HX_FIELD_EQ(inName,"paddingLeft") ) { return ::hx::Val( paddingLeft ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"virtualCache") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_virtualCache() : virtualCache ); }
		if (HX_FIELD_EQ(inName,"paddingRight") ) { return ::hx::Val( paddingRight ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"paddingBottom") ) { return ::hx::Val( paddingBottom ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"set_paddingTop") ) { return ::hx::Val( set_paddingTop_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"set_paddingLeft") ) { return ::hx::Val( set_paddingLeft_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_virtualCache") ) { return ::hx::Val( get_virtualCache_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_virtualCache") ) { return ::hx::Val( set_virtualCache_dyn() ); }
		if (HX_FIELD_EQ(inName,"primaryDirection") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_primaryDirection() ); }
		if (HX_FIELD_EQ(inName,"set_paddingRight") ) { return ::hx::Val( set_paddingRight_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"requestedRowCount") ) { return ::hx::Val( requestedRowCount ); }
		if (HX_FIELD_EQ(inName,"set_paddingBottom") ) { return ::hx::Val( set_paddingBottom_dyn() ); }
		if (HX_FIELD_EQ(inName,"getVisibleIndices") ) { return ::hx::Val( getVisibleIndices_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"get_primaryDirection") ) { return ::hx::Val( get_primaryDirection_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"set_requestedRowCount") ) { return ::hx::Val( set_requestedRowCount_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"requiresLayoutOnScroll") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_requiresLayoutOnScroll() ); }
		if (HX_FIELD_EQ(inName,"calculateViewPortWidth") ) { return ::hx::Val( calculateViewPortWidth_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"calculateVirtualRowHeight") ) { return ::hx::Val( calculateVirtualRowHeight_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"get_requiresLayoutOnScroll") ) { return ::hx::Val( get_requiresLayoutOnScroll_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val VerticalListLayout_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"gap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_gap(inValue.Cast< Float >()) );gap=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollX") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scrollX(inValue.Cast< Float >()) );scrollX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollY") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scrollY(inValue.Cast< Float >()) );scrollY=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"paddingTop") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingTop(inValue.Cast< Float >()) );paddingTop=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"paddingLeft") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingLeft(inValue.Cast< Float >()) );paddingLeft=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"virtualCache") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_virtualCache(inValue.Cast< ::cpp::VirtualArray >()) );virtualCache=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paddingRight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingRight(inValue.Cast< Float >()) );paddingRight=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"paddingBottom") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingBottom(inValue.Cast< Float >()) );paddingBottom=inValue.Cast< Float >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"requestedRowCount") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_requestedRowCount(inValue.Cast<  ::Dynamic >()) );requestedRowCount=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void VerticalListLayout_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("scrollX",ab,33,d8,30));
	outFields->push(HX_("scrollY",ac,33,d8,30));
	outFields->push(HX_("virtualCache",37,a4,80,48));
	outFields->push(HX_("primaryDirection",1d,fa,05,eb));
	outFields->push(HX_("requiresLayoutOnScroll",64,7d,fc,88));
	outFields->push(HX_("requestedRowCount",e3,b7,42,25));
	outFields->push(HX_("paddingTop",44,fd,05,3a));
	outFields->push(HX_("paddingRight",4b,ec,a7,1a));
	outFields->push(HX_("paddingBottom",9c,67,99,4f));
	outFields->push(HX_("paddingLeft",78,4a,e6,85));
	outFields->push(HX_("gap",16,7d,4e,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo VerticalListLayout_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(VerticalListLayout_obj,scrollX),HX_("scrollX",ab,33,d8,30)},
	{::hx::fsFloat,(int)offsetof(VerticalListLayout_obj,scrollY),HX_("scrollY",ac,33,d8,30)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(VerticalListLayout_obj,virtualCache),HX_("virtualCache",37,a4,80,48)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(VerticalListLayout_obj,requestedRowCount),HX_("requestedRowCount",e3,b7,42,25)},
	{::hx::fsFloat,(int)offsetof(VerticalListLayout_obj,paddingTop),HX_("paddingTop",44,fd,05,3a)},
	{::hx::fsFloat,(int)offsetof(VerticalListLayout_obj,paddingRight),HX_("paddingRight",4b,ec,a7,1a)},
	{::hx::fsFloat,(int)offsetof(VerticalListLayout_obj,paddingBottom),HX_("paddingBottom",9c,67,99,4f)},
	{::hx::fsFloat,(int)offsetof(VerticalListLayout_obj,paddingLeft),HX_("paddingLeft",78,4a,e6,85)},
	{::hx::fsFloat,(int)offsetof(VerticalListLayout_obj,gap),HX_("gap",16,7d,4e,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *VerticalListLayout_obj_sStaticStorageInfo = 0;
#endif

static ::String VerticalListLayout_obj_sMemberFields[] = {
	HX_("scrollX",ab,33,d8,30),
	HX_("set_scrollX",ce,9a,3f,c1),
	HX_("scrollY",ac,33,d8,30),
	HX_("set_scrollY",cf,9a,3f,c1),
	HX_("virtualCache",37,a4,80,48),
	HX_("get_virtualCache",c0,90,1f,4d),
	HX_("set_virtualCache",34,7e,61,a3),
	HX_("get_primaryDirection",26,5f,70,09),
	HX_("get_requiresLayoutOnScroll",2d,cf,01,c1),
	HX_("requestedRowCount",e3,b7,42,25),
	HX_("set_requestedRowCount",c6,88,f9,f7),
	HX_("paddingTop",44,fd,05,3a),
	HX_("set_paddingTop",01,6e,1b,d0),
	HX_("paddingRight",4b,ec,a7,1a),
	HX_("set_paddingRight",48,c6,88,75),
	HX_("paddingBottom",9c,67,99,4f),
	HX_("set_paddingBottom",ff,4a,77,79),
	HX_("paddingLeft",78,4a,e6,85),
	HX_("set_paddingLeft",1b,7f,93,42),
	HX_("gap",16,7d,4e,00),
	HX_("set_gap",b9,d6,c4,19),
	HX_("layout",aa,ae,b8,58),
	HX_("calculateViewPortWidth",5a,da,4c,6f),
	HX_("calculateVirtualRowHeight",9c,b3,50,4b),
	HX_("getVisibleIndices",0b,78,6a,0a),
	::String(null()) };

::hx::Class VerticalListLayout_obj::__mClass;

void VerticalListLayout_obj::__register()
{
	VerticalListLayout_obj _hx_dummy;
	VerticalListLayout_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("feathers.layout.VerticalListLayout",24,c4,25,5f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(VerticalListLayout_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< VerticalListLayout_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VerticalListLayout_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VerticalListLayout_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace feathers
} // end namespace layout
