// Generated by Haxe 4.1.0
#include <hxcpp.h>

#ifndef INCLUDED_feathers_layout_VirtualLayoutRange
#include <feathers/layout/VirtualLayoutRange.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3f9bfd6f237c2b6c_56_new,"feathers.layout.VirtualLayoutRange","new",0x00df48c0,"feathers.layout.VirtualLayoutRange.new","feathers/layout/IVirtualLayout.hx",56,0x603b7f8c)
namespace feathers{
namespace layout{

void VirtualLayoutRange_obj::__construct(int start,int end){
            	HX_STACKFRAME(&_hx_pos_3f9bfd6f237c2b6c_56_new)
HXLINE(  57)		this->start = start;
HXLINE(  58)		this->end = end;
            	}

Dynamic VirtualLayoutRange_obj::__CreateEmpty() { return new VirtualLayoutRange_obj; }

void *VirtualLayoutRange_obj::_hx_vtable = 0;

Dynamic VirtualLayoutRange_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< VirtualLayoutRange_obj > _hx_result = new VirtualLayoutRange_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool VirtualLayoutRange_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4146c762;
}


VirtualLayoutRange_obj::VirtualLayoutRange_obj()
{
}

::hx::Val VirtualLayoutRange_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { return ::hx::Val( end ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { return ::hx::Val( start ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val VirtualLayoutRange_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { end=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { start=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void VirtualLayoutRange_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("start",62,74,0b,84));
	outFields->push(HX_("end",db,03,4d,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo VirtualLayoutRange_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(VirtualLayoutRange_obj,start),HX_("start",62,74,0b,84)},
	{::hx::fsInt,(int)offsetof(VirtualLayoutRange_obj,end),HX_("end",db,03,4d,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *VirtualLayoutRange_obj_sStaticStorageInfo = 0;
#endif

static ::String VirtualLayoutRange_obj_sMemberFields[] = {
	HX_("start",62,74,0b,84),
	HX_("end",db,03,4d,00),
	::String(null()) };

::hx::Class VirtualLayoutRange_obj::__mClass;

void VirtualLayoutRange_obj::__register()
{
	VirtualLayoutRange_obj _hx_dummy;
	VirtualLayoutRange_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("feathers.layout.VirtualLayoutRange",ce,28,64,3c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(VirtualLayoutRange_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< VirtualLayoutRange_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VirtualLayoutRange_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VirtualLayoutRange_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace feathers
} // end namespace layout
