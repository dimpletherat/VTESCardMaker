// Generated by Haxe 4.1.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_feathers_controls_ListView
#include <feathers/controls/ListView.h>
#endif
#ifndef INCLUDED_feathers_controls_supportClasses_BaseScrollContainer
#include <feathers/controls/supportClasses/BaseScrollContainer.h>
#endif
#ifndef INCLUDED_feathers_core_FeathersControl
#include <feathers/core/FeathersControl.h>
#endif
#ifndef INCLUDED_feathers_core_IDataSelector
#include <feathers/core/IDataSelector.h>
#endif
#ifndef INCLUDED_feathers_core_IDisplayObject
#include <feathers/core/IDisplayObject.h>
#endif
#ifndef INCLUDED_feathers_core_IFocusObject
#include <feathers/core/IFocusObject.h>
#endif
#ifndef INCLUDED_feathers_core_IIndexSelector
#include <feathers/core/IIndexSelector.h>
#endif
#ifndef INCLUDED_feathers_core_IMeasureObject
#include <feathers/core/IMeasureObject.h>
#endif
#ifndef INCLUDED_feathers_core_IStateObserver
#include <feathers/core/IStateObserver.h>
#endif
#ifndef INCLUDED_feathers_core_IUIControl
#include <feathers/core/IUIControl.h>
#endif
#ifndef INCLUDED_feathers_core_IValidating
#include <feathers/core/IValidating.h>
#endif
#ifndef INCLUDED_feathers_core_MeasureSprite
#include <feathers/core/MeasureSprite.h>
#endif
#ifndef INCLUDED_feathers_core_ValidatingSprite
#include <feathers/core/ValidatingSprite.h>
#endif
#ifndef INCLUDED_feathers_graphics_FillStyle
#include <feathers/graphics/FillStyle.h>
#endif
#ifndef INCLUDED_feathers_graphics_LineStyle
#include <feathers/graphics/LineStyle.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayout
#include <feathers/layout/ILayout.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayoutObject
#include <feathers/layout/ILayoutObject.h>
#endif
#ifndef INCLUDED_feathers_layout_IScrollLayout
#include <feathers/layout/IScrollLayout.h>
#endif
#ifndef INCLUDED_feathers_layout_IVirtualLayout
#include <feathers/layout/IVirtualLayout.h>
#endif
#ifndef INCLUDED_feathers_layout_VerticalListLayout
#include <feathers/layout/VerticalListLayout.h>
#endif
#ifndef INCLUDED_feathers_skins_BaseGraphicsPathSkin
#include <feathers/skins/BaseGraphicsPathSkin.h>
#endif
#ifndef INCLUDED_feathers_skins_RectangleSkin
#include <feathers/skins/RectangleSkin.h>
#endif
#ifndef INCLUDED_feathers_style_ClassVariantStyleProvider
#include <feathers/style/ClassVariantStyleProvider.h>
#endif
#ifndef INCLUDED_feathers_style_IDarkModeTheme
#include <feathers/style/IDarkModeTheme.h>
#endif
#ifndef INCLUDED_feathers_style_IStyleObject
#include <feathers/style/IStyleObject.h>
#endif
#ifndef INCLUDED_feathers_style_IStyleProvider
#include <feathers/style/IStyleProvider.h>
#endif
#ifndef INCLUDED_feathers_style_ITheme
#include <feathers/style/ITheme.h>
#endif
#ifndef INCLUDED_feathers_style_IVariantStyleObject
#include <feathers/style/IVariantStyleObject.h>
#endif
#ifndef INCLUDED_feathers_style_Theme
#include <feathers/style/Theme.h>
#endif
#ifndef INCLUDED_feathers_themes_ClassVariantTheme
#include <feathers/themes/ClassVariantTheme.h>
#endif
#ifndef INCLUDED_feathers_themes_steel_BaseSteelTheme
#include <feathers/themes/steel/BaseSteelTheme.h>
#endif
#ifndef INCLUDED_feathers_themes_steel_components_SteelListViewStyles
#include <feathers/themes/steel/components/SteelListViewStyles.h>
#endif
#ifndef INCLUDED_feathers_utils_DeviceUtil
#include <feathers/utils/DeviceUtil.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_44e4028d1cd683fc_34_initialize,"feathers.themes.steel.components.SteelListViewStyles","initialize",0x0061db1d,"feathers.themes.steel.components.SteelListViewStyles.initialize","feathers/themes/steel/components/SteelListViewStyles.hx",34,0xa91a275d)
HX_LOCAL_STACK_FRAME(_hx_pos_44e4028d1cd683fc_66_initialize,"feathers.themes.steel.components.SteelListViewStyles","initialize",0x0061db1d,"feathers.themes.steel.components.SteelListViewStyles.initialize","feathers/themes/steel/components/SteelListViewStyles.hx",66,0xa91a275d)
HX_LOCAL_STACK_FRAME(_hx_pos_44e4028d1cd683fc_26_initialize,"feathers.themes.steel.components.SteelListViewStyles","initialize",0x0061db1d,"feathers.themes.steel.components.SteelListViewStyles.initialize","feathers/themes/steel/components/SteelListViewStyles.hx",26,0xa91a275d)
HX_LOCAL_STACK_FRAME(_hx_pos_44e4028d1cd683fc_94_initialize,"feathers.themes.steel.components.SteelListViewStyles","initialize",0x0061db1d,"feathers.themes.steel.components.SteelListViewStyles.initialize","feathers/themes/steel/components/SteelListViewStyles.hx",94,0xa91a275d)
namespace feathers{
namespace themes{
namespace steel{
namespace components{

void SteelListViewStyles_obj::__construct() { }

Dynamic SteelListViewStyles_obj::__CreateEmpty() { return new SteelListViewStyles_obj; }

void *SteelListViewStyles_obj::_hx_vtable = 0;

Dynamic SteelListViewStyles_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SteelListViewStyles_obj > _hx_result = new SteelListViewStyles_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SteelListViewStyles_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5df64269;
}

void SteelListViewStyles_obj::initialize( ::feathers::themes::steel::BaseSteelTheme theme){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::feathers::themes::steel::BaseSteelTheme,theme) HXARGC(1)
            		void _hx_run( ::feathers::controls::ListView listView){
            			HX_GC_STACKFRAME(&_hx_pos_44e4028d1cd683fc_34_initialize)
HXLINE(  35)			bool isDesktop = ::feathers::utils::DeviceUtil_obj::isDesktop();
HXLINE(  37)			listView->set_autoHideScrollBars(!(isDesktop));
HXLINE(  38)			listView->set_fixedScrollBars(isDesktop);
HXLINE(  40)			if (::hx::IsNull( listView->layout )) {
HXLINE(  41)				listView->set_layout( ::feathers::layout::VerticalListLayout_obj::__alloc( HX_CTX ));
            			}
HXLINE(  44)			if (::hx::IsNull( listView->backgroundSkin )) {
HXLINE(  45)				 ::feathers::skins::RectangleSkin backgroundSkin =  ::feathers::skins::RectangleSkin_obj::__alloc( HX_CTX );
HXLINE(  46)				backgroundSkin->set_fill(theme->getContainerFill());
HXLINE(  47)				backgroundSkin->set_border(theme->getContainerBorder(null()));
HXLINE(  48)				backgroundSkin->set_width(((Float)160.0));
HXLINE(  49)				backgroundSkin->set_height(((Float)160.0));
HXLINE(  50)				listView->set_backgroundSkin(backgroundSkin);
            			}
HXLINE(  53)			if (::hx::IsNull( listView->get_focusRectSkin() )) {
HXLINE(  54)				 ::feathers::skins::RectangleSkin skin =  ::feathers::skins::RectangleSkin_obj::__alloc( HX_CTX );
HXLINE(  55)				skin->set_fill(null());
HXLINE(  56)				skin->set_border(theme->getActiveFillBorder(null()));
HXLINE(  57)				listView->set_focusRectSkin(skin);
            			}
HXLINE(  60)			listView->set_paddingTop(((Float)1.0));
HXLINE(  61)			listView->set_paddingRight(((Float)1.0));
HXLINE(  62)			listView->set_paddingBottom(((Float)1.0));
HXLINE(  63)			listView->set_paddingLeft(((Float)1.0));
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::feathers::themes::steel::BaseSteelTheme,theme) HXARGC(1)
            		void _hx_run( ::feathers::controls::ListView listView){
            			HX_GC_STACKFRAME(&_hx_pos_44e4028d1cd683fc_66_initialize)
HXLINE(  67)			bool isDesktop = ::feathers::utils::DeviceUtil_obj::isDesktop();
HXLINE(  69)			listView->set_autoHideScrollBars(!(isDesktop));
HXLINE(  70)			listView->set_fixedScrollBars(isDesktop);
HXLINE(  72)			if (::hx::IsNull( listView->layout )) {
HXLINE(  73)				listView->set_layout( ::feathers::layout::VerticalListLayout_obj::__alloc( HX_CTX ));
            			}
HXLINE(  76)			if (::hx::IsNull( listView->backgroundSkin )) {
HXLINE(  77)				 ::feathers::skins::RectangleSkin backgroundSkin =  ::feathers::skins::RectangleSkin_obj::__alloc( HX_CTX );
HXLINE(  78)				backgroundSkin->set_fill(theme->getContainerFill());
HXLINE(  79)				backgroundSkin->set_width(((Float)160.0));
HXLINE(  80)				backgroundSkin->set_height(((Float)160.0));
HXLINE(  81)				listView->set_backgroundSkin(backgroundSkin);
            			}
HXLINE(  84)			if (::hx::IsNull( listView->get_focusRectSkin() )) {
HXLINE(  85)				 ::feathers::skins::RectangleSkin skin =  ::feathers::skins::RectangleSkin_obj::__alloc( HX_CTX );
HXLINE(  86)				skin->set_fill(null());
HXLINE(  87)				skin->set_border(theme->getActiveFillBorder(null()));
HXLINE(  88)				listView->set_focusRectSkin(skin);
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_44e4028d1cd683fc_26_initialize)
HXLINE(  27)		if (::hx::IsNull( theme )) {
HXLINE(  28)			theme = ( ( ::feathers::themes::steel::BaseSteelTheme)(::Std_obj::downcast(::feathers::style::Theme_obj::get_fallbackTheme(),::hx::ClassOf< ::feathers::themes::steel::BaseSteelTheme >())) );
            		}
HXLINE(  30)		if (::hx::IsNull( theme )) {
HXLINE(  31)			return;
            		}
HXLINE(  34)		 ::Dynamic styleListViewWithWithBorderVariant =  ::Dynamic(new _hx_Closure_0(theme));
HXLINE(  66)		 ::Dynamic styleListViewWithWithBorderlessVariant =  ::Dynamic(new _hx_Closure_1(theme));
HXLINE(  92)		 ::feathers::style::ClassVariantStyleProvider styleProvider = theme->styleProvider;
HXLINE(  93)		if (::hx::IsNull( styleProvider->getStyleFunction(::hx::ClassOf< ::feathers::controls::ListView >(),null()) )) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_2, ::Dynamic,styleListViewWithWithBorderlessVariant, ::Dynamic,styleListViewWithWithBorderVariant) HXARGC(1)
            			void _hx_run( ::feathers::controls::ListView listView){
            				HX_STACKFRAME(&_hx_pos_44e4028d1cd683fc_94_initialize)
HXLINE(  95)				bool isDesktop = ::feathers::utils::DeviceUtil_obj::isDesktop();
HXLINE(  96)				if (isDesktop) {
HXLINE(  97)					styleListViewWithWithBorderVariant(listView);
            				}
            				else {
HXLINE(  99)					styleListViewWithWithBorderlessVariant(listView);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  94)			styleProvider->setStyleFunction(::hx::ClassOf< ::feathers::controls::ListView >(),null(), ::Dynamic(new _hx_Closure_2(styleListViewWithWithBorderlessVariant,styleListViewWithWithBorderVariant)));
            		}
HXLINE( 103)		if (::hx::IsNull( styleProvider->getStyleFunction(::hx::ClassOf< ::feathers::controls::ListView >(),::feathers::controls::ListView_obj::VARIANT_BORDER) )) {
HXLINE( 104)			styleProvider->setStyleFunction(::hx::ClassOf< ::feathers::controls::ListView >(),::feathers::controls::ListView_obj::VARIANT_BORDER,styleListViewWithWithBorderVariant);
            		}
HXLINE( 106)		if (::hx::IsNull( styleProvider->getStyleFunction(::hx::ClassOf< ::feathers::controls::ListView >(),::feathers::controls::ListView_obj::VARIANT_BORDERLESS) )) {
HXLINE( 107)			styleProvider->setStyleFunction(::hx::ClassOf< ::feathers::controls::ListView >(),::feathers::controls::ListView_obj::VARIANT_BORDERLESS,styleListViewWithWithBorderlessVariant);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SteelListViewStyles_obj,initialize,(void))


SteelListViewStyles_obj::SteelListViewStyles_obj()
{
}

bool SteelListViewStyles_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"initialize") ) { outValue = initialize_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *SteelListViewStyles_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *SteelListViewStyles_obj_sStaticStorageInfo = 0;
#endif

::hx::Class SteelListViewStyles_obj::__mClass;

static ::String SteelListViewStyles_obj_sStaticFields[] = {
	HX_("initialize",50,31,bb,ec),
	::String(null())
};

void SteelListViewStyles_obj::__register()
{
	SteelListViewStyles_obj _hx_dummy;
	SteelListViewStyles_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("feathers.themes.steel.components.SteelListViewStyles",81,79,f7,95);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SteelListViewStyles_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(SteelListViewStyles_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< SteelListViewStyles_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SteelListViewStyles_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SteelListViewStyles_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace feathers
} // end namespace themes
} // end namespace steel
} // end namespace components
