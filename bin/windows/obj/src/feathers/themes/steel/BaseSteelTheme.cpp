// Generated by Haxe 4.1.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_feathers_events_StyleProviderEvent
#include <feathers/events/StyleProviderEvent.h>
#endif
#ifndef INCLUDED_feathers_graphics_FillStyle
#include <feathers/graphics/FillStyle.h>
#endif
#ifndef INCLUDED_feathers_graphics_LineStyle
#include <feathers/graphics/LineStyle.h>
#endif
#ifndef INCLUDED_feathers_style_ClassVariantStyleProvider
#include <feathers/style/ClassVariantStyleProvider.h>
#endif
#ifndef INCLUDED_feathers_style_IDarkModeTheme
#include <feathers/style/IDarkModeTheme.h>
#endif
#ifndef INCLUDED_feathers_style_IStyleObject
#include <feathers/style/IStyleObject.h>
#endif
#ifndef INCLUDED_feathers_style_IStyleProvider
#include <feathers/style/IStyleProvider.h>
#endif
#ifndef INCLUDED_feathers_style_ITheme
#include <feathers/style/ITheme.h>
#endif
#ifndef INCLUDED_feathers_themes_ClassVariantTheme
#include <feathers/themes/ClassVariantTheme.h>
#endif
#ifndef INCLUDED_feathers_themes_steel_BaseSteelTheme
#include <feathers/themes/steel/BaseSteelTheme.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e704295178143e52_35_new,"feathers.themes.steel.BaseSteelTheme","new",0x5e372baa,"feathers.themes.steel.BaseSteelTheme.new","feathers/themes/steel/BaseSteelTheme.hx",35,0x077137c5)
HX_LOCAL_STACK_FRAME(_hx_pos_e704295178143e52_65_get_darkMode,"feathers.themes.steel.BaseSteelTheme","get_darkMode",0x8e196678,"feathers.themes.steel.BaseSteelTheme.get_darkMode","feathers/themes/steel/BaseSteelTheme.hx",65,0x077137c5)
HX_LOCAL_STACK_FRAME(_hx_pos_e704295178143e52_68_set_darkMode,"feathers.themes.steel.BaseSteelTheme","set_darkMode",0xa31289ec,"feathers.themes.steel.BaseSteelTheme.set_darkMode","feathers/themes/steel/BaseSteelTheme.hx",68,0x077137c5)
HX_LOCAL_STACK_FRAME(_hx_pos_e704295178143e52_115_refreshColors,"feathers.themes.steel.BaseSteelTheme","refreshColors",0xcccf85b5,"feathers.themes.steel.BaseSteelTheme.refreshColors","feathers/themes/steel/BaseSteelTheme.hx",115,0x077137c5)
HX_LOCAL_STACK_FRAME(_hx_pos_e704295178143e52_167_refreshFonts,"feathers.themes.steel.BaseSteelTheme","refreshFonts",0x73f39f5f,"feathers.themes.steel.BaseSteelTheme.refreshFonts","feathers/themes/steel/BaseSteelTheme.hx",167,0x077137c5)
HX_LOCAL_STACK_FRAME(_hx_pos_e704295178143e52_172_refreshFontSizes,"feathers.themes.steel.BaseSteelTheme","refreshFontSizes",0x2bb1fd5e,"feathers.themes.steel.BaseSteelTheme.refreshFontSizes","feathers/themes/steel/BaseSteelTheme.hx",172,0x077137c5)
HX_LOCAL_STACK_FRAME(_hx_pos_e704295178143e52_179_getThemeFill,"feathers.themes.steel.BaseSteelTheme","getThemeFill",0x9004392c,"feathers.themes.steel.BaseSteelTheme.getThemeFill","feathers/themes/steel/BaseSteelTheme.hx",179,0x077137c5)
HX_LOCAL_STACK_FRAME(_hx_pos_e704295178143e52_183_getControlFill,"feathers.themes.steel.BaseSteelTheme","getControlFill",0x94d46080,"feathers.themes.steel.BaseSteelTheme.getControlFill","feathers/themes/steel/BaseSteelTheme.hx",183,0x077137c5)
HX_LOCAL_STACK_FRAME(_hx_pos_e704295178143e52_187_getControlDisabledFill,"feathers.themes.steel.BaseSteelTheme","getControlDisabledFill",0xcc24011c,"feathers.themes.steel.BaseSteelTheme.getControlDisabledFill","feathers/themes/steel/BaseSteelTheme.hx",187,0x077137c5)
HX_LOCAL_STACK_FRAME(_hx_pos_e704295178143e52_191_getButtonFill,"feathers.themes.steel.BaseSteelTheme","getButtonFill",0x1232b595,"feathers.themes.steel.BaseSteelTheme.getButtonFill","feathers/themes/steel/BaseSteelTheme.hx",191,0x077137c5)
static const Float _hx_array_data_4dc1ceb8_10[] = {
	1.0,1.0,
};
static const int _hx_array_data_4dc1ceb8_11[] = {
	(int)0,(int)255,
};
HX_LOCAL_STACK_FRAME(_hx_pos_e704295178143e52_195_getButtonDownFill,"feathers.themes.steel.BaseSteelTheme","getButtonDownFill",0xa750a417,"feathers.themes.steel.BaseSteelTheme.getButtonDownFill","feathers/themes/steel/BaseSteelTheme.hx",195,0x077137c5)
static const Float _hx_array_data_4dc1ceb8_13[] = {
	1.0,1.0,
};
static const int _hx_array_data_4dc1ceb8_14[] = {
	(int)0,(int)255,
};
HX_LOCAL_STACK_FRAME(_hx_pos_e704295178143e52_199_getButtonDisabledFill,"feathers.themes.steel.BaseSteelTheme","getButtonDisabledFill",0x4d2cf331,"feathers.themes.steel.BaseSteelTheme.getButtonDisabledFill","feathers/themes/steel/BaseSteelTheme.hx",199,0x077137c5)
HX_LOCAL_STACK_FRAME(_hx_pos_e704295178143e52_203_getBorder,"feathers.themes.steel.BaseSteelTheme","getBorder",0x70fec4ec,"feathers.themes.steel.BaseSteelTheme.getBorder","feathers/themes/steel/BaseSteelTheme.hx",203,0x077137c5)
HX_LOCAL_STACK_FRAME(_hx_pos_e704295178143e52_207_getButtonBorder,"feathers.themes.steel.BaseSteelTheme","getButtonBorder",0xeb669c7e,"feathers.themes.steel.BaseSteelTheme.getButtonBorder","feathers/themes/steel/BaseSteelTheme.hx",207,0x077137c5)
HX_LOCAL_STACK_FRAME(_hx_pos_e704295178143e52_211_getInsetBorder,"feathers.themes.steel.BaseSteelTheme","getInsetBorder",0xcae3c9a9,"feathers.themes.steel.BaseSteelTheme.getInsetBorder","feathers/themes/steel/BaseSteelTheme.hx",211,0x077137c5)
HX_LOCAL_STACK_FRAME(_hx_pos_e704295178143e52_215_getThemeBorder,"feathers.themes.steel.BaseSteelTheme","getThemeBorder",0xa35173d5,"feathers.themes.steel.BaseSteelTheme.getThemeBorder","feathers/themes/steel/BaseSteelTheme.hx",215,0x077137c5)
HX_LOCAL_STACK_FRAME(_hx_pos_e704295178143e52_219_getActiveFillBorder,"feathers.themes.steel.BaseSteelTheme","getActiveFillBorder",0x4198c535,"feathers.themes.steel.BaseSteelTheme.getActiveFillBorder","feathers/themes/steel/BaseSteelTheme.hx",219,0x077137c5)
HX_LOCAL_STACK_FRAME(_hx_pos_e704295178143e52_223_getContainerBorder,"feathers.themes.steel.BaseSteelTheme","getContainerBorder",0xed67a50d,"feathers.themes.steel.BaseSteelTheme.getContainerBorder","feathers/themes/steel/BaseSteelTheme.hx",223,0x077137c5)
HX_LOCAL_STACK_FRAME(_hx_pos_e704295178143e52_227_getDividerBorder,"feathers.themes.steel.BaseSteelTheme","getDividerBorder",0x4d51cca5,"feathers.themes.steel.BaseSteelTheme.getDividerBorder","feathers/themes/steel/BaseSteelTheme.hx",227,0x077137c5)
HX_LOCAL_STACK_FRAME(_hx_pos_e704295178143e52_231_getInsetFill,"feathers.themes.steel.BaseSteelTheme","getInsetFill",0x8d27b200,"feathers.themes.steel.BaseSteelTheme.getInsetFill","feathers/themes/steel/BaseSteelTheme.hx",231,0x077137c5)
HX_LOCAL_STACK_FRAME(_hx_pos_e704295178143e52_235_getDisabledInsetFill,"feathers.themes.steel.BaseSteelTheme","getDisabledInsetFill",0x84c040e4,"feathers.themes.steel.BaseSteelTheme.getDisabledInsetFill","feathers/themes/steel/BaseSteelTheme.hx",235,0x077137c5)
HX_LOCAL_STACK_FRAME(_hx_pos_e704295178143e52_238_getActiveThemeFill,"feathers.themes.steel.BaseSteelTheme","getActiveThemeFill",0x786f6e86,"feathers.themes.steel.BaseSteelTheme.getActiveThemeFill","feathers/themes/steel/BaseSteelTheme.hx",238,0x077137c5)
static const Float _hx_array_data_4dc1ceb8_26[] = {
	1.0,1.0,
};
static const int _hx_array_data_4dc1ceb8_27[] = {
	(int)0,(int)255,
};
HX_LOCAL_STACK_FRAME(_hx_pos_e704295178143e52_246_getReversedActiveThemeFill,"feathers.themes.steel.BaseSteelTheme","getReversedActiveThemeFill",0x14b3a3a4,"feathers.themes.steel.BaseSteelTheme.getReversedActiveThemeFill","feathers/themes/steel/BaseSteelTheme.hx",246,0x077137c5)
static const Float _hx_array_data_4dc1ceb8_29[] = {
	1.0,1.0,
};
static const int _hx_array_data_4dc1ceb8_30[] = {
	(int)0,(int)255,
};
HX_LOCAL_STACK_FRAME(_hx_pos_e704295178143e52_255_getOverlayFill,"feathers.themes.steel.BaseSteelTheme","getOverlayFill",0xee1ece33,"feathers.themes.steel.BaseSteelTheme.getOverlayFill","feathers/themes/steel/BaseSteelTheme.hx",255,0x077137c5)
HX_LOCAL_STACK_FRAME(_hx_pos_e704295178143e52_259_getRootFill,"feathers.themes.steel.BaseSteelTheme","getRootFill",0x43e519c5,"feathers.themes.steel.BaseSteelTheme.getRootFill","feathers/themes/steel/BaseSteelTheme.hx",259,0x077137c5)
HX_LOCAL_STACK_FRAME(_hx_pos_e704295178143e52_263_getContainerFill,"feathers.themes.steel.BaseSteelTheme","getContainerFill",0x2f8d2c64,"feathers.themes.steel.BaseSteelTheme.getContainerFill","feathers/themes/steel/BaseSteelTheme.hx",263,0x077137c5)
HX_LOCAL_STACK_FRAME(_hx_pos_e704295178143e52_267_getTextFormat,"feathers.themes.steel.BaseSteelTheme","getTextFormat",0x98ff87c4,"feathers.themes.steel.BaseSteelTheme.getTextFormat","feathers/themes/steel/BaseSteelTheme.hx",267,0x077137c5)
HX_LOCAL_STACK_FRAME(_hx_pos_e704295178143e52_271_getDisabledTextFormat,"feathers.themes.steel.BaseSteelTheme","getDisabledTextFormat",0x46e40060,"feathers.themes.steel.BaseSteelTheme.getDisabledTextFormat","feathers/themes/steel/BaseSteelTheme.hx",271,0x077137c5)
HX_LOCAL_STACK_FRAME(_hx_pos_e704295178143e52_275_getActiveTextFormat,"feathers.themes.steel.BaseSteelTheme","getActiveTextFormat",0x0e63012a,"feathers.themes.steel.BaseSteelTheme.getActiveTextFormat","feathers/themes/steel/BaseSteelTheme.hx",275,0x077137c5)
HX_LOCAL_STACK_FRAME(_hx_pos_e704295178143e52_279_getHeaderTextFormat,"feathers.themes.steel.BaseSteelTheme","getHeaderTextFormat",0x08a0e7b1,"feathers.themes.steel.BaseSteelTheme.getHeaderTextFormat","feathers/themes/steel/BaseSteelTheme.hx",279,0x077137c5)
HX_LOCAL_STACK_FRAME(_hx_pos_e704295178143e52_283_getDisabledHeaderTextFormat,"feathers.themes.steel.BaseSteelTheme","getDisabledHeaderTextFormat",0xa043bd4d,"feathers.themes.steel.BaseSteelTheme.getDisabledHeaderTextFormat","feathers/themes/steel/BaseSteelTheme.hx",283,0x077137c5)
HX_LOCAL_STACK_FRAME(_hx_pos_e704295178143e52_287_getDetailTextFormat,"feathers.themes.steel.BaseSteelTheme","getDetailTextFormat",0x8f432db5,"feathers.themes.steel.BaseSteelTheme.getDetailTextFormat","feathers/themes/steel/BaseSteelTheme.hx",287,0x077137c5)
HX_LOCAL_STACK_FRAME(_hx_pos_e704295178143e52_291_getDisabledDetailTextFormat,"feathers.themes.steel.BaseSteelTheme","getDisabledDetailTextFormat",0x26e60351,"feathers.themes.steel.BaseSteelTheme.getDisabledDetailTextFormat","feathers/themes/steel/BaseSteelTheme.hx",291,0x077137c5)
HX_LOCAL_STACK_FRAME(_hx_pos_e704295178143e52_295_getHeaderFill,"feathers.themes.steel.BaseSteelTheme","getHeaderFill",0xdacdc6b0,"feathers.themes.steel.BaseSteelTheme.getHeaderFill","feathers/themes/steel/BaseSteelTheme.hx",295,0x077137c5)
HX_LOCAL_STACK_FRAME(_hx_pos_e704295178143e52_298_lighten,"feathers.themes.steel.BaseSteelTheme","lighten",0xb7b71309,"feathers.themes.steel.BaseSteelTheme.lighten","feathers/themes/steel/BaseSteelTheme.hx",298,0x077137c5)
HX_LOCAL_STACK_FRAME(_hx_pos_e704295178143e52_322_darken,"feathers.themes.steel.BaseSteelTheme","darken",0xaa8b8555,"feathers.themes.steel.BaseSteelTheme.darken","feathers/themes/steel/BaseSteelTheme.hx",322,0x077137c5)
namespace feathers{
namespace themes{
namespace steel{

void BaseSteelTheme_obj::__construct( ::Dynamic themeColor, ::Dynamic darkThemeColor){
            	HX_GC_STACKFRAME(&_hx_pos_e704295178143e52_35_new)
HXLINE(  62)		this->darkMode = false;
HXLINE(  37)		super::__construct();
HXLINE(  39)		this->customThemeColor = themeColor;
HXLINE(  40)		this->customDarkThemeColor = darkThemeColor;
HXLINE(  41)		this->refreshColors();
HXLINE(  42)		this->refreshFonts();
HXLINE(  43)		this->styleProvider =  ::feathers::style::ClassVariantStyleProvider_obj::__alloc( HX_CTX );
            	}

Dynamic BaseSteelTheme_obj::__CreateEmpty() { return new BaseSteelTheme_obj; }

void *BaseSteelTheme_obj::_hx_vtable = 0;

Dynamic BaseSteelTheme_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BaseSteelTheme_obj > _hx_result = new BaseSteelTheme_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool BaseSteelTheme_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2da0fa7a) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2da0fa7a;
	} else {
		return inClassId==(int)0x5c3db93c;
	}
}

static ::feathers::style::IDarkModeTheme_obj _hx_feathers_themes_steel_BaseSteelTheme__hx_feathers_style_IDarkModeTheme= {
	( ::Dynamic (::hx::Object::*)(::Dynamic))&::feathers::themes::steel::BaseSteelTheme_obj::getStyleProvider,
	( void (::hx::Object::*)())&::feathers::themes::steel::BaseSteelTheme_obj::dispose,
	( bool (::hx::Object::*)())&::feathers::themes::steel::BaseSteelTheme_obj::get_darkMode,
	( bool (::hx::Object::*)(bool))&::feathers::themes::steel::BaseSteelTheme_obj::set_darkMode,
};

static ::feathers::style::ITheme_obj _hx_feathers_themes_steel_BaseSteelTheme__hx_feathers_style_ITheme= {
	( ::Dynamic (::hx::Object::*)(::Dynamic))&::feathers::themes::steel::BaseSteelTheme_obj::getStyleProvider,
	( void (::hx::Object::*)())&::feathers::themes::steel::BaseSteelTheme_obj::dispose,
};

void *BaseSteelTheme_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xa443ce88: return &_hx_feathers_themes_steel_BaseSteelTheme__hx_feathers_style_IDarkModeTheme;
		case (int)0xcaf21441: return &_hx_feathers_themes_steel_BaseSteelTheme__hx_feathers_style_ITheme;
	}
	return super::_hx_getInterface(inHash);
}

bool BaseSteelTheme_obj::get_darkMode(){
            	HX_STACKFRAME(&_hx_pos_e704295178143e52_65_get_darkMode)
HXDLIN(  65)		return this->darkMode;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseSteelTheme_obj,get_darkMode,return )

bool BaseSteelTheme_obj::set_darkMode(bool value){
            	HX_STACKFRAME(&_hx_pos_e704295178143e52_68_set_darkMode)
HXLINE(  69)		if ((this->get_darkMode() == value)) {
HXLINE(  70)			return this->get_darkMode();
            		}
HXLINE(  72)		this->darkMode = value;
HXLINE(  73)		this->refreshColors();
HXLINE(  74)		::feathers::events::StyleProviderEvent_obj::dispatch(this->styleProvider,HX_("stylesChange",32,31,e4,f9),null());
HXLINE(  75)		return this->get_darkMode();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseSteelTheme_obj,set_darkMode,return )

void BaseSteelTheme_obj::refreshColors(){
            	HX_STACKFRAME(&_hx_pos_e704295178143e52_115_refreshColors)
HXDLIN( 115)		if (this->get_darkMode()) {
HXLINE( 116)			if (::hx::IsNotNull( this->customDarkThemeColor )) {
HXLINE( 117)				this->themeColor = ( (int)(this->customDarkThemeColor) );
            			}
            			else {
HXLINE( 118)				if (::hx::IsNotNull( this->customThemeColor )) {
HXLINE( 119)					this->themeColor = ( (int)(this->customThemeColor) );
            				}
            				else {
HXLINE( 121)					this->themeColor = 4157439;
            				}
            			}
HXLINE( 123)			this->offsetThemeColor = this->darken(this->themeColor,2631720);
HXLINE( 124)			this->rootFillColor = 3684408;
HXLINE( 125)			this->controlFillColor1 = 6250335;
HXLINE( 126)			this->controlFillColor2 = 5000268;
HXLINE( 127)			this->controlDisabledFillColor = 1052688;
HXLINE( 128)			this->insetFillColor = 1579032;
HXLINE( 129)			this->disabledInsetFillColor = 3684408;
HXLINE( 130)			this->insetBorderColor = 4737096;
HXLINE( 131)			this->activeFillBorderColor = 526344;
HXLINE( 132)			this->containerFillColor = 3684408;
HXLINE( 133)			this->headerFillColor = 4144959;
HXLINE( 134)			this->overlayFillColor = 7303023;
HXLINE( 135)			this->borderColor = 526344;
HXLINE( 136)			this->dividerColor = 2631720;
HXLINE( 137)			this->textColor = 15856113;
HXLINE( 138)			this->activeTextColor = 15856113;
HXLINE( 139)			this->disabledTextColor = 9408399;
            		}
            		else {
HXLINE( 142)			if (::hx::IsNotNull( this->customThemeColor )) {
HXLINE( 143)				this->themeColor = ( (int)(this->customThemeColor) );
            			}
            			else {
HXLINE( 145)				this->themeColor = 4157439;
            			}
HXLINE( 147)			this->offsetThemeColor = this->lighten(this->themeColor,2039583);
HXLINE( 148)			this->rootFillColor = 16316664;
HXLINE( 149)			this->controlFillColor1 = 16777215;
HXLINE( 150)			this->controlFillColor2 = 15263976;
HXLINE( 151)			this->controlDisabledFillColor = 15724527;
HXLINE( 152)			this->insetFillColor = 16579836;
HXLINE( 153)			this->disabledInsetFillColor = 16316664;
HXLINE( 154)			this->insetBorderColor = 13421772;
HXLINE( 155)			this->activeFillBorderColor = this->darken(this->themeColor,3092271);
HXLINE( 156)			this->containerFillColor = 16316664;
HXLINE( 157)			this->headerFillColor = 15527148;
HXLINE( 158)			this->overlayFillColor = 9408399;
HXLINE( 159)			this->borderColor = 11316396;
HXLINE( 160)			this->dividerColor = 14671839;
HXLINE( 161)			this->textColor = 2039583;
HXLINE( 162)			this->activeTextColor = 15724527;
HXLINE( 163)			this->disabledTextColor = 10461087;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseSteelTheme_obj,refreshColors,(void))

void BaseSteelTheme_obj::refreshFonts(){
            	HX_STACKFRAME(&_hx_pos_e704295178143e52_167_refreshFonts)
HXLINE( 168)		this->fontName = HX_("_sans",32,a0,5e,ff);
HXLINE( 169)		this->refreshFontSizes();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseSteelTheme_obj,refreshFonts,(void))

void BaseSteelTheme_obj::refreshFontSizes(){
            	HX_STACKFRAME(&_hx_pos_e704295178143e52_172_refreshFontSizes)
HXLINE( 173)		this->fontSize = 14;
HXLINE( 174)		this->headerFontSize = 18;
HXLINE( 175)		this->detailFontSize = 12;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseSteelTheme_obj,refreshFontSizes,(void))

 ::feathers::graphics::FillStyle BaseSteelTheme_obj::getThemeFill(){
            	HX_STACKFRAME(&_hx_pos_e704295178143e52_179_getThemeFill)
HXDLIN( 179)		return ::feathers::graphics::FillStyle_obj::SolidColor(this->themeColor,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseSteelTheme_obj,getThemeFill,return )

 ::feathers::graphics::FillStyle BaseSteelTheme_obj::getControlFill(){
            	HX_STACKFRAME(&_hx_pos_e704295178143e52_183_getControlFill)
HXDLIN( 183)		return ::feathers::graphics::FillStyle_obj::SolidColor(this->controlFillColor2,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseSteelTheme_obj,getControlFill,return )

 ::feathers::graphics::FillStyle BaseSteelTheme_obj::getControlDisabledFill(){
            	HX_STACKFRAME(&_hx_pos_e704295178143e52_187_getControlDisabledFill)
HXDLIN( 187)		return ::feathers::graphics::FillStyle_obj::SolidColor(this->controlDisabledFillColor,((Float)0.7));
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseSteelTheme_obj,getControlDisabledFill,return )

 ::feathers::graphics::FillStyle BaseSteelTheme_obj::getButtonFill(){
            	HX_STACKFRAME(&_hx_pos_e704295178143e52_191_getButtonFill)
HXDLIN( 191)		return ::feathers::graphics::FillStyle_obj::Gradient(0,::Array_obj< int >::__new(2)->init(0,this->controlFillColor1)->init(1,this->controlFillColor2),::Array_obj< Float >::fromData( _hx_array_data_4dc1ceb8_10,2),::Array_obj< int >::fromData( _hx_array_data_4dc1ceb8_11,2),(::Math_obj::PI / ((Float)2.0)),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseSteelTheme_obj,getButtonFill,return )

 ::feathers::graphics::FillStyle BaseSteelTheme_obj::getButtonDownFill(){
            	HX_STACKFRAME(&_hx_pos_e704295178143e52_195_getButtonDownFill)
HXDLIN( 195)		return ::feathers::graphics::FillStyle_obj::Gradient(0,::Array_obj< int >::__new(2)->init(0,this->controlFillColor2)->init(1,this->controlFillColor1),::Array_obj< Float >::fromData( _hx_array_data_4dc1ceb8_13,2),::Array_obj< int >::fromData( _hx_array_data_4dc1ceb8_14,2),(::Math_obj::PI / ((Float)2.0)),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseSteelTheme_obj,getButtonDownFill,return )

 ::feathers::graphics::FillStyle BaseSteelTheme_obj::getButtonDisabledFill(){
            	HX_STACKFRAME(&_hx_pos_e704295178143e52_199_getButtonDisabledFill)
HXDLIN( 199)		return ::feathers::graphics::FillStyle_obj::SolidColor(this->controlDisabledFillColor,((Float)0.7));
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseSteelTheme_obj,getButtonDisabledFill,return )

 ::feathers::graphics::LineStyle BaseSteelTheme_obj::getBorder(::hx::Null< Float >  __o_thickness){
            		Float thickness = __o_thickness.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_e704295178143e52_203_getBorder)
HXDLIN( 203)		return ::feathers::graphics::LineStyle_obj::SolidColor(thickness,this->borderColor,null(),null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseSteelTheme_obj,getBorder,return )

 ::feathers::graphics::LineStyle BaseSteelTheme_obj::getButtonBorder(::hx::Null< Float >  __o_thickness){
            		Float thickness = __o_thickness.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_e704295178143e52_207_getButtonBorder)
HXDLIN( 207)		return ::feathers::graphics::LineStyle_obj::SolidColor(thickness,this->borderColor,null(),null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseSteelTheme_obj,getButtonBorder,return )

 ::feathers::graphics::LineStyle BaseSteelTheme_obj::getInsetBorder(::hx::Null< Float >  __o_thickness){
            		Float thickness = __o_thickness.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_e704295178143e52_211_getInsetBorder)
HXDLIN( 211)		return ::feathers::graphics::LineStyle_obj::SolidColor(thickness,this->insetBorderColor,null(),null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseSteelTheme_obj,getInsetBorder,return )

 ::feathers::graphics::LineStyle BaseSteelTheme_obj::getThemeBorder(::hx::Null< Float >  __o_thickness){
            		Float thickness = __o_thickness.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_e704295178143e52_215_getThemeBorder)
HXDLIN( 215)		return ::feathers::graphics::LineStyle_obj::SolidColor(thickness,this->themeColor,null(),null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseSteelTheme_obj,getThemeBorder,return )

 ::feathers::graphics::LineStyle BaseSteelTheme_obj::getActiveFillBorder(::hx::Null< Float >  __o_thickness){
            		Float thickness = __o_thickness.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_e704295178143e52_219_getActiveFillBorder)
HXDLIN( 219)		return ::feathers::graphics::LineStyle_obj::SolidColor(thickness,this->activeFillBorderColor,null(),null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseSteelTheme_obj,getActiveFillBorder,return )

 ::feathers::graphics::LineStyle BaseSteelTheme_obj::getContainerBorder(::hx::Null< Float >  __o_thickness){
            		Float thickness = __o_thickness.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_e704295178143e52_223_getContainerBorder)
HXDLIN( 223)		return ::feathers::graphics::LineStyle_obj::SolidColor(thickness,this->borderColor,null(),null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseSteelTheme_obj,getContainerBorder,return )

 ::feathers::graphics::LineStyle BaseSteelTheme_obj::getDividerBorder(::hx::Null< Float >  __o_thickness){
            		Float thickness = __o_thickness.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_e704295178143e52_227_getDividerBorder)
HXDLIN( 227)		return ::feathers::graphics::LineStyle_obj::SolidColor(thickness,this->dividerColor,null(),null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseSteelTheme_obj,getDividerBorder,return )

 ::feathers::graphics::FillStyle BaseSteelTheme_obj::getInsetFill(){
            	HX_STACKFRAME(&_hx_pos_e704295178143e52_231_getInsetFill)
HXDLIN( 231)		return ::feathers::graphics::FillStyle_obj::SolidColor(this->insetFillColor,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseSteelTheme_obj,getInsetFill,return )

 ::feathers::graphics::FillStyle BaseSteelTheme_obj::getDisabledInsetFill(){
            	HX_STACKFRAME(&_hx_pos_e704295178143e52_235_getDisabledInsetFill)
HXDLIN( 235)		return ::feathers::graphics::FillStyle_obj::SolidColor(this->disabledInsetFillColor,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseSteelTheme_obj,getDisabledInsetFill,return )

 ::feathers::graphics::FillStyle BaseSteelTheme_obj::getActiveThemeFill(){
            	HX_STACKFRAME(&_hx_pos_e704295178143e52_238_getActiveThemeFill)
HXLINE( 239)		::Array< int > colors = ::Array_obj< int >::__new(2)->init(0,this->themeColor)->init(1,this->offsetThemeColor);
HXLINE( 240)		if (!(this->get_darkMode())) {
HXLINE( 241)			colors->reverse();
            		}
HXLINE( 243)		return ::feathers::graphics::FillStyle_obj::Gradient(0,colors,::Array_obj< Float >::fromData( _hx_array_data_4dc1ceb8_26,2),::Array_obj< int >::fromData( _hx_array_data_4dc1ceb8_27,2),(::Math_obj::PI / ((Float)2.0)),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseSteelTheme_obj,getActiveThemeFill,return )

 ::feathers::graphics::FillStyle BaseSteelTheme_obj::getReversedActiveThemeFill(){
            	HX_STACKFRAME(&_hx_pos_e704295178143e52_246_getReversedActiveThemeFill)
HXLINE( 247)		::Array< int > colors = ::Array_obj< int >::__new(2)->init(0,this->themeColor)->init(1,this->offsetThemeColor);
HXLINE( 248)		if (this->get_darkMode()) {
HXLINE( 249)			colors->reverse();
            		}
HXLINE( 251)		return ::feathers::graphics::FillStyle_obj::Gradient(0,colors,::Array_obj< Float >::fromData( _hx_array_data_4dc1ceb8_29,2),::Array_obj< int >::fromData( _hx_array_data_4dc1ceb8_30,2),(::Math_obj::PI / ((Float)2.0)),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseSteelTheme_obj,getReversedActiveThemeFill,return )

 ::feathers::graphics::FillStyle BaseSteelTheme_obj::getOverlayFill(){
            	HX_STACKFRAME(&_hx_pos_e704295178143e52_255_getOverlayFill)
HXDLIN( 255)		return ::feathers::graphics::FillStyle_obj::SolidColor(this->overlayFillColor,((Float)0.8));
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseSteelTheme_obj,getOverlayFill,return )

 ::feathers::graphics::FillStyle BaseSteelTheme_obj::getRootFill(){
            	HX_STACKFRAME(&_hx_pos_e704295178143e52_259_getRootFill)
HXDLIN( 259)		return ::feathers::graphics::FillStyle_obj::SolidColor(this->rootFillColor,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseSteelTheme_obj,getRootFill,return )

 ::feathers::graphics::FillStyle BaseSteelTheme_obj::getContainerFill(){
            	HX_STACKFRAME(&_hx_pos_e704295178143e52_263_getContainerFill)
HXDLIN( 263)		return ::feathers::graphics::FillStyle_obj::SolidColor(this->containerFillColor,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseSteelTheme_obj,getContainerFill,return )

 ::openfl::text::TextFormat BaseSteelTheme_obj::getTextFormat(){
            	HX_GC_STACKFRAME(&_hx_pos_e704295178143e52_267_getTextFormat)
HXDLIN( 267)		return  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,this->fontName,this->fontSize,this->textColor,null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseSteelTheme_obj,getTextFormat,return )

 ::openfl::text::TextFormat BaseSteelTheme_obj::getDisabledTextFormat(){
            	HX_GC_STACKFRAME(&_hx_pos_e704295178143e52_271_getDisabledTextFormat)
HXDLIN( 271)		return  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,this->fontName,this->fontSize,this->disabledTextColor,null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseSteelTheme_obj,getDisabledTextFormat,return )

 ::openfl::text::TextFormat BaseSteelTheme_obj::getActiveTextFormat(){
            	HX_GC_STACKFRAME(&_hx_pos_e704295178143e52_275_getActiveTextFormat)
HXDLIN( 275)		return  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,this->fontName,this->fontSize,this->activeTextColor,null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseSteelTheme_obj,getActiveTextFormat,return )

 ::openfl::text::TextFormat BaseSteelTheme_obj::getHeaderTextFormat(){
            	HX_GC_STACKFRAME(&_hx_pos_e704295178143e52_279_getHeaderTextFormat)
HXDLIN( 279)		return  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,this->fontName,this->headerFontSize,this->textColor,null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseSteelTheme_obj,getHeaderTextFormat,return )

 ::openfl::text::TextFormat BaseSteelTheme_obj::getDisabledHeaderTextFormat(){
            	HX_GC_STACKFRAME(&_hx_pos_e704295178143e52_283_getDisabledHeaderTextFormat)
HXDLIN( 283)		return  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,this->fontName,this->headerFontSize,this->disabledTextColor,null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseSteelTheme_obj,getDisabledHeaderTextFormat,return )

 ::openfl::text::TextFormat BaseSteelTheme_obj::getDetailTextFormat(){
            	HX_GC_STACKFRAME(&_hx_pos_e704295178143e52_287_getDetailTextFormat)
HXDLIN( 287)		return  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,this->fontName,this->detailFontSize,this->textColor,null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseSteelTheme_obj,getDetailTextFormat,return )

 ::openfl::text::TextFormat BaseSteelTheme_obj::getDisabledDetailTextFormat(){
            	HX_GC_STACKFRAME(&_hx_pos_e704295178143e52_291_getDisabledDetailTextFormat)
HXDLIN( 291)		return  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,this->fontName,this->detailFontSize,this->disabledTextColor,null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseSteelTheme_obj,getDisabledDetailTextFormat,return )

 ::feathers::graphics::FillStyle BaseSteelTheme_obj::getHeaderFill(){
            	HX_STACKFRAME(&_hx_pos_e704295178143e52_295_getHeaderFill)
HXDLIN( 295)		return ::feathers::graphics::FillStyle_obj::SolidColor(this->headerFillColor,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseSteelTheme_obj,getHeaderFill,return )

int BaseSteelTheme_obj::lighten(int color,int offset){
            	HX_STACKFRAME(&_hx_pos_e704295178143e52_298_lighten)
HXLINE( 299)		int r1 = ((color >> 16) & 255);
HXLINE( 300)		int g1 = ((color >> 8) & 255);
HXLINE( 301)		int b1 = (color & 255);
HXLINE( 303)		int r2 = ((offset >> 16) & 255);
HXLINE( 304)		int g2 = ((offset >> 8) & 255);
HXLINE( 305)		int b2 = (offset & 255);
HXLINE( 307)		r1 = (r1 + r2);
HXLINE( 308)		if ((r1 > 255)) {
HXLINE( 309)			r1 = 255;
            		}
HXLINE( 311)		g1 = (g1 + g2);
HXLINE( 312)		if ((g1 > 255)) {
HXLINE( 313)			g1 = 255;
            		}
HXLINE( 315)		b1 = (b1 + b2);
HXLINE( 316)		if ((b1 > 255)) {
HXLINE( 317)			b1 = 255;
            		}
HXLINE( 319)		return (((r1 << 16) + (g1 << 8)) + b1);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BaseSteelTheme_obj,lighten,return )

int BaseSteelTheme_obj::darken(int color,int offset){
            	HX_STACKFRAME(&_hx_pos_e704295178143e52_322_darken)
HXLINE( 323)		int r1 = ((color >> 16) & 255);
HXLINE( 324)		int g1 = ((color >> 8) & 255);
HXLINE( 325)		int b1 = (color & 255);
HXLINE( 327)		int r2 = ((offset >> 16) & 255);
HXLINE( 328)		int g2 = ((offset >> 8) & 255);
HXLINE( 329)		int b2 = (offset & 255);
HXLINE( 331)		r1 = (r1 - r2);
HXLINE( 332)		if ((r1 < 0)) {
HXLINE( 333)			r1 = 0;
            		}
HXLINE( 335)		g1 = (g1 - g2);
HXLINE( 336)		if ((g1 < 0)) {
HXLINE( 337)			g1 = 0;
            		}
HXLINE( 339)		b1 = (b1 - b2);
HXLINE( 340)		if ((b1 < 0)) {
HXLINE( 341)			b1 = 0;
            		}
HXLINE( 343)		return (((r1 << 16) + (g1 << 8)) + b1);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BaseSteelTheme_obj,darken,return )


::hx::ObjectPtr< BaseSteelTheme_obj > BaseSteelTheme_obj::__new( ::Dynamic themeColor, ::Dynamic darkThemeColor) {
	::hx::ObjectPtr< BaseSteelTheme_obj > __this = new BaseSteelTheme_obj();
	__this->__construct(themeColor,darkThemeColor);
	return __this;
}

::hx::ObjectPtr< BaseSteelTheme_obj > BaseSteelTheme_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic themeColor, ::Dynamic darkThemeColor) {
	BaseSteelTheme_obj *__this = (BaseSteelTheme_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BaseSteelTheme_obj), true, "feathers.themes.steel.BaseSteelTheme"));
	*(void **)__this = BaseSteelTheme_obj::_hx_vtable;
	__this->__construct(themeColor,darkThemeColor);
	return __this;
}

BaseSteelTheme_obj::BaseSteelTheme_obj()
{
}

void BaseSteelTheme_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BaseSteelTheme);
	HX_MARK_MEMBER_NAME(darkMode,"darkMode");
	HX_MARK_MEMBER_NAME(customThemeColor,"customThemeColor");
	HX_MARK_MEMBER_NAME(customDarkThemeColor,"customDarkThemeColor");
	HX_MARK_MEMBER_NAME(themeColor,"themeColor");
	HX_MARK_MEMBER_NAME(offsetThemeColor,"offsetThemeColor");
	HX_MARK_MEMBER_NAME(rootFillColor,"rootFillColor");
	HX_MARK_MEMBER_NAME(controlFillColor1,"controlFillColor1");
	HX_MARK_MEMBER_NAME(controlFillColor2,"controlFillColor2");
	HX_MARK_MEMBER_NAME(controlDisabledFillColor,"controlDisabledFillColor");
	HX_MARK_MEMBER_NAME(insetFillColor,"insetFillColor");
	HX_MARK_MEMBER_NAME(disabledInsetFillColor,"disabledInsetFillColor");
	HX_MARK_MEMBER_NAME(insetBorderColor,"insetBorderColor");
	HX_MARK_MEMBER_NAME(activeFillBorderColor,"activeFillBorderColor");
	HX_MARK_MEMBER_NAME(containerFillColor,"containerFillColor");
	HX_MARK_MEMBER_NAME(headerFillColor,"headerFillColor");
	HX_MARK_MEMBER_NAME(overlayFillColor,"overlayFillColor");
	HX_MARK_MEMBER_NAME(borderColor,"borderColor");
	HX_MARK_MEMBER_NAME(dividerColor,"dividerColor");
	HX_MARK_MEMBER_NAME(textColor,"textColor");
	HX_MARK_MEMBER_NAME(activeTextColor,"activeTextColor");
	HX_MARK_MEMBER_NAME(disabledTextColor,"disabledTextColor");
	HX_MARK_MEMBER_NAME(fontName,"fontName");
	HX_MARK_MEMBER_NAME(fontSize,"fontSize");
	HX_MARK_MEMBER_NAME(headerFontSize,"headerFontSize");
	HX_MARK_MEMBER_NAME(detailFontSize,"detailFontSize");
	 ::feathers::themes::ClassVariantTheme_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void BaseSteelTheme_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(darkMode,"darkMode");
	HX_VISIT_MEMBER_NAME(customThemeColor,"customThemeColor");
	HX_VISIT_MEMBER_NAME(customDarkThemeColor,"customDarkThemeColor");
	HX_VISIT_MEMBER_NAME(themeColor,"themeColor");
	HX_VISIT_MEMBER_NAME(offsetThemeColor,"offsetThemeColor");
	HX_VISIT_MEMBER_NAME(rootFillColor,"rootFillColor");
	HX_VISIT_MEMBER_NAME(controlFillColor1,"controlFillColor1");
	HX_VISIT_MEMBER_NAME(controlFillColor2,"controlFillColor2");
	HX_VISIT_MEMBER_NAME(controlDisabledFillColor,"controlDisabledFillColor");
	HX_VISIT_MEMBER_NAME(insetFillColor,"insetFillColor");
	HX_VISIT_MEMBER_NAME(disabledInsetFillColor,"disabledInsetFillColor");
	HX_VISIT_MEMBER_NAME(insetBorderColor,"insetBorderColor");
	HX_VISIT_MEMBER_NAME(activeFillBorderColor,"activeFillBorderColor");
	HX_VISIT_MEMBER_NAME(containerFillColor,"containerFillColor");
	HX_VISIT_MEMBER_NAME(headerFillColor,"headerFillColor");
	HX_VISIT_MEMBER_NAME(overlayFillColor,"overlayFillColor");
	HX_VISIT_MEMBER_NAME(borderColor,"borderColor");
	HX_VISIT_MEMBER_NAME(dividerColor,"dividerColor");
	HX_VISIT_MEMBER_NAME(textColor,"textColor");
	HX_VISIT_MEMBER_NAME(activeTextColor,"activeTextColor");
	HX_VISIT_MEMBER_NAME(disabledTextColor,"disabledTextColor");
	HX_VISIT_MEMBER_NAME(fontName,"fontName");
	HX_VISIT_MEMBER_NAME(fontSize,"fontSize");
	HX_VISIT_MEMBER_NAME(headerFontSize,"headerFontSize");
	HX_VISIT_MEMBER_NAME(detailFontSize,"detailFontSize");
	 ::feathers::themes::ClassVariantTheme_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val BaseSteelTheme_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"darken") ) { return ::hx::Val( darken_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"lighten") ) { return ::hx::Val( lighten_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"darkMode") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_darkMode() : darkMode ); }
		if (HX_FIELD_EQ(inName,"fontName") ) { return ::hx::Val( fontName ); }
		if (HX_FIELD_EQ(inName,"fontSize") ) { return ::hx::Val( fontSize ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"textColor") ) { return ::hx::Val( textColor ); }
		if (HX_FIELD_EQ(inName,"getBorder") ) { return ::hx::Val( getBorder_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"themeColor") ) { return ::hx::Val( themeColor ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { return ::hx::Val( borderColor ); }
		if (HX_FIELD_EQ(inName,"getRootFill") ) { return ::hx::Val( getRootFill_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_darkMode") ) { return ::hx::Val( get_darkMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_darkMode") ) { return ::hx::Val( set_darkMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"dividerColor") ) { return ::hx::Val( dividerColor ); }
		if (HX_FIELD_EQ(inName,"refreshFonts") ) { return ::hx::Val( refreshFonts_dyn() ); }
		if (HX_FIELD_EQ(inName,"getThemeFill") ) { return ::hx::Val( getThemeFill_dyn() ); }
		if (HX_FIELD_EQ(inName,"getInsetFill") ) { return ::hx::Val( getInsetFill_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"rootFillColor") ) { return ::hx::Val( rootFillColor ); }
		if (HX_FIELD_EQ(inName,"refreshColors") ) { return ::hx::Val( refreshColors_dyn() ); }
		if (HX_FIELD_EQ(inName,"getButtonFill") ) { return ::hx::Val( getButtonFill_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTextFormat") ) { return ::hx::Val( getTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"getHeaderFill") ) { return ::hx::Val( getHeaderFill_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"insetFillColor") ) { return ::hx::Val( insetFillColor ); }
		if (HX_FIELD_EQ(inName,"headerFontSize") ) { return ::hx::Val( headerFontSize ); }
		if (HX_FIELD_EQ(inName,"detailFontSize") ) { return ::hx::Val( detailFontSize ); }
		if (HX_FIELD_EQ(inName,"getControlFill") ) { return ::hx::Val( getControlFill_dyn() ); }
		if (HX_FIELD_EQ(inName,"getInsetBorder") ) { return ::hx::Val( getInsetBorder_dyn() ); }
		if (HX_FIELD_EQ(inName,"getThemeBorder") ) { return ::hx::Val( getThemeBorder_dyn() ); }
		if (HX_FIELD_EQ(inName,"getOverlayFill") ) { return ::hx::Val( getOverlayFill_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"headerFillColor") ) { return ::hx::Val( headerFillColor ); }
		if (HX_FIELD_EQ(inName,"activeTextColor") ) { return ::hx::Val( activeTextColor ); }
		if (HX_FIELD_EQ(inName,"getButtonBorder") ) { return ::hx::Val( getButtonBorder_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"customThemeColor") ) { return ::hx::Val( customThemeColor ); }
		if (HX_FIELD_EQ(inName,"offsetThemeColor") ) { return ::hx::Val( offsetThemeColor ); }
		if (HX_FIELD_EQ(inName,"insetBorderColor") ) { return ::hx::Val( insetBorderColor ); }
		if (HX_FIELD_EQ(inName,"overlayFillColor") ) { return ::hx::Val( overlayFillColor ); }
		if (HX_FIELD_EQ(inName,"refreshFontSizes") ) { return ::hx::Val( refreshFontSizes_dyn() ); }
		if (HX_FIELD_EQ(inName,"getDividerBorder") ) { return ::hx::Val( getDividerBorder_dyn() ); }
		if (HX_FIELD_EQ(inName,"getContainerFill") ) { return ::hx::Val( getContainerFill_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"controlFillColor1") ) { return ::hx::Val( controlFillColor1 ); }
		if (HX_FIELD_EQ(inName,"controlFillColor2") ) { return ::hx::Val( controlFillColor2 ); }
		if (HX_FIELD_EQ(inName,"disabledTextColor") ) { return ::hx::Val( disabledTextColor ); }
		if (HX_FIELD_EQ(inName,"getButtonDownFill") ) { return ::hx::Val( getButtonDownFill_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"containerFillColor") ) { return ::hx::Val( containerFillColor ); }
		if (HX_FIELD_EQ(inName,"getContainerBorder") ) { return ::hx::Val( getContainerBorder_dyn() ); }
		if (HX_FIELD_EQ(inName,"getActiveThemeFill") ) { return ::hx::Val( getActiveThemeFill_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getActiveFillBorder") ) { return ::hx::Val( getActiveFillBorder_dyn() ); }
		if (HX_FIELD_EQ(inName,"getActiveTextFormat") ) { return ::hx::Val( getActiveTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"getHeaderTextFormat") ) { return ::hx::Val( getHeaderTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"getDetailTextFormat") ) { return ::hx::Val( getDetailTextFormat_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"customDarkThemeColor") ) { return ::hx::Val( customDarkThemeColor ); }
		if (HX_FIELD_EQ(inName,"getDisabledInsetFill") ) { return ::hx::Val( getDisabledInsetFill_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"activeFillBorderColor") ) { return ::hx::Val( activeFillBorderColor ); }
		if (HX_FIELD_EQ(inName,"getButtonDisabledFill") ) { return ::hx::Val( getButtonDisabledFill_dyn() ); }
		if (HX_FIELD_EQ(inName,"getDisabledTextFormat") ) { return ::hx::Val( getDisabledTextFormat_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"disabledInsetFillColor") ) { return ::hx::Val( disabledInsetFillColor ); }
		if (HX_FIELD_EQ(inName,"getControlDisabledFill") ) { return ::hx::Val( getControlDisabledFill_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"controlDisabledFillColor") ) { return ::hx::Val( controlDisabledFillColor ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"getReversedActiveThemeFill") ) { return ::hx::Val( getReversedActiveThemeFill_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"getDisabledHeaderTextFormat") ) { return ::hx::Val( getDisabledHeaderTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"getDisabledDetailTextFormat") ) { return ::hx::Val( getDisabledDetailTextFormat_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val BaseSteelTheme_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"darkMode") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_darkMode(inValue.Cast< bool >()) );darkMode=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fontName") ) { fontName=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fontSize") ) { fontSize=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"textColor") ) { textColor=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"themeColor") ) { themeColor=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { borderColor=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"dividerColor") ) { dividerColor=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"rootFillColor") ) { rootFillColor=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"insetFillColor") ) { insetFillColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"headerFontSize") ) { headerFontSize=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"detailFontSize") ) { detailFontSize=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"headerFillColor") ) { headerFillColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"activeTextColor") ) { activeTextColor=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"customThemeColor") ) { customThemeColor=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"offsetThemeColor") ) { offsetThemeColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"insetBorderColor") ) { insetBorderColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"overlayFillColor") ) { overlayFillColor=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"controlFillColor1") ) { controlFillColor1=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"controlFillColor2") ) { controlFillColor2=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"disabledTextColor") ) { disabledTextColor=inValue.Cast< int >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"containerFillColor") ) { containerFillColor=inValue.Cast< int >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"customDarkThemeColor") ) { customDarkThemeColor=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"activeFillBorderColor") ) { activeFillBorderColor=inValue.Cast< int >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"disabledInsetFillColor") ) { disabledInsetFillColor=inValue.Cast< int >(); return inValue; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"controlDisabledFillColor") ) { controlDisabledFillColor=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BaseSteelTheme_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("darkMode",f9,c6,1f,7d));
	outFields->push(HX_("customThemeColor",ab,55,0b,de));
	outFields->push(HX_("customDarkThemeColor",41,7a,1b,e6));
	outFields->push(HX_("themeColor",9a,e2,f0,58));
	outFields->push(HX_("offsetThemeColor",0d,d4,9b,45));
	outFields->push(HX_("rootFillColor",5e,b5,bd,4e));
	outFields->push(HX_("controlFillColor1",0e,72,34,ed));
	outFields->push(HX_("controlFillColor2",0f,72,34,ed));
	outFields->push(HX_("controlDisabledFillColor",a7,e2,dd,e4));
	outFields->push(HX_("insetFillColor",43,77,20,0f));
	outFields->push(HX_("disabledInsetFillColor",df,6d,eb,c1));
	outFields->push(HX_("insetBorderColor",fa,fa,72,35));
	outFields->push(HX_("activeFillBorderColor",ee,93,0e,ad));
	outFields->push(HX_("containerFillColor",5f,d2,b4,d0));
	outFields->push(HX_("headerFillColor",93,54,11,a5));
	outFields->push(HX_("overlayFillColor",30,42,09,17));
	outFields->push(HX_("borderColor",d7,3c,d5,d6));
	outFields->push(HX_("dividerColor",ca,93,3d,e3));
	outFields->push(HX_("textColor",76,01,4a,e3));
	outFields->push(HX_("activeTextColor",d0,36,1f,18));
	outFields->push(HX_("disabledTextColor",5a,90,1a,75));
	outFields->push(HX_("fontName",ba,8f,7d,cb));
	outFields->push(HX_("fontSize",30,be,d1,ce));
	outFields->push(HX_("headerFontSize",dd,58,2b,51));
	outFields->push(HX_("detailFontSize",e1,55,91,b4));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo BaseSteelTheme_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(BaseSteelTheme_obj,darkMode),HX_("darkMode",f9,c6,1f,7d)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(BaseSteelTheme_obj,customThemeColor),HX_("customThemeColor",ab,55,0b,de)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(BaseSteelTheme_obj,customDarkThemeColor),HX_("customDarkThemeColor",41,7a,1b,e6)},
	{::hx::fsInt,(int)offsetof(BaseSteelTheme_obj,themeColor),HX_("themeColor",9a,e2,f0,58)},
	{::hx::fsInt,(int)offsetof(BaseSteelTheme_obj,offsetThemeColor),HX_("offsetThemeColor",0d,d4,9b,45)},
	{::hx::fsInt,(int)offsetof(BaseSteelTheme_obj,rootFillColor),HX_("rootFillColor",5e,b5,bd,4e)},
	{::hx::fsInt,(int)offsetof(BaseSteelTheme_obj,controlFillColor1),HX_("controlFillColor1",0e,72,34,ed)},
	{::hx::fsInt,(int)offsetof(BaseSteelTheme_obj,controlFillColor2),HX_("controlFillColor2",0f,72,34,ed)},
	{::hx::fsInt,(int)offsetof(BaseSteelTheme_obj,controlDisabledFillColor),HX_("controlDisabledFillColor",a7,e2,dd,e4)},
	{::hx::fsInt,(int)offsetof(BaseSteelTheme_obj,insetFillColor),HX_("insetFillColor",43,77,20,0f)},
	{::hx::fsInt,(int)offsetof(BaseSteelTheme_obj,disabledInsetFillColor),HX_("disabledInsetFillColor",df,6d,eb,c1)},
	{::hx::fsInt,(int)offsetof(BaseSteelTheme_obj,insetBorderColor),HX_("insetBorderColor",fa,fa,72,35)},
	{::hx::fsInt,(int)offsetof(BaseSteelTheme_obj,activeFillBorderColor),HX_("activeFillBorderColor",ee,93,0e,ad)},
	{::hx::fsInt,(int)offsetof(BaseSteelTheme_obj,containerFillColor),HX_("containerFillColor",5f,d2,b4,d0)},
	{::hx::fsInt,(int)offsetof(BaseSteelTheme_obj,headerFillColor),HX_("headerFillColor",93,54,11,a5)},
	{::hx::fsInt,(int)offsetof(BaseSteelTheme_obj,overlayFillColor),HX_("overlayFillColor",30,42,09,17)},
	{::hx::fsInt,(int)offsetof(BaseSteelTheme_obj,borderColor),HX_("borderColor",d7,3c,d5,d6)},
	{::hx::fsInt,(int)offsetof(BaseSteelTheme_obj,dividerColor),HX_("dividerColor",ca,93,3d,e3)},
	{::hx::fsInt,(int)offsetof(BaseSteelTheme_obj,textColor),HX_("textColor",76,01,4a,e3)},
	{::hx::fsInt,(int)offsetof(BaseSteelTheme_obj,activeTextColor),HX_("activeTextColor",d0,36,1f,18)},
	{::hx::fsInt,(int)offsetof(BaseSteelTheme_obj,disabledTextColor),HX_("disabledTextColor",5a,90,1a,75)},
	{::hx::fsString,(int)offsetof(BaseSteelTheme_obj,fontName),HX_("fontName",ba,8f,7d,cb)},
	{::hx::fsInt,(int)offsetof(BaseSteelTheme_obj,fontSize),HX_("fontSize",30,be,d1,ce)},
	{::hx::fsInt,(int)offsetof(BaseSteelTheme_obj,headerFontSize),HX_("headerFontSize",dd,58,2b,51)},
	{::hx::fsInt,(int)offsetof(BaseSteelTheme_obj,detailFontSize),HX_("detailFontSize",e1,55,91,b4)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *BaseSteelTheme_obj_sStaticStorageInfo = 0;
#endif

static ::String BaseSteelTheme_obj_sMemberFields[] = {
	HX_("darkMode",f9,c6,1f,7d),
	HX_("get_darkMode",02,7b,39,32),
	HX_("set_darkMode",76,9e,32,47),
	HX_("customThemeColor",ab,55,0b,de),
	HX_("customDarkThemeColor",41,7a,1b,e6),
	HX_("themeColor",9a,e2,f0,58),
	HX_("offsetThemeColor",0d,d4,9b,45),
	HX_("rootFillColor",5e,b5,bd,4e),
	HX_("controlFillColor1",0e,72,34,ed),
	HX_("controlFillColor2",0f,72,34,ed),
	HX_("controlDisabledFillColor",a7,e2,dd,e4),
	HX_("insetFillColor",43,77,20,0f),
	HX_("disabledInsetFillColor",df,6d,eb,c1),
	HX_("insetBorderColor",fa,fa,72,35),
	HX_("activeFillBorderColor",ee,93,0e,ad),
	HX_("containerFillColor",5f,d2,b4,d0),
	HX_("headerFillColor",93,54,11,a5),
	HX_("overlayFillColor",30,42,09,17),
	HX_("borderColor",d7,3c,d5,d6),
	HX_("dividerColor",ca,93,3d,e3),
	HX_("textColor",76,01,4a,e3),
	HX_("activeTextColor",d0,36,1f,18),
	HX_("disabledTextColor",5a,90,1a,75),
	HX_("fontName",ba,8f,7d,cb),
	HX_("fontSize",30,be,d1,ce),
	HX_("headerFontSize",dd,58,2b,51),
	HX_("detailFontSize",e1,55,91,b4),
	HX_("refreshColors",eb,69,c1,c4),
	HX_("refreshFonts",e9,b3,13,18),
	HX_("refreshFontSizes",e8,1e,b8,d8),
	HX_("getThemeFill",b6,4d,24,34),
	HX_("getControlFill",8a,2b,8a,90),
	HX_("getControlDisabledFill",26,e6,8a,b0),
	HX_("getButtonFill",cb,99,24,0a),
	HX_("getButtonDownFill",4d,db,a7,5f),
	HX_("getButtonDisabledFill",67,fd,8e,9e),
	HX_("getBorder",22,d6,70,e0),
	HX_("getButtonBorder",34,7a,c2,2e),
	HX_("getInsetBorder",b3,94,99,c6),
	HX_("getThemeBorder",df,3e,07,9f),
	HX_("getActiveFillBorder",eb,b5,94,27),
	HX_("getContainerBorder",17,bd,60,81),
	HX_("getDividerBorder",2f,ee,57,fa),
	HX_("getInsetFill",8a,c6,47,31),
	HX_("getDisabledInsetFill",6e,ef,36,db),
	HX_("getActiveThemeFill",90,86,68,0c),
	HX_("getReversedActiveThemeFill",ae,d5,f2,a8),
	HX_("getOverlayFill",3d,99,d4,e9),
	HX_("getRootFill",7b,64,e6,00),
	HX_("getContainerFill",ee,4d,93,dc),
	HX_("getTextFormat",fa,6b,f1,90),
	HX_("getDisabledTextFormat",96,0a,46,98),
	HX_("getActiveTextFormat",e0,f1,5e,f4),
	HX_("getHeaderTextFormat",67,d8,9c,ee),
	HX_("getDisabledHeaderTextFormat",03,54,50,c3),
	HX_("getDetailTextFormat",6b,1e,3f,75),
	HX_("getDisabledDetailTextFormat",07,9a,f2,49),
	HX_("getHeaderFill",e6,aa,bf,d2),
	HX_("lighten",bf,4a,e3,19),
	HX_("darken",5f,36,3a,21),
	::String(null()) };

::hx::Class BaseSteelTheme_obj::__mClass;

void BaseSteelTheme_obj::__register()
{
	BaseSteelTheme_obj _hx_dummy;
	BaseSteelTheme_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("feathers.themes.steel.BaseSteelTheme",b8,ce,c1,4d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BaseSteelTheme_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BaseSteelTheme_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BaseSteelTheme_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BaseSteelTheme_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace feathers
} // end namespace themes
} // end namespace steel
