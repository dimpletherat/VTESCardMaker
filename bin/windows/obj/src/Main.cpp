// Generated by Haxe 4.1.0
#include <hxcpp.h>

#ifndef INCLUDED_Card
#include <Card.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_entities_Clan
#include <entities/Clan.h>
#endif
#ifndef INCLUDED_entities_ClanName
#include <entities/ClanName.h>
#endif
#ifndef INCLUDED_feathers_controls_BasicButton
#include <feathers/controls/BasicButton.h>
#endif
#ifndef INCLUDED_feathers_controls_Button
#include <feathers/controls/Button.h>
#endif
#ifndef INCLUDED_feathers_controls_ComboBox
#include <feathers/controls/ComboBox.h>
#endif
#ifndef INCLUDED_feathers_controls_ListView
#include <feathers/controls/ListView.h>
#endif
#ifndef INCLUDED_feathers_controls_supportClasses_BaseScrollContainer
#include <feathers/controls/supportClasses/BaseScrollContainer.h>
#endif
#ifndef INCLUDED_feathers_core_FeathersControl
#include <feathers/core/FeathersControl.h>
#endif
#ifndef INCLUDED_feathers_core_IDataSelector
#include <feathers/core/IDataSelector.h>
#endif
#ifndef INCLUDED_feathers_core_IDisplayObject
#include <feathers/core/IDisplayObject.h>
#endif
#ifndef INCLUDED_feathers_core_IFocusObject
#include <feathers/core/IFocusObject.h>
#endif
#ifndef INCLUDED_feathers_core_IIndexSelector
#include <feathers/core/IIndexSelector.h>
#endif
#ifndef INCLUDED_feathers_core_IMeasureObject
#include <feathers/core/IMeasureObject.h>
#endif
#ifndef INCLUDED_feathers_core_IStateContext
#include <feathers/core/IStateContext.h>
#endif
#ifndef INCLUDED_feathers_core_ITextControl
#include <feathers/core/ITextControl.h>
#endif
#ifndef INCLUDED_feathers_core_IUIControl
#include <feathers/core/IUIControl.h>
#endif
#ifndef INCLUDED_feathers_core_IValidating
#include <feathers/core/IValidating.h>
#endif
#ifndef INCLUDED_feathers_core_MeasureSprite
#include <feathers/core/MeasureSprite.h>
#endif
#ifndef INCLUDED_feathers_core_ValidatingSprite
#include <feathers/core/ValidatingSprite.h>
#endif
#ifndef INCLUDED_feathers_data_ArrayCollection
#include <feathers/data/ArrayCollection.h>
#endif
#ifndef INCLUDED_feathers_data_IFlatCollection
#include <feathers/data/IFlatCollection.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayout
#include <feathers/layout/ILayout.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayoutObject
#include <feathers/layout/ILayoutObject.h>
#endif
#ifndef INCLUDED_feathers_layout_IScrollLayout
#include <feathers/layout/IScrollLayout.h>
#endif
#ifndef INCLUDED_feathers_layout_IVirtualLayout
#include <feathers/layout/IVirtualLayout.h>
#endif
#ifndef INCLUDED_feathers_layout_VerticalListLayout
#include <feathers/layout/VerticalListLayout.h>
#endif
#ifndef INCLUDED_feathers_style_IStyleObject
#include <feathers/style/IStyleObject.h>
#endif
#ifndef INCLUDED_feathers_style_IVariantStyleObject
#include <feathers/style/IVariantStyleObject.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e47a9afac0942eb9_27_new,"Main","new",0x6616a5cb,"Main.new","Main.hx",27,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_63__addedToStageHandler,"Main","_addedToStageHandler",0x11f790dd,"Main._addedToStageHandler","Main.hx",63,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_68__addedToStageHandler,"Main","_addedToStageHandler",0x11f790dd,"Main._addedToStageHandler","Main.hx",68,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_75__addedToStageHandler,"Main","_addedToStageHandler",0x11f790dd,"Main._addedToStageHandler","Main.hx",75,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_34__addedToStageHandler,"Main","_addedToStageHandler",0x11f790dd,"Main._addedToStageHandler","Main.hx",34,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_111_comboBox_changeHandler,"Main","comboBox_changeHandler",0x54fcd90d,"Main.comboBox_changeHandler","Main.hx",111,0x087e5c05)

void Main_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_27_new)
HXLINE(  28)		super::__construct();
HXLINE(  29)		this->addEventListener(HX_("addedToStage",63,22,55,0c),this->_addedToStageHandler_dyn(),null(),null(),null());
            	}

Dynamic Main_obj::__CreateEmpty() { return new Main_obj; }

void *Main_obj::_hx_vtable = 0;

Dynamic Main_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Main_obj > _hx_result = new Main_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Main_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c89e854) {
		if (inClassId<=(int)0x07825a7d) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x07825a7d;
			}
		} else {
			return inClassId==(int)0x0c89e854;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void Main_obj::_addedToStageHandler( ::openfl::events::Event e){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		::String _hx_run( ::Dynamic item){
            			HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_63__addedToStageHandler)
HXLINE(  63)			return ( (::String)(item->__Field(HX_("label",f4,0d,af,6f),::hx::paccDynamic)) );
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::Main,_gthis) HXARGC(0)
            		 ::feathers::controls::Button _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_68__addedToStageHandler)
HXLINE(  69)			 ::feathers::controls::Button bt =  ::feathers::controls::Button_obj::__alloc( HX_CTX );
HXLINE(  70)			bt->set_embedFonts(true);
HXLINE(  71)			bt->set_textFormat( ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,_gthis->_cardTextFont->name,14,10027008,null(),null(),null(),null(),null(),null(),null(),null(),null(),null()));
HXLINE(  72)			return bt;
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(0)
            		 ::feathers::controls::ListView _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_75__addedToStageHandler)
HXLINE(  76)			 ::feathers::controls::ListView lv =  ::feathers::controls::ListView_obj::__alloc( HX_CTX );
HXLINE(  77)			lv->set_virtualLayout(true);
HXLINE(  78)			 ::feathers::layout::VerticalListLayout layout =  ::feathers::layout::VerticalListLayout_obj::__alloc( HX_CTX );
HXLINE(  80)			lv->set_layout(layout);
HXLINE(  81)			return lv;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_34__addedToStageHandler)
HXLINE(  33)		 ::Main _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  35)		this->_cardTextFont = ::openfl::utils::Assets_obj::getFont(HX_("fonts/GIL_____.TTF",38,f8,77,45),null());
HXLINE(  36)		::haxe::Log_obj::trace(this->_cardTextFont->name,::hx::SourceInfo(HX_("src/Main.hx",9a,7a,30,a1),36,HX_("Main",59,64,2f,33),HX_("_addedToStageHandler",a8,2e,75,3c)));
HXLINE(  41)		this->_card =  ::Card_obj::__alloc( HX_CTX );
HXLINE(  42)		this->addChild(this->_card);
HXLINE(  44)		 ::Card _hx_tmp = this->_card;
HXDLIN(  44)		_hx_tmp->set_clan( ::entities::Clan_obj::__alloc( HX_CTX ,::entities::ClanName_obj::GANGREL_dyn()));
HXLINE(  47)		 ::openfl::text::TextField t =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE(  48)		t->set_embedFonts(true);
HXLINE(  49)		t->set_defaultTextFormat( ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,this->_cardTextFont->name,28,10027008,null(),null(),null(),null(),null(),null(),null(),null(),null(),null()));
HXLINE(  50)		t->set_antiAliasType(0);
HXLINE(  51)		t->set_autoSize(1);
HXLINE(  52)		t->set_border(true);
HXLINE(  53)		t->set_text(HX_W(u"dslkhjfqslkfhlk\u00e9hjjqshdqhs\u00e0\u00e8",2ef6,301d));
HXLINE(  54)		t->set_autoSize(2);
HXLINE(  55)		t->set_width((t->get_width() + 50));
HXLINE(  57)		this->addChild(t);
HXLINE(  60)		this->_cbClan =  ::feathers::controls::ComboBox_obj::__alloc( HX_CTX );
HXLINE(  62)		this->_cbClan->itemToText =  ::Dynamic(new _hx_Closure_0());
HXLINE(  65)		this->_cbClan->set_x(( (Float)(400) ));
HXLINE(  66)		this->_cbClan->set_y(( (Float)(20) ));
HXLINE(  67)		this->_cbClan->set_buttonFactory( ::Dynamic(new _hx_Closure_1(_gthis)));
HXLINE(  74)		this->_cbClan->set_listViewFactory( ::Dynamic(new _hx_Closure_2()));
HXLINE(  87)		this->addChild(this->_cbClan);
HXLINE(  89)		 ::feathers::data::ArrayCollection dataprovider =  ::feathers::data::ArrayCollection_obj::__alloc( HX_CTX ,null());
HXLINE(  90)		dataprovider->add( ::entities::Clan_obj::__alloc( HX_CTX ,::entities::ClanName_obj::BRUJAH_dyn()));
HXLINE(  91)		dataprovider->add( ::entities::Clan_obj::__alloc( HX_CTX ,::entities::ClanName_obj::GANGREL_dyn()));
HXLINE(  92)		dataprovider->add( ::entities::Clan_obj::__alloc( HX_CTX ,::entities::ClanName_obj::MALKAVIAN_dyn()));
HXLINE(  93)		dataprovider->add( ::entities::Clan_obj::__alloc( HX_CTX ,::entities::ClanName_obj::NOSFERATU_dyn()));
HXLINE(  94)		dataprovider->add( ::entities::Clan_obj::__alloc( HX_CTX ,::entities::ClanName_obj::TREMERE_dyn()));
HXLINE(  95)		dataprovider->add( ::entities::Clan_obj::__alloc( HX_CTX ,::entities::ClanName_obj::TOREADOR_dyn()));
HXLINE(  96)		dataprovider->add( ::entities::Clan_obj::__alloc( HX_CTX ,::entities::ClanName_obj::VENTRUE_dyn()));
HXLINE( 101)		this->_cbClan->set_dataProvider(dataprovider);
HXLINE( 103)		this->_cbClan->addEventListener(HX_("change",70,91,72,b7),this->comboBox_changeHandler_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Main_obj,_addedToStageHandler,(void))

void Main_obj::comboBox_changeHandler( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_111_comboBox_changeHandler)
HXDLIN( 111)		 ::Card _hx_tmp = this->_card;
HXDLIN( 111)		_hx_tmp->set_clan(( ( ::entities::Clan)(this->_cbClan->get_selectedItem()) ));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Main_obj,comboBox_changeHandler,(void))


::hx::ObjectPtr< Main_obj > Main_obj::__new() {
	::hx::ObjectPtr< Main_obj > __this = new Main_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Main_obj > Main_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Main_obj *__this = (Main_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Main_obj), true, "Main"));
	*(void **)__this = Main_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Main_obj::Main_obj()
{
}

void Main_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Main);
	HX_MARK_MEMBER_NAME(_cardTextFont,"_cardTextFont");
	HX_MARK_MEMBER_NAME(_card,"_card");
	HX_MARK_MEMBER_NAME(_cbClan,"_cbClan");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Main_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_cardTextFont,"_cardTextFont");
	HX_VISIT_MEMBER_NAME(_card,"_card");
	HX_VISIT_MEMBER_NAME(_cbClan,"_cbClan");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Main_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_card") ) { return ::hx::Val( _card ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_cbClan") ) { return ::hx::Val( _cbClan ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_cardTextFont") ) { return ::hx::Val( _cardTextFont ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_addedToStageHandler") ) { return ::hx::Val( _addedToStageHandler_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"comboBox_changeHandler") ) { return ::hx::Val( comboBox_changeHandler_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Main_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_card") ) { _card=inValue.Cast<  ::Card >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_cbClan") ) { _cbClan=inValue.Cast<  ::feathers::controls::ComboBox >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_cardTextFont") ) { _cardTextFont=inValue.Cast<  ::openfl::text::Font >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Main_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_cardTextFont",eb,6d,a0,4b));
	outFields->push(HX_("_card",af,39,cb,f4));
	outFields->push(HX_("_cbClan",b4,37,ac,9d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Main_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::text::Font */ ,(int)offsetof(Main_obj,_cardTextFont),HX_("_cardTextFont",eb,6d,a0,4b)},
	{::hx::fsObject /*  ::Card */ ,(int)offsetof(Main_obj,_card),HX_("_card",af,39,cb,f4)},
	{::hx::fsObject /*  ::feathers::controls::ComboBox */ ,(int)offsetof(Main_obj,_cbClan),HX_("_cbClan",b4,37,ac,9d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Main_obj_sStaticStorageInfo = 0;
#endif

static ::String Main_obj_sMemberFields[] = {
	HX_("_cardTextFont",eb,6d,a0,4b),
	HX_("_card",af,39,cb,f4),
	HX_("_cbClan",b4,37,ac,9d),
	HX_("_addedToStageHandler",a8,2e,75,3c),
	HX_("comboBox_changeHandler",98,bf,75,50),
	::String(null()) };

::hx::Class Main_obj::__mClass;

void Main_obj::__register()
{
	Main_obj _hx_dummy;
	Main_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Main",59,64,2f,33);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Main_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Main_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Main_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Main_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

