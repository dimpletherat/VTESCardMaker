// Generated by Haxe 4.1.0
#include <hxcpp.h>

#ifndef INCLUDED_Card
#include <Card.h>
#endif
#ifndef INCLUDED_entities_Clan
#include <entities/Clan.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ddaf163b228de288_18_new,"Card","new",0x0152a2e2,"Card.new","Card.hx",18,0x90a6cece)
HX_LOCAL_STACK_FRAME(_hx_pos_ddaf163b228de288_11_set_clan,"Card","set_clan",0x02475311,"Card.set_clan","Card.hx",11,0x90a6cece)
HX_LOCAL_STACK_FRAME(_hx_pos_ddaf163b228de288_24__update,"Card","_update",0x4d63d32a,"Card._update","Card.hx",24,0x90a6cece)

void Card_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_ddaf163b228de288_18_new)
HXDLIN(  18)		super::__construct();
            	}

Dynamic Card_obj::__CreateEmpty() { return new Card_obj; }

void *Card_obj::_hx_vtable = 0;

Dynamic Card_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Card_obj > _hx_result = new Card_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Card_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c89e854) {
		if (inClassId<=(int)0x0330636f) {
			if (inClassId<=(int)0x00e64014) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x00e64014;
			} else {
				return inClassId==(int)0x0330636f;
			}
		} else {
			return inClassId==(int)0x0c89e854;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

 ::entities::Clan Card_obj::set_clan( ::entities::Clan value){
            	HX_STACKFRAME(&_hx_pos_ddaf163b228de288_11_set_clan)
HXLINE(  12)		this->clan = value;
HXLINE(  13)		this->_update();
HXLINE(  14)		return this->clan;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Card_obj,set_clan,return )

void Card_obj::_update(){
            	HX_GC_STACKFRAME(&_hx_pos_ddaf163b228de288_24__update)
HXLINE(  25)		 ::openfl::display::Bitmap bg =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData((HX_("images/",77,50,74,c1) + this->clan->get_backgroundFileName()),null()),null(),null());
HXLINE(  26)		bg->set_scaleX(bg->set_scaleY(((Float)0.5)));
HXLINE(  27)		this->addChild(bg);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Card_obj,_update,(void))


::hx::ObjectPtr< Card_obj > Card_obj::__new() {
	::hx::ObjectPtr< Card_obj > __this = new Card_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Card_obj > Card_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Card_obj *__this = (Card_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Card_obj), true, "Card"));
	*(void **)__this = Card_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Card_obj::Card_obj()
{
}

void Card_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Card);
	HX_MARK_MEMBER_NAME(clan,"clan");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Card_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(clan,"clan");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Card_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"clan") ) { return ::hx::Val( clan ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_update") ) { return ::hx::Val( _update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"set_clan") ) { return ::hx::Val( set_clan_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Card_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"clan") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_clan(inValue.Cast<  ::entities::Clan >()) );clan=inValue.Cast<  ::entities::Clan >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Card_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("clan",d6,67,c2,41));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Card_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::entities::Clan */ ,(int)offsetof(Card_obj,clan),HX_("clan",d6,67,c2,41)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Card_obj_sStaticStorageInfo = 0;
#endif

static ::String Card_obj_sMemberFields[] = {
	HX_("clan",d6,67,c2,41),
	HX_("set_clan",d3,7c,da,6f),
	HX_("_update",a8,97,7c,f5),
	::String(null()) };

::hx::Class Card_obj::__mClass;

void Card_obj::__register()
{
	Card_obj _hx_dummy;
	Card_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Card",f0,49,93,2c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Card_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Card_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Card_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Card_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

